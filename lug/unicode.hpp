// lug - Embedded DSL for PE grammar parser combinators in C++
// Copyright (c) 2017 Jesse W. Towner
// See LICENSE.md file for license details

// This header file is generated by the makeunicode tool program.
// Do not modify this file by hand. Instead, modify and run the
// tool to regenerate this file.

#pragma once

#include "lug/detail.hpp"
#include <cctype>
#include <cstddef>
#include <cstdint>
#include <array>
#include <memory>
#include <optional>
#include <utility>
#include <vector>
#include <bitset>

namespace lug::unicode
{

// POSIX compatibility properties
enum class ctype : std::uint_least16_t
{
	none     = 0,
	alpha    = UINT16_C(1) <<  0,
	lower    = UINT16_C(1) <<  1,
	upper    = UINT16_C(1) <<  2,
	punct    = UINT16_C(1) <<  3,
	digit    = UINT16_C(1) <<  4,
	xdigit   = UINT16_C(1) <<  5,
	alnum    = UINT16_C(1) <<  6,
	space    = UINT16_C(1) <<  7,
	blank    = UINT16_C(1) <<  8,
	cntrl    = UINT16_C(1) <<  9,
	graph    = UINT16_C(1) << 10,
	print    = UINT16_C(1) << 11,
	word     = UINT16_C(1) << 12,
	is_bitfield_enum
};

// Binary properties
enum class ptype : std::uint_least64_t
{
	None                                 = 0,
	Any                                  = UINT64_C(1) <<  0,
	Ascii                                = UINT64_C(1) <<  1,
	Assigned                             = UINT64_C(1) <<  2,
	Line_Ending                          = UINT64_C(1) <<  3,
	White_Space                          = UINT64_C(1) <<  4,
	Bidi_Control                         = UINT64_C(1) <<  5,
	Join_Control                         = UINT64_C(1) <<  6,
	Dash                                 = UINT64_C(1) <<  7,
	Quotation_Mark                       = UINT64_C(1) <<  8,
	Terminal_Punctuation                 = UINT64_C(1) <<  9,
	Other_Math                           = UINT64_C(1) << 10,
	Hex_Digit                            = UINT64_C(1) << 11,
	ASCII_Hex_Digit                      = UINT64_C(1) << 12,
	Other_Alphabetic                     = UINT64_C(1) << 13,
	Ideographic                          = UINT64_C(1) << 14,
	Diacritic                            = UINT64_C(1) << 15,
	Extender                             = UINT64_C(1) << 16,
	Other_Lowercase                      = UINT64_C(1) << 17,
	Other_Uppercase                      = UINT64_C(1) << 18,
	Noncharacter_Code_Point              = UINT64_C(1) << 19,
	Other_Grapheme_Extend                = UINT64_C(1) << 20,
	IDS_Binary_Operator                  = UINT64_C(1) << 21,
	IDS_Ternary_Operator                 = UINT64_C(1) << 22,
	Radical                              = UINT64_C(1) << 23,
	Unified_Ideograph                    = UINT64_C(1) << 24,
	Other_Default_Ignorable_Code_Point   = UINT64_C(1) << 25,
	Soft_Dotted                          = UINT64_C(1) << 26,
	Logical_Order_Exception              = UINT64_C(1) << 27,
	Other_ID_Start                       = UINT64_C(1) << 28,
	Other_ID_Continue                    = UINT64_C(1) << 29,
	Sentence_Terminal                    = UINT64_C(1) << 30,
	Variation_Selector                   = UINT64_C(1) << 31,
	Pattern_White_Space                  = UINT64_C(1) << 32,
	Pattern_Syntax                       = UINT64_C(1) << 33,
	Prepended_Concatenation_Mark         = UINT64_C(1) << 34,
	Regional_Indicator                   = UINT64_C(1) << 35,
	Lowercase                            = UINT64_C(1) << 36,
	Uppercase                            = UINT64_C(1) << 37,
	Cased                                = UINT64_C(1) << 38,
	Case_Ignorable                       = UINT64_C(1) << 39,
	Changes_When_Lowercased              = UINT64_C(1) << 40,
	Changes_When_Uppercased              = UINT64_C(1) << 41,
	Changes_When_Titlecased              = UINT64_C(1) << 42,
	Changes_When_Casefolded              = UINT64_C(1) << 43,
	Changes_When_Casemapped              = UINT64_C(1) << 44,
	Alphabetic                           = UINT64_C(1) << 45,
	Default_Ignorable_Code_Point         = UINT64_C(1) << 46,
	Grapheme_Base                        = UINT64_C(1) << 47,
	Grapheme_Extend                      = UINT64_C(1) << 48,
	Math                                 = UINT64_C(1) << 49,
	ID_Start                             = UINT64_C(1) << 50,
	ID_Continue                          = UINT64_C(1) << 51,
	XID_Start                            = UINT64_C(1) << 52,
	XID_Continue                         = UINT64_C(1) << 53,
	is_bitfield_enum
};

// General categories
enum class gctype : std::uint_least32_t
{
	None = 0,
	Ll = UINT32_C(1) <<  0,    Lowercase_Letter = Ll,
	Lm = UINT32_C(1) <<  1,    Modifier_Letter = Lm,
	Lo = UINT32_C(1) <<  2,    Other_Letter = Lo,
	Lt = UINT32_C(1) <<  3,    Titlecase_Letter = Lt,
	Lu = UINT32_C(1) <<  4,    Uppercase_Letter = Lu,
	Mc = UINT32_C(1) <<  5,    Spacing_Mark = Mc,
	Me = UINT32_C(1) <<  6,    Enclosing_Mark = Me,
	Mn = UINT32_C(1) <<  7,    Nonspacing_Mark = Mn,
	Nd = UINT32_C(1) <<  8,    Decimal_Number = Nd,
	Nl = UINT32_C(1) <<  9,    Letter_Number = Nl,
	No = UINT32_C(1) << 10,    Other_Number = No,
	Pc = UINT32_C(1) << 11,    Connector_Punctuation = Pc,
	Pd = UINT32_C(1) << 12,    Dash_Punctuation = Pd,
	Pe = UINT32_C(1) << 13,    Close_Punctuation = Pe,
	Pf = UINT32_C(1) << 14,    Final_Punctuation = Pf,
	Pi = UINT32_C(1) << 15,    Initial_Punctuation = Pi,
	Po = UINT32_C(1) << 16,    Other_Punctuation = Po,
	Ps = UINT32_C(1) << 17,    Open_Punctuation = Ps,
	Sc = UINT32_C(1) << 18,    Currency_Symbol = Sc,
	Sk = UINT32_C(1) << 19,    Modifier_Symbol = Sk,
	Sm = UINT32_C(1) << 20,    Mathematical_Symbol = Sm,
	So = UINT32_C(1) << 21,    Other_Symbol = So,
	Zl = UINT32_C(1) << 22,    Line_Separator = Zl,
	Zp = UINT32_C(1) << 23,    Paragraph_Separator = Zp,
	Zs = UINT32_C(1) << 24,    Space_Separator = Zs,
	Cc = UINT32_C(1) << 25,    Control = Cc,
	Cf = UINT32_C(1) << 26,    Format = Cf,
	Cn = UINT32_C(1) << 27,    Unassigned = Cn,
	Co = UINT32_C(1) << 28,    Private_Use = Co,
	Cs = UINT32_C(1) << 29,    Surrogate = Cs,
	C  = Cc|Cf|Cn|Co|Cs,       Other = C,
	L  = Lu|Ll|Lt|Lm|Lo,       Letter = L,
	LC = Lu|Ll|Lt,             Cased_Letter = LC,
	M  = Mc|Me|Mn,             Mark = M,
	N  = Nd|Nl|No,             Number = N,
	P  = Pc|Pd|Pe|Pf|Pi|Po|Ps, Punctuation = P,
	S  = Sc|Sm|Sk|So,          Symbol = S,
	Z  = Zl|Zp|Zs,             Separator = Z,
	is_bitfield_enum
};

// Scripts
enum class sctype : std::uint_least8_t
{
	Unknown                  =   0,
	Common                   =   1,
	Inherited                =   2,
	Arabic                   =   3,
	Armenian                 =   4,
	Bengali                  =   5,
	Bopomofo                 =   6,
	Braille                  =   7,
	Buginese                 =   8,
	Buhid                    =   9,
	Canadian_Aboriginal      =  10,
	Cherokee                 =  11,
	Coptic                   =  12,
	Cypriot                  =  13,
	Cyrillic                 =  14,
	Deseret                  =  15,
	Devanagari               =  16,
	Ethiopic                 =  17,
	Georgian                 =  18,
	Glagolitic               =  19,
	Gothic                   =  20,
	Greek                    =  21,
	Gujarati                 =  22,
	Gurmukhi                 =  23,
	Han                      =  24,
	Hangul                   =  25,
	Hanunoo                  =  26,
	Hebrew                   =  27,
	Hiragana                 =  28,
	Kannada                  =  29,
	Katakana                 =  30,
	Kharoshthi               =  31,
	Khmer                    =  32,
	Lao                      =  33,
	Latin                    =  34,
	Limbu                    =  35,
	Linear_B                 =  36,
	Malayalam                =  37,
	Mongolian                =  38,
	Myanmar                  =  39,
	New_Tai_Lue              =  40,
	Ogham                    =  41,
	Old_Italic               =  42,
	Old_Persian              =  43,
	Oriya                    =  44,
	Osmanya                  =  45,
	Runic                    =  46,
	Shavian                  =  47,
	Sinhala                  =  48,
	Syloti_Nagri             =  49,
	Syriac                   =  50,
	Tagalog                  =  51,
	Tagbanwa                 =  52,
	Tai_Le                   =  53,
	Tamil                    =  54,
	Telugu                   =  55,
	Thaana                   =  56,
	Thai                     =  57,
	Tibetan                  =  58,
	Tifinagh                 =  59,
	Ugaritic                 =  60,
	Yi                       =  61,
	Balinese                 =  62,
	Cuneiform                =  63,
	Nko                      =  64,
	Phags_Pa                 =  65,
	Phoenician               =  66,
	Carian                   =  67,
	Cham                     =  68,
	Kayah_Li                 =  69,
	Lepcha                   =  70,
	Lycian                   =  71,
	Lydian                   =  72,
	Ol_Chiki                 =  73,
	Rejang                   =  74,
	Saurashtra               =  75,
	Sundanese                =  76,
	Vai                      =  77,
	Avestan                  =  78,
	Bamum                    =  79,
	Egyptian_Hieroglyphs     =  80,
	Imperial_Aramaic         =  81,
	Inscriptional_Pahlavi    =  82,
	Inscriptional_Parthian   =  83,
	Javanese                 =  84,
	Kaithi                   =  85,
	Lisu                     =  86,
	Meetei_Mayek             =  87,
	Old_South_Arabian        =  88,
	Old_Turkic               =  89,
	Samaritan                =  90,
	Tai_Tham                 =  91,
	Tai_Viet                 =  92,
	Batak                    =  93,
	Brahmi                   =  94,
	Mandaic                  =  95,
	Chakma                   =  96,
	Meroitic_Cursive         =  97,
	Meroitic_Hieroglyphs     =  98,
	Miao                     =  99,
	Sharada                  = 100,
	Sora_Sompeng             = 101,
	Takri                    = 102,
	Bassa_Vah                = 103,
	Caucasian_Albanian       = 104,
	Duployan                 = 105,
	Elbasan                  = 106,
	Grantha                  = 107,
	Khojki                   = 108,
	Khudawadi                = 109,
	Linear_A                 = 110,
	Mahajani                 = 111,
	Manichaean               = 112,
	Mende_Kikakui            = 113,
	Modi                     = 114,
	Mro                      = 115,
	Nabataean                = 116,
	Old_North_Arabian        = 117,
	Old_Permic               = 118,
	Pahawh_Hmong             = 119,
	Palmyrene                = 120,
	Psalter_Pahlavi          = 121,
	Pau_Cin_Hau              = 122,
	Siddham                  = 123,
	Tirhuta                  = 124,
	Warang_Citi              = 125,
	Ahom                     = 126,
	Anatolian_Hieroglyphs    = 127,
	Hatran                   = 128,
	Multani                  = 129,
	Old_Hungarian            = 130,
	SignWriting              = 131,
	Adlam                    = 132,
	Bhaiksuki                = 133,
	Marchen                  = 134,
	Newa                     = 135,
	Osage                    = 136,
	Tangut                   = 137,
	Masaram_Gondi            = 138,
	Nushu                    = 139,
	Soyombo                  = 140,
	Zanabazar_Square         = 141
};

// Blocks
enum class blktype : std::uint_least16_t
{
	No_block                                         =   0,
	Basic_Latin                                      =   1,
	Latin_1_Supplement                               =   2,
	Latin_Extended_A                                 =   3,
	Latin_Extended_B                                 =   4,
	IPA_Extensions                                   =   5,
	Spacing_Modifier_Letters                         =   6,
	Combining_Diacritical_Marks                      =   7,
	Greek_and_Coptic                                 =   8,
	Cyrillic                                         =   9,
	Cyrillic_Supplement                              =  10,
	Armenian                                         =  11,
	Hebrew                                           =  12,
	Arabic                                           =  13,
	Syriac                                           =  14,
	Arabic_Supplement                                =  15,
	Thaana                                           =  16,
	NKo                                              =  17,
	Samaritan                                        =  18,
	Mandaic                                          =  19,
	Syriac_Supplement                                =  20,
	Arabic_Extended_A                                =  21,
	Devanagari                                       =  22,
	Bengali                                          =  23,
	Gurmukhi                                         =  24,
	Gujarati                                         =  25,
	Oriya                                            =  26,
	Tamil                                            =  27,
	Telugu                                           =  28,
	Kannada                                          =  29,
	Malayalam                                        =  30,
	Sinhala                                          =  31,
	Thai                                             =  32,
	Lao                                              =  33,
	Tibetan                                          =  34,
	Myanmar                                          =  35,
	Georgian                                         =  36,
	Hangul_Jamo                                      =  37,
	Ethiopic                                         =  38,
	Ethiopic_Supplement                              =  39,
	Cherokee                                         =  40,
	Unified_Canadian_Aboriginal_Syllabics            =  41,
	Ogham                                            =  42,
	Runic                                            =  43,
	Tagalog                                          =  44,
	Hanunoo                                          =  45,
	Buhid                                            =  46,
	Tagbanwa                                         =  47,
	Khmer                                            =  48,
	Mongolian                                        =  49,
	Unified_Canadian_Aboriginal_Syllabics_Extended   =  50,
	Limbu                                            =  51,
	Tai_Le                                           =  52,
	New_Tai_Lue                                      =  53,
	Khmer_Symbols                                    =  54,
	Buginese                                         =  55,
	Tai_Tham                                         =  56,
	Combining_Diacritical_Marks_Extended             =  57,
	Balinese                                         =  58,
	Sundanese                                        =  59,
	Batak                                            =  60,
	Lepcha                                           =  61,
	Ol_Chiki                                         =  62,
	Cyrillic_Extended_C                              =  63,
	Sundanese_Supplement                             =  64,
	Vedic_Extensions                                 =  65,
	Phonetic_Extensions                              =  66,
	Phonetic_Extensions_Supplement                   =  67,
	Combining_Diacritical_Marks_Supplement           =  68,
	Latin_Extended_Additional                        =  69,
	Greek_Extended                                   =  70,
	General_Punctuation                              =  71,
	Superscripts_and_Subscripts                      =  72,
	Currency_Symbols                                 =  73,
	Combining_Diacritical_Marks_for_Symbols          =  74,
	Letterlike_Symbols                               =  75,
	Number_Forms                                     =  76,
	Arrows                                           =  77,
	Mathematical_Operators                           =  78,
	Miscellaneous_Technical                          =  79,
	Control_Pictures                                 =  80,
	Optical_Character_Recognition                    =  81,
	Enclosed_Alphanumerics                           =  82,
	Box_Drawing                                      =  83,
	Block_Elements                                   =  84,
	Geometric_Shapes                                 =  85,
	Miscellaneous_Symbols                            =  86,
	Dingbats                                         =  87,
	Miscellaneous_Mathematical_Symbols_A             =  88,
	Supplemental_Arrows_A                            =  89,
	Braille_Patterns                                 =  90,
	Supplemental_Arrows_B                            =  91,
	Miscellaneous_Mathematical_Symbols_B             =  92,
	Supplemental_Mathematical_Operators              =  93,
	Miscellaneous_Symbols_and_Arrows                 =  94,
	Glagolitic                                       =  95,
	Latin_Extended_C                                 =  96,
	Coptic                                           =  97,
	Georgian_Supplement                              =  98,
	Tifinagh                                         =  99,
	Ethiopic_Extended                                = 100,
	Cyrillic_Extended_A                              = 101,
	Supplemental_Punctuation                         = 102,
	CJK_Radicals_Supplement                          = 103,
	Kangxi_Radicals                                  = 104,
	Ideographic_Description_Characters               = 105,
	CJK_Symbols_and_Punctuation                      = 106,
	Hiragana                                         = 107,
	Katakana                                         = 108,
	Bopomofo                                         = 109,
	Hangul_Compatibility_Jamo                        = 110,
	Kanbun                                           = 111,
	Bopomofo_Extended                                = 112,
	CJK_Strokes                                      = 113,
	Katakana_Phonetic_Extensions                     = 114,
	Enclosed_CJK_Letters_and_Months                  = 115,
	CJK_Compatibility                                = 116,
	CJK_Unified_Ideographs_Extension_A               = 117,
	Yijing_Hexagram_Symbols                          = 118,
	CJK_Unified_Ideographs                           = 119,
	Yi_Syllables                                     = 120,
	Yi_Radicals                                      = 121,
	Lisu                                             = 122,
	Vai                                              = 123,
	Cyrillic_Extended_B                              = 124,
	Bamum                                            = 125,
	Modifier_Tone_Letters                            = 126,
	Latin_Extended_D                                 = 127,
	Syloti_Nagri                                     = 128,
	Common_Indic_Number_Forms                        = 129,
	Phags_pa                                         = 130,
	Saurashtra                                       = 131,
	Devanagari_Extended                              = 132,
	Kayah_Li                                         = 133,
	Rejang                                           = 134,
	Hangul_Jamo_Extended_A                           = 135,
	Javanese                                         = 136,
	Myanmar_Extended_B                               = 137,
	Cham                                             = 138,
	Myanmar_Extended_A                               = 139,
	Tai_Viet                                         = 140,
	Meetei_Mayek_Extensions                          = 141,
	Ethiopic_Extended_A                              = 142,
	Latin_Extended_E                                 = 143,
	Cherokee_Supplement                              = 144,
	Meetei_Mayek                                     = 145,
	Hangul_Syllables                                 = 146,
	Hangul_Jamo_Extended_B                           = 147,
	High_Surrogates                                  = 148,
	High_Private_Use_Surrogates                      = 149,
	Low_Surrogates                                   = 150,
	Private_Use_Area                                 = 151,
	CJK_Compatibility_Ideographs                     = 152,
	Alphabetic_Presentation_Forms                    = 153,
	Arabic_Presentation_Forms_A                      = 154,
	Variation_Selectors                              = 155,
	Vertical_Forms                                   = 156,
	Combining_Half_Marks                             = 157,
	CJK_Compatibility_Forms                          = 158,
	Small_Form_Variants                              = 159,
	Arabic_Presentation_Forms_B                      = 160,
	Halfwidth_and_Fullwidth_Forms                    = 161,
	Specials                                         = 162,
	Linear_B_Syllabary                               = 163,
	Linear_B_Ideograms                               = 164,
	Aegean_Numbers                                   = 165,
	Ancient_Greek_Numbers                            = 166,
	Ancient_Symbols                                  = 167,
	Phaistos_Disc                                    = 168,
	Lycian                                           = 169,
	Carian                                           = 170,
	Coptic_Epact_Numbers                             = 171,
	Old_Italic                                       = 172,
	Gothic                                           = 173,
	Old_Permic                                       = 174,
	Ugaritic                                         = 175,
	Old_Persian                                      = 176,
	Deseret                                          = 177,
	Shavian                                          = 178,
	Osmanya                                          = 179,
	Osage                                            = 180,
	Elbasan                                          = 181,
	Caucasian_Albanian                               = 182,
	Linear_A                                         = 183,
	Cypriot_Syllabary                                = 184,
	Imperial_Aramaic                                 = 185,
	Palmyrene                                        = 186,
	Nabataean                                        = 187,
	Hatran                                           = 188,
	Phoenician                                       = 189,
	Lydian                                           = 190,
	Meroitic_Hieroglyphs                             = 191,
	Meroitic_Cursive                                 = 192,
	Kharoshthi                                       = 193,
	Old_South_Arabian                                = 194,
	Old_North_Arabian                                = 195,
	Manichaean                                       = 196,
	Avestan                                          = 197,
	Inscriptional_Parthian                           = 198,
	Inscriptional_Pahlavi                            = 199,
	Psalter_Pahlavi                                  = 200,
	Old_Turkic                                       = 201,
	Old_Hungarian                                    = 202,
	Rumi_Numeral_Symbols                             = 203,
	Brahmi                                           = 204,
	Kaithi                                           = 205,
	Sora_Sompeng                                     = 206,
	Chakma                                           = 207,
	Mahajani                                         = 208,
	Sharada                                          = 209,
	Sinhala_Archaic_Numbers                          = 210,
	Khojki                                           = 211,
	Multani                                          = 212,
	Khudawadi                                        = 213,
	Grantha                                          = 214,
	Newa                                             = 215,
	Tirhuta                                          = 216,
	Siddham                                          = 217,
	Modi                                             = 218,
	Mongolian_Supplement                             = 219,
	Takri                                            = 220,
	Ahom                                             = 221,
	Warang_Citi                                      = 222,
	Zanabazar_Square                                 = 223,
	Soyombo                                          = 224,
	Pau_Cin_Hau                                      = 225,
	Bhaiksuki                                        = 226,
	Marchen                                          = 227,
	Masaram_Gondi                                    = 228,
	Cuneiform                                        = 229,
	Cuneiform_Numbers_and_Punctuation                = 230,
	Early_Dynastic_Cuneiform                         = 231,
	Egyptian_Hieroglyphs                             = 232,
	Anatolian_Hieroglyphs                            = 233,
	Bamum_Supplement                                 = 234,
	Mro                                              = 235,
	Bassa_Vah                                        = 236,
	Pahawh_Hmong                                     = 237,
	Miao                                             = 238,
	Ideographic_Symbols_and_Punctuation              = 239,
	Tangut                                           = 240,
	Tangut_Components                                = 241,
	Kana_Supplement                                  = 242,
	Kana_Extended_A                                  = 243,
	Nushu                                            = 244,
	Duployan                                         = 245,
	Shorthand_Format_Controls                        = 246,
	Byzantine_Musical_Symbols                        = 247,
	Musical_Symbols                                  = 248,
	Ancient_Greek_Musical_Notation                   = 249,
	Tai_Xuan_Jing_Symbols                            = 250,
	Counting_Rod_Numerals                            = 251,
	Mathematical_Alphanumeric_Symbols                = 252,
	Sutton_SignWriting                               = 253,
	Glagolitic_Supplement                            = 254,
	Mende_Kikakui                                    = 255,
	Adlam                                            = 256,
	Arabic_Mathematical_Alphabetic_Symbols           = 257,
	Mahjong_Tiles                                    = 258,
	Domino_Tiles                                     = 259,
	Playing_Cards                                    = 260,
	Enclosed_Alphanumeric_Supplement                 = 261,
	Enclosed_Ideographic_Supplement                  = 262,
	Miscellaneous_Symbols_and_Pictographs            = 263,
	Emoticons                                        = 264,
	Ornamental_Dingbats                              = 265,
	Transport_and_Map_Symbols                        = 266,
	Alchemical_Symbols                               = 267,
	Geometric_Shapes_Extended                        = 268,
	Supplemental_Arrows_C                            = 269,
	Supplemental_Symbols_and_Pictographs             = 270,
	CJK_Unified_Ideographs_Extension_B               = 271,
	CJK_Unified_Ideographs_Extension_C               = 272,
	CJK_Unified_Ideographs_Extension_D               = 273,
	CJK_Unified_Ideographs_Extension_E               = 274,
	CJK_Unified_Ideographs_Extension_F               = 275,
	CJK_Compatibility_Ideographs_Supplement          = 276,
	Tags                                             = 277,
	Variation_Selectors_Supplement                   = 278,
	Supplementary_Private_Use_Area_A                 = 279,
	Supplementary_Private_Use_Area_B                 = 280
};

// Character Age
enum class agetype : std::uint_least8_t
{
	Unassigned   =   0,
	v1_1         =   1,
	v2_0         =   2,
	v2_1         =   3,
	v3_0         =   4,
	v3_1         =   5,
	v3_2         =   6,
	v4_0         =   7,
	v4_1         =   8,
	v5_0         =   9,
	v5_1         =  10,
	v5_2         =  11,
	v6_0         =  12,
	v6_1         =  13,
	v6_2         =  14,
	v6_3         =  15,
	v7_0         =  16,
	v8_0         =  17,
	v9_0         =  18,
	v10_0        =  19
};

// East Asian Width
enum class eawtype : std::uint_least8_t
{
	N    =   0,
	A    =   1,
	F    =   2,
	H    =   3,
	Na   =   4,
	W    =   5
};

// Property Enum Type
enum class property_enum
{
	invalid,
	ctype,
	ptype,
	gctype,
	sctype,
	blktype,
	agetype,
	eawtype
};

template <class T> constexpr property_enum to_property_enum_v = property_enum::invalid;
template <> constexpr property_enum to_property_enum_v<ctype> = property_enum::ctype;
template <> constexpr property_enum to_property_enum_v<ptype> = property_enum::ptype;
template <> constexpr property_enum to_property_enum_v<gctype> = property_enum::gctype;
template <> constexpr property_enum to_property_enum_v<sctype> = property_enum::sctype;
template <> constexpr property_enum to_property_enum_v<blktype> = property_enum::blktype;
template <> constexpr property_enum to_property_enum_v<agetype> = property_enum::agetype;
template <> constexpr property_enum to_property_enum_v<eawtype> = property_enum::eawtype;

template <class T> constexpr bool is_property_enum_v = to_property_enum_v<std::decay_t<T>> != property_enum::invalid;

// Unicode Character Database record
class record
{
	struct raw_record {
		std::uint_least64_t pflags;
		std::uint_least16_t cflags;
		std::uint_least16_t abfields;
		std::uint_least8_t gcindex;
		std::uint_least8_t scindex;
		std::uint_least8_t wfields;
		std::uint_least8_t cfindex;
		std::uint_least8_t clindex;
		std::uint_least8_t cuindex;
	} const* raw_;
	explicit record(raw_record const* r) noexcept : raw_(r) {}
	struct raw_record_table {
		std::array<std::uint_least16_t, 8704> stage1;
		std::array<std::uint_least16_t, 34176> stage2;
		std::array<raw_record, 1586> records;
	};
	static std::int_least32_t case_mapping(std::size_t index) noexcept;
	static std::unique_ptr<raw_record_table> decompress_table();
	friend record query(char32_t r);
public:
	ctype compatibility() const noexcept { return static_cast<ctype>(raw_->cflags); }
	ptype properties() const noexcept { return static_cast<ptype>(raw_->pflags); }
	gctype general_category() const noexcept { return static_cast<gctype>(UINT32_C(1) << raw_->gcindex); }
	sctype script() const noexcept { return static_cast<sctype>(raw_->scindex); }
	blktype block() const noexcept { return static_cast<blktype>(raw_->abfields & 0x3ff); }
	agetype age() const noexcept { return static_cast<agetype>(raw_->abfields >> 10); }
	eawtype eawidth() const noexcept { return static_cast<eawtype>(raw_->wfields & 0x0f); }
	int cwidth() const noexcept { return static_cast<int>(raw_->wfields >> 4) - 1; }
	std::int_least32_t casefold_mapping() const noexcept { return case_mapping(raw_->cfindex); }
	std::int_least32_t lowercase_mapping() const noexcept { return case_mapping(raw_->clindex); }
	std::int_least32_t uppercase_mapping() const noexcept { return case_mapping(raw_->cuindex); }
	bool all_of(ctype c) const noexcept { return (compatibility() & c) == c; }
	bool all_of(ptype p) const noexcept { return (properties() & p) == p; }
	bool all_of(gctype gc) const noexcept { return (general_category() & gc) == gc; }
	bool any_of(ctype c) const noexcept { return (compatibility() & c) != ctype::none; }
	bool any_of(ptype p) const noexcept { return (properties() & p) != ptype::None; }
	bool any_of(gctype gc) const noexcept { return (general_category() & gc) != gctype::None; }
	bool none_of(ctype c) const noexcept { return (compatibility() & c) == ctype::none; }
	bool none_of(ptype p) const noexcept { return (properties() & p) == ptype::None; }
	bool none_of(gctype gc) const noexcept { return (general_category() & gc) == gctype::None; }
};

// Retrieves the UCD record for the given codepoint
record query(char32_t r);

// Checks if the rune matches all of the string-packed property classes
bool all_of(record const& r, property_enum penum, std::string_view str);

// Checks if the rune matches any of the string-packed property classes
bool any_of(record const& r, property_enum penum, std::string_view str);

// Checks if the rune matches none of the string-packed property classes
bool none_of(record const& r, property_enum penum, std::string_view str);

// Column width (-1 = non-displayable, 0 = non-spacing, 1 = normal, 2 = wide)
inline int cwidth(char32_t r)
{
	return query(r).cwidth();
}

// Absolute column width
inline unsigned int ucwidth(char32_t r)
{
	auto const cw = query(r).cwidth();
	return static_cast<unsigned int>(cw >= 0 ? cw : -cw);
}

// Simple casefold conversion
inline char32_t tocasefold(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).casefold_mapping());
}

// Simple lowercase conversion
inline char32_t tolower(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).lowercase_mapping());
}

// Simple uppercase conversion
inline char32_t toupper(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).uppercase_mapping());
}

// Sparse character rune set
using rune_set = std::vector<std::pair<char32_t, char32_t>>;

inline void push_range(rune_set& runes, char32_t start, char32_t end)
{
	runes.emplace_back(start, end);
	std::push_heap(std::begin(runes), std::end(runes));
}

namespace detail
{

void push_uniform_casefolded_range(rune_set& runes, ptype props, char32_t start, char32_t end);

} // namespace detail

void push_casefolded_range(rune_set& runes, char32_t start, char32_t end);

rune_set sort_and_optimize(rune_set runes);

rune_set negate(rune_set const& runes);

namespace detail
{

std::string normalize_property_label(std::string_view id);

} // namespace detail

// Convert from text to ctype property
std::optional<ctype> stoctype(std::string_view s);

// Convert from text to ptype property
std::optional<ptype> stoptype(std::string_view s);

// Convert from text to gctype property
std::optional<gctype> stogctype(std::string_view s);

// Convert from text to sctype property
std::optional<sctype> stosctype(std::string_view s);

// Convert from text to blktype property
std::optional<blktype> stoblktype(std::string_view s);

// Convert from text to agetype property
std::optional<agetype> stoagetype(std::string_view s);

// Convert from text to eawtype property
std::optional<eawtype> stoeawtype(std::string_view s);

namespace detail
{

template <class InputIt, class OutputIt>
void run_length_decode(InputIt first, InputIt last, OutputIt dest)
{
	using value_type = typename std::iterator_traits<InputIt>::value_type;
	constexpr auto ilseqcode = (std::numeric_limits<value_type>::max)();
	constexpr auto seqmask = static_cast<value_type>(0x03ull << (std::numeric_limits<value_type>::digits - 2));
	while (first != last) {
		if (auto const lead = *first++; lead == ilseqcode) {
			auto const count = static_cast<std::size_t>(*first++);
			auto const head = *first++;
			auto const tail = *first++;
			for (std::size_t i = 0; i < count; ++i) {
				if ((head & seqmask) == seqmask) {
					dest = ::std::fill_n(dest, static_cast<std::size_t>(head & ~seqmask) + 1, tail);
				} else {
					*dest++ = head;
					*dest++ = tail;
				}
			}
		} else if ((lead & seqmask) == seqmask) {
			dest = ::std::fill_n(dest, static_cast<std::size_t>(lead & ~seqmask) + 1, *first++);
		} else {
			*dest++ = lead;
		}
	}
}

} // namespace detail

// Checks if the rune matches all of the string-packed property classes
std::string to_string(property_enum penum, std::string_view str);

} // namespace lug::unicode
