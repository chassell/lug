// lug - Embedded DSL for PE grammar parser combinators in C++
// Copyright (c) 2017 Jesse W. Towner
// See LICENSE.md file for license details

// This header file is generated by the makeunicode tool program.
// Do not modify this file by hand. Instead, modify and run the
// tool to regenerate this file.

#ifndef LUG_UNICODE_HPP__
#define LUG_UNICODE_HPP__

#include <lug/detail.hpp>
#include <cctype>
#include <cstddef>
#include <cstdint>
#include <array>
#include <memory>
#include <optional>
#include <utility>

namespace lug::unicode
{

// POSIX compatibility properties
enum class ctype : std::uint_least16_t
{
	is_bitfield_enum,
	alpha    = UINT16_C(1) <<  0,
	lower    = UINT16_C(1) <<  1,
	upper    = UINT16_C(1) <<  2,
	punct    = UINT16_C(1) <<  3,
	digit    = UINT16_C(1) <<  4,
	xdigit   = UINT16_C(1) <<  5,
	alnum    = UINT16_C(1) <<  6,
	space    = UINT16_C(1) <<  7,
	blank    = UINT16_C(1) <<  8,
	cntrl    = UINT16_C(1) <<  9,
	graph    = UINT16_C(1) << 10,
	print    = UINT16_C(1) << 11,
	word     = UINT16_C(1) << 12,
	none     = 0
};

// Binary properties
enum class ptype : std::uint_least64_t
{
	is_bitfield_enum,
	Any                                  = UINT64_C(1) <<  0,
	Ascii                                = UINT64_C(1) <<  1,
	Assigned                             = UINT64_C(1) <<  2,
	Line_Ending                          = UINT64_C(1) <<  3,
	White_Space                          = UINT64_C(1) <<  4,
	Bidi_Control                         = UINT64_C(1) <<  5,
	Join_Control                         = UINT64_C(1) <<  6,
	Dash                                 = UINT64_C(1) <<  7,
	Quotation_Mark                       = UINT64_C(1) <<  8,
	Terminal_Punctuation                 = UINT64_C(1) <<  9,
	Other_Math                           = UINT64_C(1) << 10,
	Hex_Digit                            = UINT64_C(1) << 11,
	ASCII_Hex_Digit                      = UINT64_C(1) << 12,
	Other_Alphabetic                     = UINT64_C(1) << 13,
	Ideographic                          = UINT64_C(1) << 14,
	Diacritic                            = UINT64_C(1) << 15,
	Extender                             = UINT64_C(1) << 16,
	Other_Lowercase                      = UINT64_C(1) << 17,
	Other_Uppercase                      = UINT64_C(1) << 18,
	Noncharacter_Code_Point              = UINT64_C(1) << 19,
	Other_Grapheme_Extend                = UINT64_C(1) << 20,
	IDS_Binary_Operator                  = UINT64_C(1) << 21,
	IDS_Ternary_Operator                 = UINT64_C(1) << 22,
	Radical                              = UINT64_C(1) << 23,
	Unified_Ideograph                    = UINT64_C(1) << 24,
	Other_Default_Ignorable_Code_Point   = UINT64_C(1) << 25,
	Soft_Dotted                          = UINT64_C(1) << 26,
	Logical_Order_Exception              = UINT64_C(1) << 27,
	Other_ID_Start                       = UINT64_C(1) << 28,
	Other_ID_Continue                    = UINT64_C(1) << 29,
	Sentence_Terminal                    = UINT64_C(1) << 30,
	Variation_Selector                   = UINT64_C(1) << 31,
	Pattern_White_Space                  = UINT64_C(1) << 32,
	Pattern_Syntax                       = UINT64_C(1) << 33,
	Prepended_Concatenation_Mark         = UINT64_C(1) << 34,
	Regional_Indicator                   = UINT64_C(1) << 35,
	Lowercase                            = UINT64_C(1) << 36,
	Uppercase                            = UINT64_C(1) << 37,
	Cased                                = UINT64_C(1) << 38,
	Case_Ignorable                       = UINT64_C(1) << 39,
	Changes_When_Lowercased              = UINT64_C(1) << 40,
	Changes_When_Uppercased              = UINT64_C(1) << 41,
	Changes_When_Titlecased              = UINT64_C(1) << 42,
	Changes_When_Casefolded              = UINT64_C(1) << 43,
	Changes_When_Casemapped              = UINT64_C(1) << 44,
	Alphabetic                           = UINT64_C(1) << 45,
	Default_Ignorable_Code_Point         = UINT64_C(1) << 46,
	Grapheme_Base                        = UINT64_C(1) << 47,
	Grapheme_Extend                      = UINT64_C(1) << 48,
	Math                                 = UINT64_C(1) << 49,
	ID_Start                             = UINT64_C(1) << 50,
	ID_Continue                          = UINT64_C(1) << 51,
	XID_Start                            = UINT64_C(1) << 52,
	XID_Continue                         = UINT64_C(1) << 53,
	None                                 = 0
};

// General categories
enum class gctype : std::uint_least32_t
{
	is_bitfield_enum,
	Ll = UINT32_C(1) <<  0,    Lowercase_Letter = Ll,
	Lm = UINT32_C(1) <<  1,    Modifier_Letter = Lm,
	Lo = UINT32_C(1) <<  2,    Other_Letter = Lo,
	Lt = UINT32_C(1) <<  3,    Titlecase_Letter = Lt,
	Lu = UINT32_C(1) <<  4,    Uppercase_Letter = Lu,
	Mc = UINT32_C(1) <<  5,    Spacing_Mark = Mc,
	Me = UINT32_C(1) <<  6,    Enclosing_Mark = Me,
	Mn = UINT32_C(1) <<  7,    Nonspacing_Mark = Mn,
	Nd = UINT32_C(1) <<  8,    Decimal_Number = Nd,
	Nl = UINT32_C(1) <<  9,    Letter_Number = Nl,
	No = UINT32_C(1) << 10,    Other_Number = No,
	Pc = UINT32_C(1) << 11,    Connector_Punctuation = Pc,
	Pd = UINT32_C(1) << 12,    Dash_Punctuation = Pd,
	Pe = UINT32_C(1) << 13,    Close_Punctuation = Pe,
	Pf = UINT32_C(1) << 14,    Final_Punctuation = Pf,
	Pi = UINT32_C(1) << 15,    Initial_Punctuation = Pi,
	Po = UINT32_C(1) << 16,    Other_Punctuation = Po,
	Ps = UINT32_C(1) << 17,    Open_Punctuation = Ps,
	Sc = UINT32_C(1) << 18,    Currency_Symbol = Sc,
	Sk = UINT32_C(1) << 19,    Modifier_Symbol = Sk,
	Sm = UINT32_C(1) << 20,    Mathematical_Symbol = Sm,
	So = UINT32_C(1) << 21,    Other_Symbol = So,
	Zl = UINT32_C(1) << 22,    Line_Separator = Zl,
	Zp = UINT32_C(1) << 23,    Paragraph_Separator = Zp,
	Zs = UINT32_C(1) << 24,    Space_Separator = Zs,
	Cc = UINT32_C(1) << 25,    Control = Cc,
	Cf = UINT32_C(1) << 26,    Format = Cf,
	Cn = UINT32_C(1) << 27,    Unassigned = Cn,
	Co = UINT32_C(1) << 28,    Private_Use = Co,
	Cs = UINT32_C(1) << 29,    Surrogate = Cs,
	C  = Cc|Cf|Cn|Co|Cs,       Other = C,
	L  = Lu|Ll|Lt|Lm|Lo,       Letter = L,
	LC = Lu|Ll|Lt,             Cased_Letter = LC,
	M  = Mc|Me|Mn,             Mark = M,
	N  = Nd|Nl|No,             Number = N,
	P  = Pc|Pd|Pe|Pf|Pi|Po|Ps, Punctuation = P,
	S  = Sc|Sm|Sk|So,          Symbol = S,
	Z  = Zl|Zp|Zs,             Separator = Z,
	None = 0
};

// Scripts
enum class sctype : std::uint_least8_t
{
	Unknown                  =   0,
	Common                   =   1,
	Inherited                =   2,
	Arabic                   =   3,
	Armenian                 =   4,
	Bengali                  =   5,
	Bopomofo                 =   6,
	Braille                  =   7,
	Buginese                 =   8,
	Buhid                    =   9,
	Canadian_Aboriginal      =  10,
	Cherokee                 =  11,
	Coptic                   =  12,
	Cypriot                  =  13,
	Cyrillic                 =  14,
	Deseret                  =  15,
	Devanagari               =  16,
	Ethiopic                 =  17,
	Georgian                 =  18,
	Glagolitic               =  19,
	Gothic                   =  20,
	Greek                    =  21,
	Gujarati                 =  22,
	Gurmukhi                 =  23,
	Han                      =  24,
	Hangul                   =  25,
	Hanunoo                  =  26,
	Hebrew                   =  27,
	Hiragana                 =  28,
	Kannada                  =  29,
	Katakana                 =  30,
	Kharoshthi               =  31,
	Khmer                    =  32,
	Lao                      =  33,
	Latin                    =  34,
	Limbu                    =  35,
	Linear_B                 =  36,
	Malayalam                =  37,
	Mongolian                =  38,
	Myanmar                  =  39,
	New_Tai_Lue              =  40,
	Ogham                    =  41,
	Old_Italic               =  42,
	Old_Persian              =  43,
	Oriya                    =  44,
	Osmanya                  =  45,
	Runic                    =  46,
	Shavian                  =  47,
	Sinhala                  =  48,
	Syloti_Nagri             =  49,
	Syriac                   =  50,
	Tagalog                  =  51,
	Tagbanwa                 =  52,
	Tai_Le                   =  53,
	Tamil                    =  54,
	Telugu                   =  55,
	Thaana                   =  56,
	Thai                     =  57,
	Tibetan                  =  58,
	Tifinagh                 =  59,
	Ugaritic                 =  60,
	Yi                       =  61,
	Balinese                 =  62,
	Cuneiform                =  63,
	Nko                      =  64,
	Phags_Pa                 =  65,
	Phoenician               =  66,
	Carian                   =  67,
	Cham                     =  68,
	Kayah_Li                 =  69,
	Lepcha                   =  70,
	Lycian                   =  71,
	Lydian                   =  72,
	Ol_Chiki                 =  73,
	Rejang                   =  74,
	Saurashtra               =  75,
	Sundanese                =  76,
	Vai                      =  77,
	Avestan                  =  78,
	Bamum                    =  79,
	Egyptian_Hieroglyphs     =  80,
	Imperial_Aramaic         =  81,
	Inscriptional_Pahlavi    =  82,
	Inscriptional_Parthian   =  83,
	Javanese                 =  84,
	Kaithi                   =  85,
	Lisu                     =  86,
	Meetei_Mayek             =  87,
	Old_South_Arabian        =  88,
	Old_Turkic               =  89,
	Samaritan                =  90,
	Tai_Tham                 =  91,
	Tai_Viet                 =  92,
	Batak                    =  93,
	Brahmi                   =  94,
	Mandaic                  =  95,
	Chakma                   =  96,
	Meroitic_Cursive         =  97,
	Meroitic_Hieroglyphs     =  98,
	Miao                     =  99,
	Sharada                  = 100,
	Sora_Sompeng             = 101,
	Takri                    = 102,
	Bassa_Vah                = 103,
	Caucasian_Albanian       = 104,
	Duployan                 = 105,
	Elbasan                  = 106,
	Grantha                  = 107,
	Khojki                   = 108,
	Khudawadi                = 109,
	Linear_A                 = 110,
	Mahajani                 = 111,
	Manichaean               = 112,
	Mende_Kikakui            = 113,
	Modi                     = 114,
	Mro                      = 115,
	Nabataean                = 116,
	Old_North_Arabian        = 117,
	Old_Permic               = 118,
	Pahawh_Hmong             = 119,
	Palmyrene                = 120,
	Psalter_Pahlavi          = 121,
	Pau_Cin_Hau              = 122,
	Siddham                  = 123,
	Tirhuta                  = 124,
	Warang_Citi              = 125,
	Ahom                     = 126,
	Anatolian_Hieroglyphs    = 127,
	Hatran                   = 128,
	Multani                  = 129,
	Old_Hungarian            = 130,
	SignWriting              = 131,
	Adlam                    = 132,
	Bhaiksuki                = 133,
	Marchen                  = 134,
	Newa                     = 135,
	Osage                    = 136,
	Tangut                   = 137,
	Masaram_Gondi            = 138,
	Nushu                    = 139,
	Soyombo                  = 140,
	Zanabazar_Square         = 141
};

// Blocks
enum class blktype : std::uint_least16_t
{
	No_block                                         =   0,
	Basic_Latin                                      =   1,
	Latin_1_Supplement                               =   2,
	Latin_Extended_A                                 =   3,
	Latin_Extended_B                                 =   4,
	IPA_Extensions                                   =   5,
	Spacing_Modifier_Letters                         =   6,
	Combining_Diacritical_Marks                      =   7,
	Greek_and_Coptic                                 =   8,
	Cyrillic                                         =   9,
	Cyrillic_Supplement                              =  10,
	Armenian                                         =  11,
	Hebrew                                           =  12,
	Arabic                                           =  13,
	Syriac                                           =  14,
	Arabic_Supplement                                =  15,
	Thaana                                           =  16,
	NKo                                              =  17,
	Samaritan                                        =  18,
	Mandaic                                          =  19,
	Syriac_Supplement                                =  20,
	Arabic_Extended_A                                =  21,
	Devanagari                                       =  22,
	Bengali                                          =  23,
	Gurmukhi                                         =  24,
	Gujarati                                         =  25,
	Oriya                                            =  26,
	Tamil                                            =  27,
	Telugu                                           =  28,
	Kannada                                          =  29,
	Malayalam                                        =  30,
	Sinhala                                          =  31,
	Thai                                             =  32,
	Lao                                              =  33,
	Tibetan                                          =  34,
	Myanmar                                          =  35,
	Georgian                                         =  36,
	Hangul_Jamo                                      =  37,
	Ethiopic                                         =  38,
	Ethiopic_Supplement                              =  39,
	Cherokee                                         =  40,
	Unified_Canadian_Aboriginal_Syllabics            =  41,
	Ogham                                            =  42,
	Runic                                            =  43,
	Tagalog                                          =  44,
	Hanunoo                                          =  45,
	Buhid                                            =  46,
	Tagbanwa                                         =  47,
	Khmer                                            =  48,
	Mongolian                                        =  49,
	Unified_Canadian_Aboriginal_Syllabics_Extended   =  50,
	Limbu                                            =  51,
	Tai_Le                                           =  52,
	New_Tai_Lue                                      =  53,
	Khmer_Symbols                                    =  54,
	Buginese                                         =  55,
	Tai_Tham                                         =  56,
	Combining_Diacritical_Marks_Extended             =  57,
	Balinese                                         =  58,
	Sundanese                                        =  59,
	Batak                                            =  60,
	Lepcha                                           =  61,
	Ol_Chiki                                         =  62,
	Cyrillic_Extended_C                              =  63,
	Sundanese_Supplement                             =  64,
	Vedic_Extensions                                 =  65,
	Phonetic_Extensions                              =  66,
	Phonetic_Extensions_Supplement                   =  67,
	Combining_Diacritical_Marks_Supplement           =  68,
	Latin_Extended_Additional                        =  69,
	Greek_Extended                                   =  70,
	General_Punctuation                              =  71,
	Superscripts_and_Subscripts                      =  72,
	Currency_Symbols                                 =  73,
	Combining_Diacritical_Marks_for_Symbols          =  74,
	Letterlike_Symbols                               =  75,
	Number_Forms                                     =  76,
	Arrows                                           =  77,
	Mathematical_Operators                           =  78,
	Miscellaneous_Technical                          =  79,
	Control_Pictures                                 =  80,
	Optical_Character_Recognition                    =  81,
	Enclosed_Alphanumerics                           =  82,
	Box_Drawing                                      =  83,
	Block_Elements                                   =  84,
	Geometric_Shapes                                 =  85,
	Miscellaneous_Symbols                            =  86,
	Dingbats                                         =  87,
	Miscellaneous_Mathematical_Symbols_A             =  88,
	Supplemental_Arrows_A                            =  89,
	Braille_Patterns                                 =  90,
	Supplemental_Arrows_B                            =  91,
	Miscellaneous_Mathematical_Symbols_B             =  92,
	Supplemental_Mathematical_Operators              =  93,
	Miscellaneous_Symbols_and_Arrows                 =  94,
	Glagolitic                                       =  95,
	Latin_Extended_C                                 =  96,
	Coptic                                           =  97,
	Georgian_Supplement                              =  98,
	Tifinagh                                         =  99,
	Ethiopic_Extended                                = 100,
	Cyrillic_Extended_A                              = 101,
	Supplemental_Punctuation                         = 102,
	CJK_Radicals_Supplement                          = 103,
	Kangxi_Radicals                                  = 104,
	Ideographic_Description_Characters               = 105,
	CJK_Symbols_and_Punctuation                      = 106,
	Hiragana                                         = 107,
	Katakana                                         = 108,
	Bopomofo                                         = 109,
	Hangul_Compatibility_Jamo                        = 110,
	Kanbun                                           = 111,
	Bopomofo_Extended                                = 112,
	CJK_Strokes                                      = 113,
	Katakana_Phonetic_Extensions                     = 114,
	Enclosed_CJK_Letters_and_Months                  = 115,
	CJK_Compatibility                                = 116,
	CJK_Unified_Ideographs_Extension_A               = 117,
	Yijing_Hexagram_Symbols                          = 118,
	CJK_Unified_Ideographs                           = 119,
	Yi_Syllables                                     = 120,
	Yi_Radicals                                      = 121,
	Lisu                                             = 122,
	Vai                                              = 123,
	Cyrillic_Extended_B                              = 124,
	Bamum                                            = 125,
	Modifier_Tone_Letters                            = 126,
	Latin_Extended_D                                 = 127,
	Syloti_Nagri                                     = 128,
	Common_Indic_Number_Forms                        = 129,
	Phags_pa                                         = 130,
	Saurashtra                                       = 131,
	Devanagari_Extended                              = 132,
	Kayah_Li                                         = 133,
	Rejang                                           = 134,
	Hangul_Jamo_Extended_A                           = 135,
	Javanese                                         = 136,
	Myanmar_Extended_B                               = 137,
	Cham                                             = 138,
	Myanmar_Extended_A                               = 139,
	Tai_Viet                                         = 140,
	Meetei_Mayek_Extensions                          = 141,
	Ethiopic_Extended_A                              = 142,
	Latin_Extended_E                                 = 143,
	Cherokee_Supplement                              = 144,
	Meetei_Mayek                                     = 145,
	Hangul_Syllables                                 = 146,
	Hangul_Jamo_Extended_B                           = 147,
	High_Surrogates                                  = 148,
	High_Private_Use_Surrogates                      = 149,
	Low_Surrogates                                   = 150,
	Private_Use_Area                                 = 151,
	CJK_Compatibility_Ideographs                     = 152,
	Alphabetic_Presentation_Forms                    = 153,
	Arabic_Presentation_Forms_A                      = 154,
	Variation_Selectors                              = 155,
	Vertical_Forms                                   = 156,
	Combining_Half_Marks                             = 157,
	CJK_Compatibility_Forms                          = 158,
	Small_Form_Variants                              = 159,
	Arabic_Presentation_Forms_B                      = 160,
	Halfwidth_and_Fullwidth_Forms                    = 161,
	Specials                                         = 162,
	Linear_B_Syllabary                               = 163,
	Linear_B_Ideograms                               = 164,
	Aegean_Numbers                                   = 165,
	Ancient_Greek_Numbers                            = 166,
	Ancient_Symbols                                  = 167,
	Phaistos_Disc                                    = 168,
	Lycian                                           = 169,
	Carian                                           = 170,
	Coptic_Epact_Numbers                             = 171,
	Old_Italic                                       = 172,
	Gothic                                           = 173,
	Old_Permic                                       = 174,
	Ugaritic                                         = 175,
	Old_Persian                                      = 176,
	Deseret                                          = 177,
	Shavian                                          = 178,
	Osmanya                                          = 179,
	Osage                                            = 180,
	Elbasan                                          = 181,
	Caucasian_Albanian                               = 182,
	Linear_A                                         = 183,
	Cypriot_Syllabary                                = 184,
	Imperial_Aramaic                                 = 185,
	Palmyrene                                        = 186,
	Nabataean                                        = 187,
	Hatran                                           = 188,
	Phoenician                                       = 189,
	Lydian                                           = 190,
	Meroitic_Hieroglyphs                             = 191,
	Meroitic_Cursive                                 = 192,
	Kharoshthi                                       = 193,
	Old_South_Arabian                                = 194,
	Old_North_Arabian                                = 195,
	Manichaean                                       = 196,
	Avestan                                          = 197,
	Inscriptional_Parthian                           = 198,
	Inscriptional_Pahlavi                            = 199,
	Psalter_Pahlavi                                  = 200,
	Old_Turkic                                       = 201,
	Old_Hungarian                                    = 202,
	Rumi_Numeral_Symbols                             = 203,
	Brahmi                                           = 204,
	Kaithi                                           = 205,
	Sora_Sompeng                                     = 206,
	Chakma                                           = 207,
	Mahajani                                         = 208,
	Sharada                                          = 209,
	Sinhala_Archaic_Numbers                          = 210,
	Khojki                                           = 211,
	Multani                                          = 212,
	Khudawadi                                        = 213,
	Grantha                                          = 214,
	Newa                                             = 215,
	Tirhuta                                          = 216,
	Siddham                                          = 217,
	Modi                                             = 218,
	Mongolian_Supplement                             = 219,
	Takri                                            = 220,
	Ahom                                             = 221,
	Warang_Citi                                      = 222,
	Zanabazar_Square                                 = 223,
	Soyombo                                          = 224,
	Pau_Cin_Hau                                      = 225,
	Bhaiksuki                                        = 226,
	Marchen                                          = 227,
	Masaram_Gondi                                    = 228,
	Cuneiform                                        = 229,
	Cuneiform_Numbers_and_Punctuation                = 230,
	Early_Dynastic_Cuneiform                         = 231,
	Egyptian_Hieroglyphs                             = 232,
	Anatolian_Hieroglyphs                            = 233,
	Bamum_Supplement                                 = 234,
	Mro                                              = 235,
	Bassa_Vah                                        = 236,
	Pahawh_Hmong                                     = 237,
	Miao                                             = 238,
	Ideographic_Symbols_and_Punctuation              = 239,
	Tangut                                           = 240,
	Tangut_Components                                = 241,
	Kana_Supplement                                  = 242,
	Kana_Extended_A                                  = 243,
	Nushu                                            = 244,
	Duployan                                         = 245,
	Shorthand_Format_Controls                        = 246,
	Byzantine_Musical_Symbols                        = 247,
	Musical_Symbols                                  = 248,
	Ancient_Greek_Musical_Notation                   = 249,
	Tai_Xuan_Jing_Symbols                            = 250,
	Counting_Rod_Numerals                            = 251,
	Mathematical_Alphanumeric_Symbols                = 252,
	Sutton_SignWriting                               = 253,
	Glagolitic_Supplement                            = 254,
	Mende_Kikakui                                    = 255,
	Adlam                                            = 256,
	Arabic_Mathematical_Alphabetic_Symbols           = 257,
	Mahjong_Tiles                                    = 258,
	Domino_Tiles                                     = 259,
	Playing_Cards                                    = 260,
	Enclosed_Alphanumeric_Supplement                 = 261,
	Enclosed_Ideographic_Supplement                  = 262,
	Miscellaneous_Symbols_and_Pictographs            = 263,
	Emoticons                                        = 264,
	Ornamental_Dingbats                              = 265,
	Transport_and_Map_Symbols                        = 266,
	Alchemical_Symbols                               = 267,
	Geometric_Shapes_Extended                        = 268,
	Supplemental_Arrows_C                            = 269,
	Supplemental_Symbols_and_Pictographs             = 270,
	CJK_Unified_Ideographs_Extension_B               = 271,
	CJK_Unified_Ideographs_Extension_C               = 272,
	CJK_Unified_Ideographs_Extension_D               = 273,
	CJK_Unified_Ideographs_Extension_E               = 274,
	CJK_Unified_Ideographs_Extension_F               = 275,
	CJK_Compatibility_Ideographs_Supplement          = 276,
	Tags                                             = 277,
	Variation_Selectors_Supplement                   = 278,
	Supplementary_Private_Use_Area_A                 = 279,
	Supplementary_Private_Use_Area_B                 = 280
};

// Character Age
enum class agetype : std::uint_least8_t
{
	Unassigned   =   0,
	v1_1         =   1,
	v2_0         =   2,
	v2_1         =   3,
	v3_0         =   4,
	v3_1         =   5,
	v3_2         =   6,
	v4_0         =   7,
	v4_1         =   8,
	v5_0         =   9,
	v5_1         =  10,
	v5_2         =  11,
	v6_0         =  12,
	v6_1         =  13,
	v6_2         =  14,
	v6_3         =  15,
	v7_0         =  16,
	v8_0         =  17,
	v9_0         =  18,
	v10_0        =  19
};

// East Asian Width
enum class eawtype : std::uint_least8_t
{
	N    =   0,
	A    =   1,
	F    =   2,
	H    =   3,
	Na   =   4,
	W    =   5
};

// Unicode Character Database (UCD) record
class record
{
	struct raw_record {
		std::uint_least64_t pflags;
		std::uint_least16_t cflags;
		std::uint_least16_t abfields;
		std::uint_least8_t gcindex;
		std::uint_least8_t scindex;
		std::uint_least8_t wfields;
		std::uint_least8_t cfindex;
		std::uint_least8_t clindex;
		std::uint_least8_t cuindex;
	} const* raw_;
	explicit record(raw_record const* r) noexcept : raw_(r) {}
	struct raw_record_table {
		std::array<std::uint_least16_t, 8704> stage1;
		std::array<std::uint_least16_t, 34176> stage2;
		std::array<raw_record, 1579> records;
	};
	static std::int_least32_t case_mapping(std::size_t index) noexcept;
	static std::unique_ptr<raw_record_table> decompress_table();
	friend record query(char32_t r);
public:
	ctype compatibility() const noexcept { return static_cast<ctype>(raw_->cflags); }
	ptype properties() const noexcept { return static_cast<ptype>(raw_->pflags); }
	gctype general_category() const noexcept { return static_cast<gctype>(UINT32_C(1) << raw_->gcindex); }
	sctype script() const noexcept { return static_cast<sctype>(raw_->scindex); }
	blktype block() const noexcept { return static_cast<blktype>(raw_->abfields & 0x3ff); }
	agetype age() const noexcept { return static_cast<agetype>(raw_->abfields >> 10); }
	eawtype eawidth() const noexcept { return static_cast<eawtype>(raw_->wfields & 0x0f); }
	int cwidth() const noexcept { return static_cast<int>(raw_->wfields >> 4) - 1; }
	bool any_of(ctype c) const noexcept { return (compatibility() & c) != ctype::none; }
	bool any_of(ptype p) const noexcept { return (properties() & p) != ptype::None; }
	bool any_of(gctype gc) const noexcept { return (general_category() & gc) != gctype::None; }
	std::int_least32_t casefold_mapping() const noexcept { return case_mapping(raw_->cfindex); }
	std::int_least32_t lowercase_mapping() const noexcept { return case_mapping(raw_->clindex); }
	std::int_least32_t uppercase_mapping() const noexcept { return case_mapping(raw_->cuindex); }
};

// Retrieves the UCD record for the given Unicode codepoint
inline record query(char32_t r)
{
	static auto const table = record::decompress_table();
	std::size_t index = 145;
	if (r < 0x110000) {
		index = table->stage1[r >> 7];
		index = table->stage2[(index << 7) | (r & 0x7f)];
	}
	return record{table->records.data() + index};
}

// Simple casefold conversion
inline char32_t tocasefold(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).casefold_mapping());
}

// Simple lowercase conversion
inline char32_t tolower(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).lowercase_mapping());
}

// Simple uppercase conversion
inline char32_t toupper(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).uppercase_mapping());
}

// Sparse character rune set
using rune_set = std::vector<std::pair<char32_t, char32_t>>;

inline void push_range(rune_set& runes, char32_t start, char32_t end)
{
	runes.emplace_back(start, end);
	std::push_heap(std::begin(runes), std::end(runes));
}

namespace detail
{

inline void push_uniform_casefolded_range(rune_set& runes, ptype props, char32_t start, char32_t end)
{
	if ((props & ptype::Cased) != ptype::None) {
		push_range(runes, tolower(start), tolower(end));
		push_range(runes, toupper(start), toupper(end));
	} else {
		push_range(runes, start, end);
	}
}

} // namespace detail

inline void push_casefolded_range(rune_set& runes, char32_t start, char32_t end)
{
	ptype p = query(start).properties();
	char32_t r1 = start, r2 = start;
	for (char32_t rn = start + 1; rn <= end; r2 = rn, ++rn) {
		ptype q = query(start).properties();
		if (((p ^ q) & ptype::Cased) != ptype::None) {
			detail::push_uniform_casefolded_range(runes, p, r1, r2);
			r1 = rn;
			p = q;
		}
	}
	detail::push_uniform_casefolded_range(runes, p, r1, r2);
}

inline rune_set sort_and_optimize(rune_set runes)
{
	rune_set optimized_runes;
	auto out = optimized_runes.end();
	std::sort_heap(std::begin(runes), std::end(runes));
	for (auto next = std::cbegin(runes), last = std::cend(runes); next != last; ++next) {
		if (out == optimized_runes.end() || next->first < out->first || out->second < next->first)
			out = optimized_runes.insert(optimized_runes.end(), *next);
		else
			out->second = out->second < next->second ? next->second : out->second;
	}
	optimized_runes.shrink_to_fit();
	return optimized_runes;
}

namespace detail
{

inline std::string normalize_property_label(std::string_view id)
{
	std::string normid;
	for (char c : id)
		if (c != ' ' && c != '\t' && c != '_' && c != '-')
			normid.push_back(static_cast<char>(std::tolower(c)));
	return normid;
}

} // namespace detail

// Convert from text to ctype property
inline std::optional<ctype> stoctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using ct = ctype;

	static constexpr std::array<std::pair<std::string_view, ctype>, 13> labels =
	{ {
		{ "alnum"sv, ct::alnum }, { "alpha"sv, ct::alpha }, { "blank"sv, ct::blank }, { "cntrl"sv, ct::cntrl },
		{ "digit"sv, ct::digit }, { "graph"sv, ct::graph }, { "lower"sv, ct::lower }, { "print"sv, ct::print },
		{ "punct"sv, ct::punct }, { "space"sv, ct::space }, { "upper"sv, ct::upper }, { "word"sv, ct::word },
		{ "xdigit"sv, ct::xdigit }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ctype>{static_cast<ctype>(c->second)} : std::nullopt;
}

// Convert from text to ptype property
inline std::optional<ptype> stoptype(std::string_view s)
{
	using namespace std::string_view_literals;
	using pt = ptype;

	static constexpr std::array<std::pair<std::string_view, ptype>, 54> labels =
	{ {
		{ "alphabetic"sv, pt::Alphabetic }, { "any"sv, pt::Any }, { "ascii"sv, pt::Ascii },
		{ "asciihexdigit"sv, pt::ASCII_Hex_Digit }, { "assigned"sv, pt::Assigned }, { "bidicontrol"sv, pt::Bidi_Control },
		{ "cased"sv, pt::Cased }, { "caseignorable"sv, pt::Case_Ignorable },
		{ "changeswhencasefolded"sv, pt::Changes_When_Casefolded }, { "changeswhencasemapped"sv, pt::Changes_When_Casemapped },
		{ "changeswhenlowercased"sv, pt::Changes_When_Lowercased }, { "changeswhentitlecased"sv, pt::Changes_When_Titlecased },
		{ "changeswhenuppercased"sv, pt::Changes_When_Uppercased }, { "dash"sv, pt::Dash },
		{ "defaultignorablecodepoint"sv, pt::Default_Ignorable_Code_Point }, { "diacritic"sv, pt::Diacritic },
		{ "extender"sv, pt::Extender }, { "graphemebase"sv, pt::Grapheme_Base }, { "graphemeextend"sv, pt::Grapheme_Extend },
		{ "hexdigit"sv, pt::Hex_Digit }, { "idcontinue"sv, pt::ID_Continue }, { "ideographic"sv, pt::Ideographic },
		{ "idsbinaryoperator"sv, pt::IDS_Binary_Operator }, { "idstart"sv, pt::ID_Start },
		{ "idsternaryoperator"sv, pt::IDS_Ternary_Operator }, { "joincontrol"sv, pt::Join_Control },
		{ "lineending"sv, pt::Line_Ending }, { "logicalorderexception"sv, pt::Logical_Order_Exception },
		{ "lowercase"sv, pt::Lowercase }, { "math"sv, pt::Math }, { "noncharactercodepoint"sv, pt::Noncharacter_Code_Point },
		{ "otheralphabetic"sv, pt::Other_Alphabetic },
		{ "otherdefaultignorablecodepoint"sv, pt::Other_Default_Ignorable_Code_Point },
		{ "othergraphemeextend"sv, pt::Other_Grapheme_Extend }, { "otheridcontinue"sv, pt::Other_ID_Continue },
		{ "otheridstart"sv, pt::Other_ID_Start }, { "otherlowercase"sv, pt::Other_Lowercase }, { "othermath"sv, pt::Other_Math },
		{ "otheruppercase"sv, pt::Other_Uppercase }, { "patternsyntax"sv, pt::Pattern_Syntax },
		{ "patternwhitespace"sv, pt::Pattern_White_Space }, { "prependedconcatenationmark"sv, pt::Prepended_Concatenation_Mark },
		{ "quotationmark"sv, pt::Quotation_Mark }, { "radical"sv, pt::Radical },
		{ "regionalindicator"sv, pt::Regional_Indicator }, { "sentenceterminal"sv, pt::Sentence_Terminal },
		{ "softdotted"sv, pt::Soft_Dotted }, { "terminalpunctuation"sv, pt::Terminal_Punctuation },
		{ "unifiedideograph"sv, pt::Unified_Ideograph }, { "uppercase"sv, pt::Uppercase },
		{ "variationselector"sv, pt::Variation_Selector }, { "whitespace"sv, pt::White_Space },
		{ "xidcontinue"sv, pt::XID_Continue }, { "xidstart"sv, pt::XID_Start }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ptype>{static_cast<ptype>(c->second)} : std::nullopt;
}

// Convert from text to gctype property
inline std::optional<gctype> stogctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using gc = gctype;

	static constexpr std::array<std::pair<std::string_view, gctype>, 60> labels =
	{ {
		{ "cc"sv, gc::Cc }, { "cf"sv, gc::Cf }, { "closepunctuation"sv, gc::Pe }, { "cn"sv, gc::Cn }, { "co"sv, gc::Co },
		{ "connectorpunctuation"sv, gc::Pc }, { "control"sv, gc::Cc }, { "cs"sv, gc::Cs }, { "currencysymbol"sv, gc::Sc },
		{ "dashpunctuation"sv, gc::Pd }, { "decimalnumber"sv, gc::Nd }, { "enclosingmark"sv, gc::Me },
		{ "finalpunctuation"sv, gc::Pf }, { "format"sv, gc::Cf }, { "initialpunctuation"sv, gc::Pi },
		{ "letternumber"sv, gc::Nl }, { "lineseparator"sv, gc::Zl }, { "ll"sv, gc::Ll }, { "lm"sv, gc::Lm }, { "lo"sv, gc::Lo },
		{ "lowercaseletter"sv, gc::Ll }, { "lt"sv, gc::Lt }, { "lu"sv, gc::Lu }, { "mathematicalsymbol"sv, gc::Sm },
		{ "mc"sv, gc::Mc }, { "me"sv, gc::Me }, { "mn"sv, gc::Mn }, { "modifierletter"sv, gc::Lm },
		{ "modifiersymbol"sv, gc::Sk }, { "nd"sv, gc::Nd }, { "nl"sv, gc::Nl }, { "no"sv, gc::No },
		{ "nonspacingmark"sv, gc::Mn }, { "openpunctuation"sv, gc::Ps }, { "otherletter"sv, gc::Lo },
		{ "othernumber"sv, gc::No }, { "otherpunctuation"sv, gc::Po }, { "othersymbol"sv, gc::So },
		{ "paragraphseparator"sv, gc::Zp }, { "pc"sv, gc::Pc }, { "pd"sv, gc::Pd }, { "pe"sv, gc::Pe }, { "pf"sv, gc::Pf },
		{ "pi"sv, gc::Pi }, { "po"sv, gc::Po }, { "privateuse"sv, gc::Co }, { "ps"sv, gc::Ps }, { "sc"sv, gc::Sc },
		{ "sk"sv, gc::Sk }, { "sm"sv, gc::Sm }, { "so"sv, gc::So }, { "spaceseparator"sv, gc::Zs }, { "spacingmark"sv, gc::Mc },
		{ "surrogate"sv, gc::Cs }, { "titlecaseletter"sv, gc::Lt }, { "unassigned"sv, gc::Cn }, { "uppercaseletter"sv, gc::Lu },
		{ "zl"sv, gc::Zl }, { "zp"sv, gc::Zp }, { "zs"sv, gc::Zs }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<gctype>{static_cast<gctype>(c->second)} : std::nullopt;
}

// Convert from text to sctype property
inline std::optional<sctype> stosctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using sc = sctype;

	static constexpr std::array<std::pair<std::string_view, sctype>, 142> labels =
	{ {
		{ "adlam"sv, sc::Adlam }, { "ahom"sv, sc::Ahom }, { "anatolianhieroglyphs"sv, sc::Anatolian_Hieroglyphs },
		{ "arabic"sv, sc::Arabic }, { "armenian"sv, sc::Armenian }, { "avestan"sv, sc::Avestan }, { "balinese"sv, sc::Balinese },
		{ "bamum"sv, sc::Bamum }, { "bassavah"sv, sc::Bassa_Vah }, { "batak"sv, sc::Batak }, { "bengali"sv, sc::Bengali },
		{ "bhaiksuki"sv, sc::Bhaiksuki }, { "bopomofo"sv, sc::Bopomofo }, { "brahmi"sv, sc::Brahmi },
		{ "braille"sv, sc::Braille }, { "buginese"sv, sc::Buginese }, { "buhid"sv, sc::Buhid },
		{ "canadianaboriginal"sv, sc::Canadian_Aboriginal }, { "carian"sv, sc::Carian },
		{ "caucasianalbanian"sv, sc::Caucasian_Albanian }, { "chakma"sv, sc::Chakma }, { "cham"sv, sc::Cham },
		{ "cherokee"sv, sc::Cherokee }, { "common"sv, sc::Common }, { "coptic"sv, sc::Coptic }, { "cuneiform"sv, sc::Cuneiform },
		{ "cypriot"sv, sc::Cypriot }, { "cyrillic"sv, sc::Cyrillic }, { "deseret"sv, sc::Deseret },
		{ "devanagari"sv, sc::Devanagari }, { "duployan"sv, sc::Duployan },
		{ "egyptianhieroglyphs"sv, sc::Egyptian_Hieroglyphs }, { "elbasan"sv, sc::Elbasan }, { "ethiopic"sv, sc::Ethiopic },
		{ "georgian"sv, sc::Georgian }, { "glagolitic"sv, sc::Glagolitic }, { "gothic"sv, sc::Gothic },
		{ "grantha"sv, sc::Grantha }, { "greek"sv, sc::Greek }, { "gujarati"sv, sc::Gujarati }, { "gurmukhi"sv, sc::Gurmukhi },
		{ "han"sv, sc::Han }, { "hangul"sv, sc::Hangul }, { "hanunoo"sv, sc::Hanunoo }, { "hatran"sv, sc::Hatran },
		{ "hebrew"sv, sc::Hebrew }, { "hiragana"sv, sc::Hiragana }, { "imperialaramaic"sv, sc::Imperial_Aramaic },
		{ "inherited"sv, sc::Inherited }, { "inscriptionalpahlavi"sv, sc::Inscriptional_Pahlavi },
		{ "inscriptionalparthian"sv, sc::Inscriptional_Parthian }, { "javanese"sv, sc::Javanese }, { "kaithi"sv, sc::Kaithi },
		{ "kannada"sv, sc::Kannada }, { "katakana"sv, sc::Katakana }, { "kayahli"sv, sc::Kayah_Li },
		{ "kharoshthi"sv, sc::Kharoshthi }, { "khmer"sv, sc::Khmer }, { "khojki"sv, sc::Khojki },
		{ "khudawadi"sv, sc::Khudawadi }, { "lao"sv, sc::Lao }, { "latin"sv, sc::Latin }, { "lepcha"sv, sc::Lepcha },
		{ "limbu"sv, sc::Limbu }, { "lineara"sv, sc::Linear_A }, { "linearb"sv, sc::Linear_B }, { "lisu"sv, sc::Lisu },
		{ "lycian"sv, sc::Lycian }, { "lydian"sv, sc::Lydian }, { "mahajani"sv, sc::Mahajani }, { "malayalam"sv, sc::Malayalam },
		{ "mandaic"sv, sc::Mandaic }, { "manichaean"sv, sc::Manichaean }, { "marchen"sv, sc::Marchen },
		{ "masaramgondi"sv, sc::Masaram_Gondi }, { "meeteimayek"sv, sc::Meetei_Mayek }, { "mendekikakui"sv, sc::Mende_Kikakui },
		{ "meroiticcursive"sv, sc::Meroitic_Cursive }, { "meroitichieroglyphs"sv, sc::Meroitic_Hieroglyphs },
		{ "miao"sv, sc::Miao }, { "modi"sv, sc::Modi }, { "mongolian"sv, sc::Mongolian }, { "mro"sv, sc::Mro },
		{ "multani"sv, sc::Multani }, { "myanmar"sv, sc::Myanmar }, { "nabataean"sv, sc::Nabataean }, { "newa"sv, sc::Newa },
		{ "newtailue"sv, sc::New_Tai_Lue }, { "nko"sv, sc::Nko }, { "nushu"sv, sc::Nushu }, { "ogham"sv, sc::Ogham },
		{ "olchiki"sv, sc::Ol_Chiki }, { "oldhungarian"sv, sc::Old_Hungarian }, { "olditalic"sv, sc::Old_Italic },
		{ "oldnortharabian"sv, sc::Old_North_Arabian }, { "oldpermic"sv, sc::Old_Permic }, { "oldpersian"sv, sc::Old_Persian },
		{ "oldsoutharabian"sv, sc::Old_South_Arabian }, { "oldturkic"sv, sc::Old_Turkic }, { "oriya"sv, sc::Oriya },
		{ "osage"sv, sc::Osage }, { "osmanya"sv, sc::Osmanya }, { "pahawhhmong"sv, sc::Pahawh_Hmong },
		{ "palmyrene"sv, sc::Palmyrene }, { "paucinhau"sv, sc::Pau_Cin_Hau }, { "phagspa"sv, sc::Phags_Pa },
		{ "phoenician"sv, sc::Phoenician }, { "psalterpahlavi"sv, sc::Psalter_Pahlavi }, { "rejang"sv, sc::Rejang },
		{ "runic"sv, sc::Runic }, { "samaritan"sv, sc::Samaritan }, { "saurashtra"sv, sc::Saurashtra },
		{ "sharada"sv, sc::Sharada }, { "shavian"sv, sc::Shavian }, { "siddham"sv, sc::Siddham },
		{ "signwriting"sv, sc::SignWriting }, { "sinhala"sv, sc::Sinhala }, { "sorasompeng"sv, sc::Sora_Sompeng },
		{ "soyombo"sv, sc::Soyombo }, { "sundanese"sv, sc::Sundanese }, { "sylotinagri"sv, sc::Syloti_Nagri },
		{ "syriac"sv, sc::Syriac }, { "tagalog"sv, sc::Tagalog }, { "tagbanwa"sv, sc::Tagbanwa }, { "taile"sv, sc::Tai_Le },
		{ "taitham"sv, sc::Tai_Tham }, { "taiviet"sv, sc::Tai_Viet }, { "takri"sv, sc::Takri }, { "tamil"sv, sc::Tamil },
		{ "tangut"sv, sc::Tangut }, { "telugu"sv, sc::Telugu }, { "thaana"sv, sc::Thaana }, { "thai"sv, sc::Thai },
		{ "tibetan"sv, sc::Tibetan }, { "tifinagh"sv, sc::Tifinagh }, { "tirhuta"sv, sc::Tirhuta },
		{ "ugaritic"sv, sc::Ugaritic }, { "unknown"sv, sc::Unknown }, { "vai"sv, sc::Vai }, { "warangciti"sv, sc::Warang_Citi },
		{ "yi"sv, sc::Yi }, { "zanabazarsquare"sv, sc::Zanabazar_Square }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<sctype>{static_cast<sctype>(c->second)} : std::nullopt;
}

// Convert from text to blktype property
inline std::optional<blktype> stoblktype(std::string_view s)
{
	using namespace std::string_view_literals;
	using blk = blktype;

	static constexpr std::array<std::pair<std::string_view, blktype>, 281> labels =
	{ {
		{ "adlam"sv, blk::Adlam }, { "aegeannumbers"sv, blk::Aegean_Numbers }, { "ahom"sv, blk::Ahom },
		{ "alchemicalsymbols"sv, blk::Alchemical_Symbols }, { "alphabeticpresentationforms"sv, blk::Alphabetic_Presentation_Forms },
		{ "anatolianhieroglyphs"sv, blk::Anatolian_Hieroglyphs }, { "ancientgreekmusicalnotation"sv, blk::Ancient_Greek_Musical_Notation },
		{ "ancientgreeknumbers"sv, blk::Ancient_Greek_Numbers }, { "ancientsymbols"sv, blk::Ancient_Symbols }, { "arabic"sv, blk::Arabic },
		{ "arabicextendeda"sv, blk::Arabic_Extended_A }, { "arabicmathematicalalphabeticsymbols"sv, blk::Arabic_Mathematical_Alphabetic_Symbols },
		{ "arabicpresentationformsa"sv, blk::Arabic_Presentation_Forms_A }, { "arabicpresentationformsb"sv, blk::Arabic_Presentation_Forms_B },
		{ "arabicsupplement"sv, blk::Arabic_Supplement }, { "armenian"sv, blk::Armenian }, { "arrows"sv, blk::Arrows },
		{ "avestan"sv, blk::Avestan }, { "balinese"sv, blk::Balinese }, { "bamum"sv, blk::Bamum }, { "bamumsupplement"sv, blk::Bamum_Supplement },
		{ "basiclatin"sv, blk::Basic_Latin }, { "bassavah"sv, blk::Bassa_Vah }, { "batak"sv, blk::Batak }, { "bengali"sv, blk::Bengali },
		{ "bhaiksuki"sv, blk::Bhaiksuki }, { "blockelements"sv, blk::Block_Elements }, { "bopomofo"sv, blk::Bopomofo },
		{ "bopomofoextended"sv, blk::Bopomofo_Extended }, { "boxdrawing"sv, blk::Box_Drawing }, { "brahmi"sv, blk::Brahmi },
		{ "braillepatterns"sv, blk::Braille_Patterns }, { "buginese"sv, blk::Buginese }, { "buhid"sv, blk::Buhid },
		{ "byzantinemusicalsymbols"sv, blk::Byzantine_Musical_Symbols }, { "carian"sv, blk::Carian },
		{ "caucasianalbanian"sv, blk::Caucasian_Albanian }, { "chakma"sv, blk::Chakma }, { "cham"sv, blk::Cham }, { "cherokee"sv, blk::Cherokee },
		{ "cherokeesupplement"sv, blk::Cherokee_Supplement }, { "cjkcompatibility"sv, blk::CJK_Compatibility },
		{ "cjkcompatibilityforms"sv, blk::CJK_Compatibility_Forms }, { "cjkcompatibilityideographs"sv, blk::CJK_Compatibility_Ideographs },
		{ "cjkcompatibilityideographssupplement"sv, blk::CJK_Compatibility_Ideographs_Supplement },
		{ "cjkradicalssupplement"sv, blk::CJK_Radicals_Supplement }, { "cjkstrokes"sv, blk::CJK_Strokes },
		{ "cjksymbolsandpunctuation"sv, blk::CJK_Symbols_and_Punctuation }, { "cjkunifiedideographs"sv, blk::CJK_Unified_Ideographs },
		{ "cjkunifiedideographsextensiona"sv, blk::CJK_Unified_Ideographs_Extension_A },
		{ "cjkunifiedideographsextensionb"sv, blk::CJK_Unified_Ideographs_Extension_B },
		{ "cjkunifiedideographsextensionc"sv, blk::CJK_Unified_Ideographs_Extension_C },
		{ "cjkunifiedideographsextensiond"sv, blk::CJK_Unified_Ideographs_Extension_D },
		{ "cjkunifiedideographsextensione"sv, blk::CJK_Unified_Ideographs_Extension_E },
		{ "cjkunifiedideographsextensionf"sv, blk::CJK_Unified_Ideographs_Extension_F },
		{ "combiningdiacriticalmarks"sv, blk::Combining_Diacritical_Marks },
		{ "combiningdiacriticalmarksextended"sv, blk::Combining_Diacritical_Marks_Extended },
		{ "combiningdiacriticalmarksforsymbols"sv, blk::Combining_Diacritical_Marks_for_Symbols },
		{ "combiningdiacriticalmarkssupplement"sv, blk::Combining_Diacritical_Marks_Supplement },
		{ "combininghalfmarks"sv, blk::Combining_Half_Marks }, { "commonindicnumberforms"sv, blk::Common_Indic_Number_Forms },
		{ "controlpictures"sv, blk::Control_Pictures }, { "coptic"sv, blk::Coptic }, { "copticepactnumbers"sv, blk::Coptic_Epact_Numbers },
		{ "countingrodnumerals"sv, blk::Counting_Rod_Numerals }, { "cuneiform"sv, blk::Cuneiform },
		{ "cuneiformnumbersandpunctuation"sv, blk::Cuneiform_Numbers_and_Punctuation }, { "currencysymbols"sv, blk::Currency_Symbols },
		{ "cypriotsyllabary"sv, blk::Cypriot_Syllabary }, { "cyrillic"sv, blk::Cyrillic }, { "cyrillicextendeda"sv, blk::Cyrillic_Extended_A },
		{ "cyrillicextendedb"sv, blk::Cyrillic_Extended_B }, { "cyrillicextendedc"sv, blk::Cyrillic_Extended_C },
		{ "cyrillicsupplement"sv, blk::Cyrillic_Supplement }, { "deseret"sv, blk::Deseret }, { "devanagari"sv, blk::Devanagari },
		{ "devanagariextended"sv, blk::Devanagari_Extended }, { "dingbats"sv, blk::Dingbats }, { "dominotiles"sv, blk::Domino_Tiles },
		{ "duployan"sv, blk::Duployan }, { "earlydynasticcuneiform"sv, blk::Early_Dynastic_Cuneiform },
		{ "egyptianhieroglyphs"sv, blk::Egyptian_Hieroglyphs }, { "elbasan"sv, blk::Elbasan }, { "emoticons"sv, blk::Emoticons },
		{ "enclosedalphanumerics"sv, blk::Enclosed_Alphanumerics }, { "enclosedalphanumericsupplement"sv, blk::Enclosed_Alphanumeric_Supplement },
		{ "enclosedcjklettersandmonths"sv, blk::Enclosed_CJK_Letters_and_Months },
		{ "enclosedideographicsupplement"sv, blk::Enclosed_Ideographic_Supplement }, { "ethiopic"sv, blk::Ethiopic },
		{ "ethiopicextended"sv, blk::Ethiopic_Extended }, { "ethiopicextendeda"sv, blk::Ethiopic_Extended_A },
		{ "ethiopicsupplement"sv, blk::Ethiopic_Supplement }, { "generalpunctuation"sv, blk::General_Punctuation },
		{ "geometricshapes"sv, blk::Geometric_Shapes }, { "geometricshapesextended"sv, blk::Geometric_Shapes_Extended },
		{ "georgian"sv, blk::Georgian }, { "georgiansupplement"sv, blk::Georgian_Supplement }, { "glagolitic"sv, blk::Glagolitic },
		{ "glagoliticsupplement"sv, blk::Glagolitic_Supplement }, { "gothic"sv, blk::Gothic }, { "grantha"sv, blk::Grantha },
		{ "greekandcoptic"sv, blk::Greek_and_Coptic }, { "greekextended"sv, blk::Greek_Extended }, { "gujarati"sv, blk::Gujarati },
		{ "gurmukhi"sv, blk::Gurmukhi }, { "halfwidthandfullwidthforms"sv, blk::Halfwidth_and_Fullwidth_Forms },
		{ "hangulcompatibilityjamo"sv, blk::Hangul_Compatibility_Jamo }, { "hanguljamo"sv, blk::Hangul_Jamo },
		{ "hanguljamoextendeda"sv, blk::Hangul_Jamo_Extended_A }, { "hanguljamoextendedb"sv, blk::Hangul_Jamo_Extended_B },
		{ "hangulsyllables"sv, blk::Hangul_Syllables }, { "hanunoo"sv, blk::Hanunoo }, { "hatran"sv, blk::Hatran }, { "hebrew"sv, blk::Hebrew },
		{ "highprivateusesurrogates"sv, blk::High_Private_Use_Surrogates }, { "highsurrogates"sv, blk::High_Surrogates },
		{ "hiragana"sv, blk::Hiragana }, { "ideographicdescriptioncharacters"sv, blk::Ideographic_Description_Characters },
		{ "ideographicsymbolsandpunctuation"sv, blk::Ideographic_Symbols_and_Punctuation }, { "imperialaramaic"sv, blk::Imperial_Aramaic },
		{ "inscriptionalpahlavi"sv, blk::Inscriptional_Pahlavi }, { "inscriptionalparthian"sv, blk::Inscriptional_Parthian },
		{ "ipaextensions"sv, blk::IPA_Extensions }, { "javanese"sv, blk::Javanese }, { "kaithi"sv, blk::Kaithi },
		{ "kanaextendeda"sv, blk::Kana_Extended_A }, { "kanasupplement"sv, blk::Kana_Supplement }, { "kanbun"sv, blk::Kanbun },
		{ "kangxiradicals"sv, blk::Kangxi_Radicals }, { "kannada"sv, blk::Kannada }, { "katakana"sv, blk::Katakana },
		{ "katakanaphoneticextensions"sv, blk::Katakana_Phonetic_Extensions }, { "kayahli"sv, blk::Kayah_Li }, { "kharoshthi"sv, blk::Kharoshthi },
		{ "khmer"sv, blk::Khmer }, { "khmersymbols"sv, blk::Khmer_Symbols }, { "khojki"sv, blk::Khojki }, { "khudawadi"sv, blk::Khudawadi },
		{ "lao"sv, blk::Lao }, { "latin1supplement"sv, blk::Latin_1_Supplement }, { "latinextendeda"sv, blk::Latin_Extended_A },
		{ "latinextendedadditional"sv, blk::Latin_Extended_Additional }, { "latinextendedb"sv, blk::Latin_Extended_B },
		{ "latinextendedc"sv, blk::Latin_Extended_C }, { "latinextendedd"sv, blk::Latin_Extended_D },
		{ "latinextendede"sv, blk::Latin_Extended_E }, { "lepcha"sv, blk::Lepcha }, { "letterlikesymbols"sv, blk::Letterlike_Symbols },
		{ "limbu"sv, blk::Limbu }, { "lineara"sv, blk::Linear_A }, { "linearbideograms"sv, blk::Linear_B_Ideograms },
		{ "linearbsyllabary"sv, blk::Linear_B_Syllabary }, { "lisu"sv, blk::Lisu }, { "lowsurrogates"sv, blk::Low_Surrogates },
		{ "lycian"sv, blk::Lycian }, { "lydian"sv, blk::Lydian }, { "mahajani"sv, blk::Mahajani }, { "mahjongtiles"sv, blk::Mahjong_Tiles },
		{ "malayalam"sv, blk::Malayalam }, { "mandaic"sv, blk::Mandaic }, { "manichaean"sv, blk::Manichaean }, { "marchen"sv, blk::Marchen },
		{ "masaramgondi"sv, blk::Masaram_Gondi }, { "mathematicalalphanumericsymbols"sv, blk::Mathematical_Alphanumeric_Symbols },
		{ "mathematicaloperators"sv, blk::Mathematical_Operators }, { "meeteimayek"sv, blk::Meetei_Mayek },
		{ "meeteimayekextensions"sv, blk::Meetei_Mayek_Extensions }, { "mendekikakui"sv, blk::Mende_Kikakui },
		{ "meroiticcursive"sv, blk::Meroitic_Cursive }, { "meroitichieroglyphs"sv, blk::Meroitic_Hieroglyphs }, { "miao"sv, blk::Miao },
		{ "miscellaneousmathematicalsymbolsa"sv, blk::Miscellaneous_Mathematical_Symbols_A },
		{ "miscellaneousmathematicalsymbolsb"sv, blk::Miscellaneous_Mathematical_Symbols_B },
		{ "miscellaneoussymbols"sv, blk::Miscellaneous_Symbols }, { "miscellaneoussymbolsandarrows"sv, blk::Miscellaneous_Symbols_and_Arrows },
		{ "miscellaneoussymbolsandpictographs"sv, blk::Miscellaneous_Symbols_and_Pictographs },
		{ "miscellaneoustechnical"sv, blk::Miscellaneous_Technical }, { "modi"sv, blk::Modi },
		{ "modifiertoneletters"sv, blk::Modifier_Tone_Letters }, { "mongolian"sv, blk::Mongolian },
		{ "mongoliansupplement"sv, blk::Mongolian_Supplement }, { "mro"sv, blk::Mro }, { "multani"sv, blk::Multani },
		{ "musicalsymbols"sv, blk::Musical_Symbols }, { "myanmar"sv, blk::Myanmar }, { "myanmarextendeda"sv, blk::Myanmar_Extended_A },
		{ "myanmarextendedb"sv, blk::Myanmar_Extended_B }, { "nabataean"sv, blk::Nabataean }, { "newa"sv, blk::Newa },
		{ "newtailue"sv, blk::New_Tai_Lue }, { "nko"sv, blk::NKo }, { "noblock"sv, blk::No_block }, { "numberforms"sv, blk::Number_Forms },
		{ "nushu"sv, blk::Nushu }, { "ogham"sv, blk::Ogham }, { "olchiki"sv, blk::Ol_Chiki }, { "oldhungarian"sv, blk::Old_Hungarian },
		{ "olditalic"sv, blk::Old_Italic }, { "oldnortharabian"sv, blk::Old_North_Arabian }, { "oldpermic"sv, blk::Old_Permic },
		{ "oldpersian"sv, blk::Old_Persian }, { "oldsoutharabian"sv, blk::Old_South_Arabian }, { "oldturkic"sv, blk::Old_Turkic },
		{ "opticalcharacterrecognition"sv, blk::Optical_Character_Recognition }, { "oriya"sv, blk::Oriya },
		{ "ornamentaldingbats"sv, blk::Ornamental_Dingbats }, { "osage"sv, blk::Osage }, { "osmanya"sv, blk::Osmanya },
		{ "pahawhhmong"sv, blk::Pahawh_Hmong }, { "palmyrene"sv, blk::Palmyrene }, { "paucinhau"sv, blk::Pau_Cin_Hau },
		{ "phagspa"sv, blk::Phags_pa }, { "phaistosdisc"sv, blk::Phaistos_Disc }, { "phoenician"sv, blk::Phoenician },
		{ "phoneticextensions"sv, blk::Phonetic_Extensions }, { "phoneticextensionssupplement"sv, blk::Phonetic_Extensions_Supplement },
		{ "playingcards"sv, blk::Playing_Cards }, { "privateusearea"sv, blk::Private_Use_Area }, { "psalterpahlavi"sv, blk::Psalter_Pahlavi },
		{ "rejang"sv, blk::Rejang }, { "ruminumeralsymbols"sv, blk::Rumi_Numeral_Symbols }, { "runic"sv, blk::Runic },
		{ "samaritan"sv, blk::Samaritan }, { "saurashtra"sv, blk::Saurashtra }, { "sharada"sv, blk::Sharada }, { "shavian"sv, blk::Shavian },
		{ "shorthandformatcontrols"sv, blk::Shorthand_Format_Controls }, { "siddham"sv, blk::Siddham }, { "sinhala"sv, blk::Sinhala },
		{ "sinhalaarchaicnumbers"sv, blk::Sinhala_Archaic_Numbers }, { "smallformvariants"sv, blk::Small_Form_Variants },
		{ "sorasompeng"sv, blk::Sora_Sompeng }, { "soyombo"sv, blk::Soyombo }, { "spacingmodifierletters"sv, blk::Spacing_Modifier_Letters },
		{ "specials"sv, blk::Specials }, { "sundanese"sv, blk::Sundanese }, { "sundanesesupplement"sv, blk::Sundanese_Supplement },
		{ "superscriptsandsubscripts"sv, blk::Superscripts_and_Subscripts }, { "supplementalarrowsa"sv, blk::Supplemental_Arrows_A },
		{ "supplementalarrowsb"sv, blk::Supplemental_Arrows_B }, { "supplementalarrowsc"sv, blk::Supplemental_Arrows_C },
		{ "supplementalmathematicaloperators"sv, blk::Supplemental_Mathematical_Operators },
		{ "supplementalpunctuation"sv, blk::Supplemental_Punctuation },
		{ "supplementalsymbolsandpictographs"sv, blk::Supplemental_Symbols_and_Pictographs },
		{ "supplementaryprivateuseareaa"sv, blk::Supplementary_Private_Use_Area_A },
		{ "supplementaryprivateuseareab"sv, blk::Supplementary_Private_Use_Area_B }, { "suttonsignwriting"sv, blk::Sutton_SignWriting },
		{ "sylotinagri"sv, blk::Syloti_Nagri }, { "syriac"sv, blk::Syriac }, { "syriacsupplement"sv, blk::Syriac_Supplement },
		{ "tagalog"sv, blk::Tagalog }, { "tagbanwa"sv, blk::Tagbanwa }, { "tags"sv, blk::Tags }, { "taile"sv, blk::Tai_Le },
		{ "taitham"sv, blk::Tai_Tham }, { "taiviet"sv, blk::Tai_Viet }, { "taixuanjingsymbols"sv, blk::Tai_Xuan_Jing_Symbols },
		{ "takri"sv, blk::Takri }, { "tamil"sv, blk::Tamil }, { "tangut"sv, blk::Tangut }, { "tangutcomponents"sv, blk::Tangut_Components },
		{ "telugu"sv, blk::Telugu }, { "thaana"sv, blk::Thaana }, { "thai"sv, blk::Thai }, { "tibetan"sv, blk::Tibetan },
		{ "tifinagh"sv, blk::Tifinagh }, { "tirhuta"sv, blk::Tirhuta }, { "transportandmapsymbols"sv, blk::Transport_and_Map_Symbols },
		{ "ugaritic"sv, blk::Ugaritic }, { "unifiedcanadianaboriginalsyllabics"sv, blk::Unified_Canadian_Aboriginal_Syllabics },
		{ "unifiedcanadianaboriginalsyllabicsextended"sv, blk::Unified_Canadian_Aboriginal_Syllabics_Extended }, { "vai"sv, blk::Vai },
		{ "variationselectors"sv, blk::Variation_Selectors }, { "variationselectorssupplement"sv, blk::Variation_Selectors_Supplement },
		{ "vedicextensions"sv, blk::Vedic_Extensions }, { "verticalforms"sv, blk::Vertical_Forms }, { "warangciti"sv, blk::Warang_Citi },
		{ "yijinghexagramsymbols"sv, blk::Yijing_Hexagram_Symbols }, { "yiradicals"sv, blk::Yi_Radicals }, { "yisyllables"sv, blk::Yi_Syllables },
		{ "zanabazarsquare"sv, blk::Zanabazar_Square }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<blktype>{static_cast<blktype>(c->second)} : std::nullopt;
}

// Convert from text to agetype property
inline std::optional<agetype> stoagetype(std::string_view s)
{
	using namespace std::string_view_literals;
	using at = agetype;

	static constexpr std::array<std::pair<std::string_view, agetype>, 20> labels =
	{ {
		{ "100"sv, at::v10_0 }, { "11"sv, at::v1_1 }, { "20"sv, at::v2_0 }, { "21"sv, at::v2_1 }, { "30"sv, at::v3_0 },
		{ "31"sv, at::v3_1 }, { "32"sv, at::v3_2 }, { "40"sv, at::v4_0 }, { "41"sv, at::v4_1 }, { "50"sv, at::v5_0 },
		{ "51"sv, at::v5_1 }, { "52"sv, at::v5_2 }, { "60"sv, at::v6_0 }, { "61"sv, at::v6_1 }, { "62"sv, at::v6_2 },
		{ "63"sv, at::v6_3 }, { "70"sv, at::v7_0 }, { "80"sv, at::v8_0 }, { "90"sv, at::v9_0 },
		{ "unassigned"sv, at::Unassigned }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<agetype>{static_cast<agetype>(c->second)} : std::nullopt;
}

// Convert from text to eawtype property
inline std::optional<eawtype> stoeawtype(std::string_view s)
{
	using namespace std::string_view_literals;
	using eaw = eawtype;

	static constexpr std::array<std::pair<std::string_view, eawtype>, 6> labels =
	{ {
		{ "a"sv, eaw::A }, { "f"sv, eaw::F }, { "h"sv, eaw::H }, { "n"sv, eaw::N }, { "na"sv, eaw::Na }, { "w"sv, eaw::W }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<eawtype>{static_cast<eawtype>(c->second)} : std::nullopt;
}

namespace detail
{

template <class InputIt, class OutputIt>
void run_length_decode(InputIt first, InputIt last, OutputIt dest)
{
	using value_type = typename std::iterator_traits<InputIt>::value_type;
	constexpr auto ilseqcode = (std::numeric_limits<value_type>::max)();
	constexpr auto seqmask = static_cast<value_type>(0x03ull << (std::numeric_limits<value_type>::digits - 2));
	while (first != last) {
		if (auto const lead = *first++; lead == ilseqcode) {
			auto const count = static_cast<std::size_t>(*first++);
			auto const head = *first++;
			auto const tail = *first++;
			for (std::size_t i = 0; i < count; ++i) {
				if ((head & seqmask) == seqmask) {
					dest = ::std::fill_n(dest, static_cast<std::size_t>(head & ~seqmask) + 1, tail);
				} else {
					*dest++ = head;
					*dest++ = tail;
				}
			}
		} else if ((lead & seqmask) == seqmask) {
			dest = ::std::fill_n(dest, static_cast<std::size_t>(lead & ~seqmask) + 1, *first++);
		} else {
			*dest++ = lead;
		}
	}
}

} // namespace detail

inline std::int_least32_t record::case_mapping(std::size_t index) noexcept
{
	static constexpr std::array<std::int_least32_t, 178> casemappings =
	{
		0, 32, -32, 775, 743, 7615, 121, 1, -1, -121, -268, -300, 195, 210, 206, 205, 79, 202, 203, 207, 97, 211, 209, 163, 213,
		130, 214, 218, 217, 219, 56, 2, -2, -79, -97, -56, -130, 10795, -163, 10792, 10815, -195, 69, 71, 10783, 10780, 10782, -210,
		-206, -205, -202, -203, 42319, 42315, -207, 42280, 42308, -209, -211, 10743, 42305, 10749, -213, -214, 10727, -218, 42282,
		-69, -217, -71, -219, 42261, 42258, 116, 84, 38, 37, 64, 63, -38, -37, -31, -64, -63, 8, -30, -62, -25, -57, -15, -47, -22,
		-54, -8, -86, -48, -80, 7, -116, -60, -96, -7, 80, 15, 48, 7264, 38864, -6222, -6254, -6221, -6253, -6212, -6244, -6210,
		-6242, -6211, -6243, -6204, -6236, -6180, -6181, 35267, 35266, 35332, 3814, -58, -59, -7615, 74, 86, 100, 128, 112, 126,
		-74, -9, -7173, -7205, -100, -112, -128, -126, -7517, -8383, -8262, 28, -28, 16, -16, 26, -26, -10743, -3814, -10727, -10795,
		-10792, -10780, -10749, -10783, -10782, -10815, -7264, -35332, -42280, -42308, -42319, -42315, -42305, -42258, -42282, -42261,
		928, -928, -38864, 40, -40, 34, -34
	};

	return casemappings[index];
}

inline std::unique_ptr<record::raw_record_table> record::decompress_table()
{
	using detail::run_length_decode;
	using lug::detail::make_member_accessor;

	static constexpr std::array<std::uint_least16_t, 384> rlestage1 =
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
		33, 34, 35, 36, 37, 38, 39, 40, 49154, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 49153, 78, 79, 80, 49153, 79, 81, 82, 83, 84, 85, 86, 87,
		88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 49202, 99, 100, 49314, 101, 102, 103, 49159, 104, 105, 49153, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 49238, 119, 120, 49167, 121, 49201, 122, 49153, 123, 124, 125, 126, 127,
		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 140, 49153, 147, 148, 140,
		149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 49153, 140, 159, 49154, 140, 160, 161, 162, 163, 164, 165, 166, 140, 167,
		168, 140, 169, 170, 171, 172, 49153, 140, 173, 49153, 140, 174, 175, 49153, 140, 176, 177, 178, 49156, 140, 49157, 179, 180,
		181, 182, 183, 184, 49172, 140, 49159, 185, 186, 49182, 140, 49155, 187, 188, 49218, 140, 49155, 189, 190, 191, 192, 193,
		49157, 140, 194, 195, 49198, 196, 197, 49156, 196, 198, 49225, 140, 199, 200, 201, 49153, 202, 203, 49169, 140, 204, 205,
		49189, 140, 206, 207, 208, 209, 210, 140, 211, 140, 212, 213, 214, 215, 216, 217, 218, 219, 49155, 220, 221, 222, 49161,
		140, 223, 49166, 140, 224, 225, 226, 49160, 140, 227, 228, 49153, 140, 229, 230, 231, 232, 233, 140, 234, 235, 236, 237,
		238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 49162, 140, 248, 49484, 249, 250, 49183, 251, 252, 253, 254, 49195, 255,
		256, 49208, 257, 258, 49175, 140, 49155, 259, 260, 49161, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662,
		140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140, 248, 49662, 140,
		248, 261, 262, 263, 264, 49179, 262, 49630, 140, 248, 49662, 265, 266, 49662, 265, 266
	};

	static constexpr std::array<std::uint_least16_t, 5919> rlestage2 =
	{
		49160, 0, 1, 49155, 2, 49169, 0, 3, 4, 5, 6, 7, 49153, 6, 8, 9, 10, 6, 11, 12, 13, 14, 6, 49161, 15, 16, 12, 49154, 11, 4,
		6, 49157, 17, 49171, 18, 9, 6, 10, 19, 20, 21, 49157, 22, 49153, 23, 49153, 24, 49167, 23, 9, 11, 10, 11, 0, 49156, 25, 26,
		49177, 25, 27, 28, 49155, 29, 30, 28, 31, 30, 32, 33, 34, 35, 30, 31, 30, 34, 49153, 36, 31, 37, 28, 38, 31, 36, 32, 39,
		49154, 36, 28, 49174, 40, 34, 49158, 40, 41, 49174, 42, 34, 49158, 42, 43, 65535, 23, 44, 45, 44, 46, 47, 48, 65535, 3, 44,
		45, 49, 65535, 8, 44, 45, 50, 65535, 23, 44, 45, 51, 65535, 3, 44, 45, 52, 53, 54, 44, 45, 44, 45, 55, 44, 45, 49153, 56,
		44, 45, 49, 57, 58, 59, 44, 45, 56, 60, 61, 62, 63, 44, 45, 64, 49, 62, 65, 66, 67, 65535, 3, 44, 45, 68, 44, 45, 68, 49153,
		49, 44, 45, 68, 44, 45, 49153, 69, 44, 45, 44, 45, 70, 44, 45, 49, 71, 44, 45, 49, 72, 49155, 71, 73, 74, 75, 73, 74, 75,
		73, 74, 75, 65535, 8, 44, 45, 76, 65535, 9, 44, 45, 48, 73, 74, 75, 44, 45, 77, 78, 79, 80, 65535, 15, 44, 45, 65535, 4,
		79, 80, 81, 82, 65535, 9, 79, 80, 49154, 82, 49154, 83, 84, 85, 86, 87, 88, 49153, 89, 85, 90, 91, 92, 93, 94, 90, 94, 95,
		65535, 3, 94, 90, 96, 97, 98, 99, 100, 49, 49153, 101, 49, 102, 49, 103, 104, 49154, 49, 101, 105, 49, 106, 49, 107, 108,
		49, 109, 110, 108, 111, 112, 49153, 49, 110, 49, 113, 114, 49153, 49, 115, 49158, 49, 116, 49153, 49, 117, 49153, 49, 117,
		49154, 49, 118, 117, 119, 49153, 120, 121, 49156, 49, 122, 49, 71, 49159, 49, 123, 124, 49161, 49, 49156, 125, 49153, 82,
		49153, 126, 127, 49157, 126, 49158, 128, 49153, 129, 49155, 31, 49161, 128, 49153, 130, 49164, 31, 131, 49156, 126, 49156,
		31, 49153, 132, 133, 131, 133, 49168, 134, 49220, 135, 136, 49160, 137, 138, 49159, 139, 49156, 140, 49154, 139, 49153, 135,
		137, 49164, 141, 142, 143, 142, 143, 128, 144, 142, 143, 49153, 145, 146, 49154, 147, 148, 149, 49155, 145, 144, 31, 150,
		151, 49154, 152, 145, 153, 145, 49153, 154, 155, 49168, 156, 145, 49160, 156, 157, 49154, 158, 155, 49168, 159, 160, 49160,
		159, 161, 49153, 162, 163, 164, 165, 166, 49153, 167, 168, 169, 170, 171, 172, 65535, 4, 173, 174, 65535, 7, 175, 176, 177,
		178, 179, 180, 181, 182, 183, 184, 185, 186, 184, 185, 187, 49154, 188, 189, 49163, 190, 189, 49153, 190, 49183, 191, 49183,
		192, 193, 49156, 194, 195, 194, 195, 49155, 194, 193, 49153, 194, 65535, 17, 196, 197, 198, 49153, 199, 49153, 200, 201,
		49153, 202, 203, 204, 205, 206, 205, 206, 65535, 24, 196, 197, 207, 196, 197, 196, 197, 203, 204, 196, 197, 203, 204, 196,
		197, 203, 204, 208, 65535, 14, 196, 197, 205, 206, 65535, 4, 196, 197, 209, 210, 196, 197, 65535, 3, 211, 212, 65535, 8,
		203, 204, 211, 212, 211, 212, 65535, 8, 213, 214, 215, 216, 217, 218, 65535, 4, 219, 220, 221, 49189, 222, 49153, 221, 223,
		49157, 224, 221, 49189, 225, 226, 221, 227, 228, 49153, 221, 49153, 229, 230, 231, 49168, 232, 233, 49164, 232, 49161, 234,
		235, 49154, 234, 236, 234, 237, 49153, 234, 238, 239, 240, 241, 240, 49159, 231, 49178, 242, 49156, 231, 49154, 242, 237,
		243, 49162, 231, 49155, 244, 245, 246, 49154, 247, 49153, 248, 249, 250, 251, 49153, 252, 49157, 253, 49156, 254, 250, 255,
		256, 257, 258, 259, 49177, 260, 49156, 261, 262, 49161, 260, 49159, 263, 49154, 264, 253, 265, 266, 49157, 267, 268, 49161,
		269, 49155, 270, 49153, 271, 272, 49222, 260, 49153, 273, 49156, 260, 273, 49166, 260, 273, 49155, 260, 274, 260, 49158,
		275, 276, 277, 49153, 278, 49155, 275, 49153, 279, 49153, 275, 277, 49154, 278, 275, 49153, 280, 49161, 269, 49154, 273,
		49153, 281, 280, 49154, 282, 49159, 283, 284, 283, 284, 285, 286, 287, 288, 49178, 287, 49154, 289, 49167, 290, 49162, 291,
		49153, 285, 49154, 289, 49181, 292, 49169, 261, 49189, 293, 49162, 294, 295, 49165, 296, 49161, 297, 49184, 298, 49160, 299,
		49153, 300, 301, 302, 303, 304, 305, 49156, 306, 49173, 307, 49153, 308, 49153, 309, 310, 49160, 308, 310, 49154, 308, 310,
		49155, 308, 311, 49153, 312, 49166, 313, 312, 49176, 314, 49154, 315, 49153, 316, 317, 316, 49162, 318, 49156, 285, 49199,
		145, 319, 320, 49162, 319, 49157, 320, 49153, 321, 256, 49159, 322, 49173, 256, 49163, 323, 49153, 324, 325, 326, 49157,
		327, 49157, 328, 49166, 327, 329, 330, 49153, 331, 332, 333, 49204, 334, 335, 336, 337, 334, 49154, 332, 49159, 331, 49155,
		332, 337, 338, 336, 334, 49153, 339, 49153, 337, 330, 49153, 335, 49161, 334, 49153, 331, 49153, 340, 49161, 341, 342, 343,
		344, 49156, 345, 346, 49153, 347, 49153, 348, 349, 49153, 348, 350, 351, 49153, 352, 353, 49159, 354, 49153, 353, 49153,
		354, 49153, 353, 49173, 354, 353, 49158, 354, 353, 354, 49154, 353, 49155, 354, 49153, 353, 355, 356, 357, 49153, 352, 49155,
		351, 49153, 353, 49153, 352, 49153, 353, 49153, 352, 355, 358, 49159, 353, 357, 49155, 353, 49153, 354, 353, 49154, 354,
		49153, 351, 49153, 353, 49161, 359, 49153, 354, 49153, 360, 49157, 361, 362, 363, 364, 365, 49153, 353, 366, 367, 368, 369,
		366, 49157, 370, 49155, 366, 49153, 370, 49153, 366, 49173, 370, 366, 49158, 370, 366, 49153, 370, 366, 49153, 370, 366,
		49153, 370, 49153, 366, 371, 366, 49154, 372, 49153, 368, 49155, 366, 49153, 368, 49153, 366, 49153, 368, 371, 49154, 366,
		373, 49158, 366, 49155, 370, 366, 370, 49158, 366, 49161, 374, 49153, 368, 49154, 370, 373, 49161, 366, 375, 49153, 376,
		377, 375, 49158, 378, 379, 378, 375, 49154, 378, 375, 49173, 378, 375, 49158, 378, 375, 49153, 378, 375, 49156, 378, 49153,
		375, 380, 378, 49154, 377, 49156, 376, 375, 49153, 376, 377, 375, 49153, 377, 380, 49153, 375, 378, 49166, 375, 378, 379,
		49153, 381, 49153, 375, 49161, 382, 383, 384, 49158, 375, 385, 49154, 386, 49154, 387, 388, 389, 49153, 390, 388, 49159,
		391, 49153, 388, 49153, 391, 49153, 388, 49173, 391, 388, 49158, 391, 388, 49153, 391, 388, 392, 49155, 391, 49153, 388,
		393, 391, 394, 389, 390, 49154, 389, 395, 49153, 388, 49153, 390, 49153, 388, 49153, 390, 393, 49159, 388, 389, 394, 49155,
		388, 49153, 391, 388, 49154, 391, 49153, 395, 49153, 388, 49161, 396, 397, 392, 49157, 398, 49159, 388, 49153, 399, 400,
		401, 399, 49157, 401, 49154, 399, 49154, 401, 399, 49155, 401, 49154, 399, 49153, 401, 399, 401, 399, 49153, 401, 49154,
		399, 49153, 401, 49154, 399, 49154, 401, 49154, 399, 49159, 401, 402, 49154, 401, 49155, 399, 403, 404, 400, 49153, 404,
		49154, 399, 49154, 404, 399, 49154, 404, 405, 49153, 399, 406, 49157, 399, 403, 49165, 399, 407, 49160, 408, 49154, 409,
		49157, 410, 411, 410, 49156, 399, 412, 49154, 413, 414, 49159, 415, 414, 49154, 415, 414, 49174, 415, 414, 49161, 415, 416,
		49156, 415, 49154, 414, 417, 49154, 418, 49155, 413, 414, 49154, 418, 414, 49154, 418, 419, 49158, 414, 49153, 418, 414,
		49153, 417, 420, 49156, 414, 49153, 415, 49153, 421, 49153, 414, 49161, 422, 49159, 414, 49158, 423, 424, 425, 426, 49153,
		427, 428, 49159, 429, 428, 49154, 429, 428, 49174, 429, 428, 49161, 429, 428, 49156, 429, 49153, 428, 430, 431, 427, 432,
		49153, 427, 433, 49153, 427, 428, 432, 49153, 427, 428, 49153, 427, 432, 434, 49158, 428, 49153, 433, 49158, 428, 429, 428,
		49153, 429, 49153, 435, 49153, 428, 49161, 436, 428, 49153, 437, 49164, 428, 438, 439, 49153, 440, 441, 49159, 442, 441,
		49154, 442, 441, 49174, 442, 443, 49167, 442, 443, 49153, 444, 445, 446, 49153, 440, 49154, 447, 448, 441, 49154, 440, 441,
		49154, 440, 449, 443, 450, 49155, 441, 49154, 451, 446, 49158, 452, 453, 49153, 442, 49153, 448, 49153, 441, 49161, 454,
		49157, 455, 49154, 452, 456, 49157, 445, 49153, 457, 49153, 458, 457, 49169, 459, 49154, 457, 49175, 459, 457, 49160, 459,
		457, 459, 49153, 457, 49158, 459, 49154, 457, 460, 49155, 457, 461, 49153, 458, 49154, 462, 457, 462, 457, 49158, 458, 461,
		49157, 457, 49161, 463, 49153, 457, 49153, 458, 464, 49162, 457, 465, 49199, 466, 467, 466, 468, 49158, 467, 49155, 465,
		469, 49156, 470, 466, 471, 49157, 472, 467, 472, 473, 49161, 474, 49153, 475, 49187, 465, 476, 49153, 477, 476, 477, 49153,
		476, 49153, 477, 476, 477, 49153, 476, 477, 49157, 476, 49155, 477, 476, 49158, 477, 476, 49154, 477, 476, 477, 476, 477,
		49153, 476, 49153, 477, 476, 49155, 477, 478, 477, 479, 49157, 478, 476, 49153, 478, 477, 49153, 476, 49156, 480, 476, 481,
		476, 49156, 482, 478, 49153, 476, 49161, 483, 49153, 476, 49153, 477, 49153, 484, 49183, 476, 485, 49154, 486, 49155, 487,
		488, 49155, 487, 49157, 488, 486, 487, 49154, 486, 49153, 489, 49157, 486, 49161, 490, 49161, 491, 65535, 3, 486, 489, 492,
		493, 492, 493, 49153, 494, 49159, 485, 495, 49184, 485, 496, 49153, 497, 49155, 495, 49165, 498, 499, 49153, 498, 49154,
		489, 487, 49153, 489, 49155, 485, 500, 49154, 501, 49157, 498, 502, 498, 495, 49172, 498, 49154, 502, 49158, 498, 502, 498,
		49154, 502, 495, 49159, 503, 504, 49157, 503, 495, 505, 503, 49153, 506, 49154, 507, 49155, 508, 49153, 509, 49188, 495,
		49185, 510, 511, 49156, 510, 511, 49153, 510, 512, 513, 49155, 514, 513, 514, 49154, 515, 514, 516, 513, 516, 517, 49153,
		512, 49153, 515, 511, 49161, 518, 49153, 519, 49155, 520, 49157, 510, 49153, 513, 49153, 514, 49155, 511, 49154, 515, 511,
		512, 49153, 521, 49153, 511, 49153, 512, 49156, 521, 49154, 511, 49155, 515, 49164, 511, 515, 49153, 512, 49153, 515, 49157,
		522, 517, 511, 522, 49161, 523, 49153, 524, 525, 526, 49153, 527, 49189, 528, 529, 530, 49156, 529, 530, 49153, 529, 49190,
		531, 49153, 532, 49153, 533, 534, 535, 49154, 536, 49241, 537, 49156, 538, 49153, 539, 49217, 537, 49156, 538, 49233, 537,
		49157, 538, 49158, 540, 541, 49214, 540, 541, 540, 542, 49155, 540, 49153, 542, 49158, 540, 542, 540, 542, 49155, 540, 49153,
		542, 49190, 540, 541, 540, 542, 49155, 540, 49153, 542, 49182, 540, 541, 540, 542, 49155, 540, 49153, 542, 49158, 540, 542,
		540, 542, 49155, 540, 49153, 542, 49158, 540, 541, 49158, 540, 542, 49174, 540, 541, 49182, 540, 541, 540, 542, 49155, 540,
		49153, 542, 49158, 540, 541, 49190, 540, 541, 49170, 540, 49153, 542, 49153, 543, 544, 545, 546, 547, 49155, 546, 49153,
		547, 49160, 548, 49162, 549, 49154, 542, 49167, 541, 49161, 550, 49157, 542, 49231, 551, 49156, 552, 553, 49153, 554, 49157,
		555, 49153, 554, 556, 49515, 557, 558, 559, 49159, 557, 49160, 560, 561, 49177, 562, 563, 564, 49154, 565, 49226, 566, 49154,
		567, 49154, 568, 49159, 569, 49158, 570, 49164, 571, 572, 49155, 571, 49153, 573, 574, 49162, 572, 49169, 575, 49153, 576,
		577, 49153, 578, 49160, 579, 49169, 580, 49153, 581, 49163, 582, 49164, 583, 584, 49154, 583, 584, 49153, 585, 49163, 584,
		49203, 586, 49153, 587, 588, 49158, 589, 49159, 588, 589, 49153, 588, 49162, 590, 49154, 591, 592, 49153, 593, 591, 594,
		586, 595, 49153, 596, 49161, 597, 49157, 596, 49161, 598, 49157, 596, 49153, 599, 600, 601, 602, 600, 603, 599, 602, 604,
		605, 49154, 606, 607, 608, 49161, 609, 49157, 608, 49186, 610, 611, 49203, 610, 49159, 608, 49156, 610, 49153, 612, 49185,
		610, 613, 614, 49156, 608, 49221, 560, 49161, 145, 49180, 615, 49153, 616, 617, 49154, 618, 49155, 619, 49153, 618, 49154,
		619, 49155, 617, 49153, 619, 618, 49157, 619, 49154, 620, 49155, 617, 621, 49154, 617, 49153, 622, 49161, 623, 49181, 624,
		49153, 145, 49156, 624, 49162, 145, 49193, 625, 49153, 626, 49155, 145, 49156, 625, 49154, 627, 49153, 625, 627, 49166, 625,
		49157, 145, 49161, 628, 629, 49154, 145, 49153, 630, 49183, 631, 49174, 632, 49153, 633, 49153, 634, 633, 49153, 635, 49153,
		636, 49204, 637, 638, 639, 638, 49158, 639, 145, 640, 638, 639, 49153, 638, 49159, 639, 49157, 638, 49153, 639, 49159, 641,
		49153, 145, 641, 49161, 642, 49157, 145, 49161, 642, 49157, 145, 49158, 643, 644, 49155, 645, 49153, 643, 49153, 145, 49165,
		646, 647, 49216, 145, 49155, 648, 649, 49198, 650, 651, 649, 49156, 648, 649, 648, 49156, 649, 648, 649, 652, 49158, 650,
		49155, 653, 49161, 654, 49153, 655, 656, 657, 49153, 655, 656, 49161, 658, 49160, 651, 49160, 658, 49154, 653, 49153, 659,
		660, 49181, 661, 660, 49155, 659, 49153, 660, 49153, 659, 662, 663, 49153, 664, 49153, 661, 49161, 665, 49157, 666, 49189,
		667, 668, 669, 49153, 670, 49154, 669, 670, 669, 49154, 670, 49153, 671, 49159, 672, 49155, 673, 49187, 674, 49159, 675,
		49159, 676, 49153, 675, 677, 678, 49154, 679, 49153, 680, 49154, 681, 49161, 682, 49154, 679, 49154, 674, 49161, 683, 49181,
		684, 49154, 685, 686, 49153, 685, 49153, 687, 688, 689, 690, 49153, 691, 692, 693, 694, 695, 49158, 696, 49199, 145, 49159,
		697, 49159, 698, 49154, 699, 700, 49164, 699, 701, 49158, 699, 49155, 702, 699, 49155, 702, 703, 704, 705, 49153, 706, 707,
		49153, 646, 49157, 145, 49189, 82, 49156, 708, 709, 49200, 710, 49156, 711, 712, 49154, 710, 49156, 711, 82, 49163, 83, 713,
		714, 49154, 83, 715, 49175, 83, 716, 49155, 83, 49160, 717, 718, 49154, 717, 718, 49173, 717, 719, 49155, 140, 49158, 720,
		49156, 721, 49174, 722, 49165, 723, 646, 49155, 724, 145, 725, 726, 699, 49153, 720, 65535, 22, 44, 45, 44, 46, 65535, 52,
		44, 45, 49155, 48, 50, 727, 49153, 728, 729, 728, 65535, 21, 44, 45, 44, 46, 65535, 23, 44, 45, 65535, 3, 730, 731, 49159,
		732, 49159, 733, 49157, 732, 49153, 145, 49157, 733, 49153, 145, 49159, 732, 49159, 733, 49159, 732, 49159, 733, 49157, 732,
		49153, 145, 49157, 733, 49153, 145, 65535, 4, 155, 732, 65535, 4, 145, 733, 49159, 732, 49159, 733, 49153, 734, 49155, 735,
		49153, 736, 49153, 737, 49153, 738, 49153, 739, 49153, 145, 49159, 740, 49159, 741, 49159, 740, 49159, 741, 49159, 740, 49159,
		741, 49153, 732, 49154, 740, 145, 155, 740, 49153, 733, 49153, 742, 743, 144, 744, 49154, 144, 49154, 740, 145, 155, 740,
		49155, 745, 743, 49154, 144, 49153, 732, 49153, 155, 49153, 145, 49153, 155, 49153, 733, 49153, 746, 145, 49154, 144, 49153,
		732, 49154, 155, 179, 49153, 155, 49153, 733, 49153, 747, 748, 49154, 144, 49153, 145, 49154, 740, 145, 155, 740, 49153,
		749, 49153, 750, 743, 49153, 144, 145, 49162, 27, 35, 751, 752, 49153, 753, 49157, 754, 755, 28, 756, 757, 758, 49153, 33,
		39, 758, 33, 49155, 28, 759, 49153, 28, 759, 760, 761, 49156, 762, 763, 49153, 28, 49154, 755, 49155, 28, 33, 39, 28, 49153,
		764, 28, 765, 766, 49154, 28, 34, 767, 768, 769, 49153, 770, 49155, 771, 49155, 772, 773, 774, 775, 49153, 776, 772, 49158,
		776, 777, 778, 49154, 779, 780, 781, 49155, 782, 49157, 35, 36, 783, 49153, 145, 49157, 36, 784, 785, 784, 786, 787, 788,
		49161, 36, 784, 785, 784, 786, 787, 145, 49156, 717, 49159, 789, 49154, 145, 49162, 790, 791, 792, 49154, 793, 49153, 794,
		49155, 795, 49154, 796, 797, 798, 49154, 799, 800, 801, 49167, 145, 49164, 802, 49155, 803, 802, 49153, 804, 805, 49153,
		806, 49155, 141, 807, 49155, 808, 722, 49166, 145, 49153, 809, 810, 49155, 809, 810, 49153, 809, 811, 49154, 810, 49153,
		811, 49154, 810, 811, 809, 810, 49153, 809, 812, 49156, 810, 49157, 809, 810, 809, 813, 809, 810, 814, 815, 816, 49153, 810,
		817, 811, 49153, 810, 818, 810, 811, 49155, 819, 820, 821, 822, 823, 824, 49153, 825, 49156, 826, 825, 49153, 824, 49153,
		827, 828, 826, 829, 830, 831, 832, 49154, 833, 49164, 36, 49167, 834, 49167, 835, 49154, 836, 79, 90, 49155, 837, 833, 49153,
		838, 49155, 145, 49156, 839, 49156, 840, 49153, 839, 49155, 840, 839, 49153, 840, 839, 49153, 840, 839, 840, 841, 49156,
		840, 839, 841, 49153, 840, 49155, 841, 49153, 840, 49155, 841, 49169, 840, 49153, 839, 49153, 840, 839, 840, 839, 49158,
		840, 841, 840, 49157, 841, 49153, 840, 49156, 841, 49160, 842, 49163, 843, 49169, 34, 844, 49374, 34, 49165, 773, 30, 845,
		49157, 30, 846, 847, 846, 847, 49171, 30, 49153, 34, 49158, 30, 767, 768, 49231, 30, 845, 773, 49181, 845, 49176, 773, 49153,
		848, 849, 848, 49174, 849, 850, 851, 49162, 852, 49157, 853, 854, 49156, 855, 856, 49162, 857, 49158, 858, 49155, 859, 860,
		49188, 30, 49153, 845, 49176, 861, 49162, 30, 49172, 861, 49211, 36, 49177, 809, 49177, 862, 49177, 863, 36, 49171, 864,
		865, 49301, 30, 49161, 849, 49153, 866, 49163, 30, 49160, 866, 34, 49155, 30, 49156, 866, 34, 49155, 30, 49153, 866, 49153,
		30, 49153, 866, 49154, 30, 49156, 866, 49165, 30, 866, 30, 866, 49153, 30, 49157, 866, 49154, 30, 49159, 845, 49159, 773,
		49156, 30, 49153, 866, 49164, 30, 49153, 850, 49153, 849, 852, 845, 49189, 30, 866, 30, 866, 49180, 30, 49155, 866, 49160,
		30, 49153, 866, 34, 49153, 845, 49163, 849, 49153, 852, 49161, 849, 49159, 850, 49162, 852, 867, 49153, 856, 49153, 850,
		49167, 852, 855, 49161, 867, 49154, 856, 49155, 867, 49161, 856, 857, 49170, 856, 857, 856, 49155, 857, 49175, 856, 868,
		49155, 869, 870, 49155, 869, 49153, 870, 49179, 869, 870, 49186, 869, 870, 869, 870, 49155, 869, 49154, 870, 869, 871, 49158,
		869, 49153, 870, 49158, 869, 65535, 7, 872, 873, 49181, 874, 869, 49154, 870, 49175, 869, 870, 49165, 869, 870, 49156, 875,
		876, 877, 49155, 853, 878, 879, 878, 49153, 880, 49173, 773, 65535, 3, 881, 882, 883, 884, 883, 884, 49167, 773, 49279, 885,
		49282, 773, 65535, 11, 881, 882, 49214, 773, 881, 882, 881, 882, 49183, 773, 881, 882, 49153, 773, 49165, 850, 49157, 852,
		49158, 855, 49156, 867, 49155, 855, 49163, 867, 49172, 879, 49153, 867, 49157, 879, 49154, 858, 49156, 867, 49156, 856, 49177,
		858, 49153, 861, 49183, 858, 49153, 861, 49185, 858, 49154, 861, 49163, 858, 861, 49159, 858, 860, 49176, 861, 49155, 886,
		49167, 861, 49198, 887, 888, 49198, 889, 888, 94, 90, 890, 891, 892, 893, 894, 65535, 3, 94, 90, 895, 896, 897, 898, 728,
		730, 731, 899, 94, 90, 899, 49155, 728, 900, 901, 49153, 902, 65535, 50, 903, 904, 905, 49157, 906, 907, 908, 907, 908, 49154,
		909, 910, 911, 49156, 912, 49155, 913, 914, 49153, 913, 49189, 915, 529, 916, 49156, 529, 916, 49153, 529, 49205, 917, 49153,
		918, 49158, 919, 920, 921, 49165, 919, 922, 49174, 541, 49160, 542, 49158, 541, 542, 49158, 541, 542, 49158, 541, 542, 49158,
		541, 542, 49158, 541, 542, 49158, 541, 542, 49158, 541, 542, 49158, 541, 542, 49183, 923, 49153, 776, 924, 925, 924, 925,
		49154, 776, 924, 925, 776, 924, 925, 49160, 776, 926, 49153, 927, 928, 927, 924, 925, 49153, 927, 929, 930, 65535, 4, 931,
		932, 49155, 927, 933, 934, 927, 935, 49159, 936, 49153, 937, 938, 49154, 939, 940, 941, 942, 49153, 943, 49156, 944, 49205,
		861, 49177, 945, 145, 49240, 945, 49163, 145, 49365, 945, 49177, 145, 49153, 946, 49153, 821, 49159, 946, 49155, 145, 27,
		947, 764, 28, 809, 948, 949, 950, 767, 768, 767, 768, 758, 951, 758, 951, 767, 768, 49153, 30, 65535, 4, 767, 768, 754, 758,
		49153, 951, 30, 49160, 950, 49155, 135, 49153, 952, 754, 49156, 953, 49153, 809, 49154, 954, 955, 956, 957, 821, 809, 958,
		49235, 959, 49153, 960, 49153, 958, 49153, 961, 49153, 962, 49153, 963, 960, 964, 49241, 965, 966, 967, 49153, 968, 969,
		49156, 970, 49191, 971, 972, 973, 970, 145, 49202, 537, 539, 49193, 537, 145, 49153, 974, 49155, 975, 49161, 974, 49175,
		976, 49154, 977, 49156, 970, 49167, 829, 49171, 832, 49163, 145, 49167, 969, 49180, 978, 49153, 979, 145, 49161, 36, 49177,
		809, 49155, 980, 49159, 833, 822, 49166, 864, 49179, 978, 49153, 979, 981, 809, 49161, 36, 49190, 809, 49166, 864, 49163,
		809, 49155, 822, 49198, 982, 145, 49239, 982, 49182, 809, 49155, 822, 49250, 809, 49153, 822, 49182, 809, 822, 49333, 983,
		49161, 145, 49215, 822, 49317, 984, 49173, 985, 49159, 986, 49159, 987, 988, 49160, 989, 49172, 990, 49172, 145, 49172, 991,
		992, 49398, 991, 49154, 145, 49169, 993, 49153, 994, 49167, 993, 994, 49163, 993, 994, 49154, 993, 994, 993, 49160, 145,
		49191, 995, 49157, 996, 997, 998, 49291, 999, 1000, 1001, 49153, 1002, 49167, 999, 49161, 1003, 49153, 999, 49171, 1004,
		65535, 16, 213, 214, 217, 218, 65535, 6, 213, 214, 1005, 201, 49154, 1006, 1007, 49159, 1008, 49153, 201, 1007, 1009, 65535,
		12, 213, 214, 219, 220, 219, 220, 49153, 1010, 1011, 1008, 49221, 1012, 49161, 1013, 49153, 1014, 1015, 1016, 49154, 1017,
		1016, 49159, 1018, 49174, 1019, 49155, 1020, 49156, 1021, 49153, 1022, 65535, 7, 730, 731, 49153, 728, 65535, 31, 730, 731,
		901, 49159, 728, 730, 731, 730, 731, 1023, 65535, 5, 730, 731, 1021, 49153, 1024, 730, 731, 1025, 1026, 1027, 1028, 1029,
		1030, 1031, 49153, 1032, 65535, 5, 1033, 1034, 65535, 5, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 145, 1040, 1041, 1042,
		1043, 1044, 1045, 1044, 1045, 49214, 145, 1046, 49153, 1047, 1026, 49156, 1048, 49153, 1049, 1050, 49154, 1049, 1050, 49155,
		1049, 1050, 49174, 1049, 49153, 1051, 49153, 1052, 1051, 49155, 1053, 49155, 145, 49157, 833, 49153, 980, 796, 980, 49157,
		145, 49203, 1054, 49153, 1055, 49153, 1056, 49159, 1057, 49153, 1058, 49201, 1059, 49167, 1058, 1060, 1061, 49159, 1062,
		49153, 1063, 49161, 1064, 49157, 1062, 49169, 1065, 49157, 347, 49154, 1066, 347, 1067, 1068, 49153, 1069, 49161, 1070, 49179,
		1071, 49156, 1072, 49154, 1073, 1074, 1075, 49174, 1076, 49162, 1077, 1078, 1079, 49162, 1080, 1081, 49180, 538, 49154, 145,
		49154, 1082, 1083, 49198, 1084, 1085, 49153, 1083, 49155, 1082, 49153, 1083, 1082, 49154, 1083, 1086, 49157, 1087, 1088,
		49153, 1089, 49155, 1087, 1090, 1091, 49161, 1092, 49155, 1090, 49153, 1087, 49156, 1093, 1094, 1095, 49160, 1093, 49161,
		1096, 49156, 1093, 1097, 49192, 1098, 49157, 1099, 49153, 1100, 49153, 1099, 49153, 1100, 49153, 1099, 49160, 1101, 49154,
		1098, 1099, 49159, 1098, 1099, 1100, 49153, 1101, 49161, 1102, 49153, 1101, 1103, 49154, 1104, 49167, 1105, 1106, 49157,
		1105, 49154, 1107, 1105, 524, 1094, 1108, 49153, 1093, 49199, 1109, 1110, 1109, 49154, 1110, 49153, 1111, 49153, 1110, 1111,
		1109, 49153, 1111, 1109, 1110, 1112, 1113, 1112, 1113, 49175, 145, 49153, 1109, 1114, 1115, 1116, 49162, 1117, 1118, 49153,
		1119, 49153, 1118, 49153, 1120, 1117, 49153, 1121, 1118, 1122, 49160, 145, 542, 49157, 1123, 49153, 542, 49157, 1123, 49153,
		542, 49157, 1123, 49160, 542, 49158, 1123, 542, 49158, 1123, 542, 49186, 1032, 1124, 49158, 1032, 1125, 49155, 1126, 49155,
		1127, 1032, 1128, 49161, 145, 49231, 1129, 49186, 1130, 49153, 1131, 1132, 49153, 1131, 1132, 49153, 1131, 1133, 1134, 1135,
		49153, 145, 49161, 1136, 49157, 145, 49315, 1137, 49163, 145, 49174, 538, 49155, 145, 49200, 538, 49155, 145, 49279, 1138,
		49279, 1139, 49293, 1140, 49153, 984, 1140, 984, 1140, 49153, 984, 49161, 1140, 984, 1140, 984, 1140, 49153, 984, 49153,
		1140, 49154, 984, 49155, 1140, 49153, 1141, 49210, 1142, 49154, 1143, 49153, 145, 49257, 1144, 49189, 145, 49158, 50, 49163,
		145, 49156, 1145, 49156, 145, 1146, 1147, 49161, 1148, 1149, 49164, 1148, 145, 49156, 1148, 145, 1148, 145, 49153, 1148,
		145, 49153, 1148, 145, 49161, 1148, 49249, 260, 49167, 1150, 49168, 256, 49290, 260, 49157, 1151, 49369, 260, 1152, 1153,
		49167, 256, 49215, 260, 49153, 256, 49205, 260, 49159, 256, 49183, 1154, 49161, 260, 49153, 1151, 1155, 252, 49153, 256,
		49167, 1156, 49154, 1157, 1158, 49154, 1157, 1159, 1160, 1157, 49157, 145, 49155, 135, 49154, 721, 49158, 646, 49153, 1161,
		1162, 49153, 1163, 49153, 765, 65535, 6, 1164, 1165, 1166, 1167, 1166, 1167, 49153, 772, 1168, 1169, 49155, 1162, 49154,
		765, 49153, 148, 1170, 145, 148, 1171, 49153, 1172, 1163, 65535, 3, 1164, 1165, 49153, 1162, 1173, 784, 1174, 49154, 784,
		145, 1173, 790, 49153, 1162, 49155, 145, 1151, 260, 1151, 271, 1151, 256, 65535, 4, 1151, 260, 1151, 49277, 260, 49153, 256,
		1175, 145, 1172, 1176, 1162, 790, 49153, 1162, 1177, 1164, 1165, 1162, 784, 148, 1163, 1170, 1162, 49161, 1178, 1171, 148,
		49154, 784, 1172, 1162, 49157, 1179, 49171, 40, 1164, 1173, 1165, 1180, 765, 31, 49157, 1181, 49171, 42, 1164, 784, 1165,
		784, 1182, 1183, 1172, 1166, 1167, 148, 1162, 49161, 1184, 130, 49196, 1184, 49153, 1185, 539, 49181, 537, 49154, 145, 49157,
		537, 49153, 145, 49157, 537, 49153, 145, 49157, 537, 49153, 145, 49154, 537, 49154, 145, 49153, 790, 784, 31, 809, 49153,
		790, 145, 809, 49155, 784, 49153, 809, 145, 49160, 1186, 49154, 1187, 1188, 1189, 49153, 1190, 49163, 1191, 145, 49177, 1191,
		145, 49170, 1191, 145, 49153, 1191, 145, 49166, 1191, 49153, 145, 49165, 1191, 49185, 145, 49274, 1191, 49156, 145, 49154,
		1192, 49155, 145, 49196, 865, 49154, 145, 49160, 822, 49204, 1193, 49155, 1194, 49168, 1195, 1194, 1196, 1197, 49153, 1198,
		145, 49163, 832, 49155, 145, 1197, 49198, 145, 49196, 832, 722, 49281, 145, 49180, 1199, 49154, 1200, 49200, 1201, 49166,
		1202, 1203, 49178, 1204, 49155, 912, 49182, 1205, 1206, 49155, 1207, 49160, 145, 49154, 1208, 49168, 1209, 1210, 49159, 1209,
		1210, 49156, 1211, 49189, 1212, 49156, 1213, 49156, 145, 49181, 1214, 1215, 1216, 49187, 1217, 49155, 145, 49159, 1217, 1218,
		49156, 1219, 49193, 145, 49189, 1220, 49153, 1221, 49189, 1222, 49153, 1223, 49199, 1224, 49181, 1225, 49153, 1226, 49161,
		1227, 49157, 1226, 49187, 1228, 49155, 1229, 49187, 1230, 49155, 1229, 49191, 1231, 49159, 1232, 49203, 1233, 49162, 145,
		1234, 49167, 145, 49334, 1235, 49160, 145, 49173, 1235, 49161, 145, 49159, 1235, 49175, 145, 49157, 1236, 49153, 145, 1236,
		145, 49195, 1236, 145, 49153, 1236, 49154, 145, 1236, 49153, 145, 1236, 49173, 1237, 145, 1238, 49159, 1239, 49174, 1240,
		49153, 1241, 49158, 1242, 49182, 1243, 49159, 1244, 49160, 1245, 49199, 145, 49170, 1246, 1247, 49153, 1246, 49156, 1247,
		49156, 1248, 49173, 1249, 49155, 1250, 49153, 1251, 49154, 1252, 1253, 49177, 1254, 49156, 1255, 1256, 49215, 145, 49183,
		1257, 49175, 1258, 49155, 145, 49153, 1259, 49153, 1258, 49167, 1259, 49153, 145, 49197, 1259, 1260, 49154, 1261, 1262, 49153,
		1261, 49156, 1262, 49155, 1261, 49155, 1260, 1262, 49154, 1260, 1262, 49178, 1260, 49155, 1262, 49154, 1263, 49155, 1262,
		1263, 49159, 1264, 49159, 1262, 49157, 1265, 49153, 1266, 1265, 49158, 1262, 49180, 1267, 49153, 1268, 1269, 49180, 1270,
		49154, 1271, 49183, 145, 49159, 1272, 1273, 49179, 1272, 49153, 1274, 49155, 1275, 49156, 1276, 49157, 1277, 1278, 49160,
		1275, 49205, 1279, 49154, 1280, 1281, 49157, 1282, 49173, 1283, 49153, 145, 49159, 1284, 49170, 1285, 49156, 145, 49159,
		1286, 49169, 1287, 49158, 145, 49155, 1288, 49163, 145, 49158, 1289, 49231, 145, 49224, 1290, 49206, 145, 49202, 1291, 49164,
		145, 49202, 1292, 49158, 145, 49157, 1293, 49247, 145, 49182, 1294, 145, 1295, 1296, 1295, 49204, 1297, 49165, 1296, 1298,
		49153, 1299, 49156, 1300, 49155, 1301, 49171, 1302, 49161, 1303, 49166, 1301, 1304, 49153, 1305, 1306, 49196, 1307, 49154,
		1306, 49155, 1308, 49153, 1306, 49153, 1309, 49153, 1310, 1311, 49155, 1312, 49165, 1313, 49176, 1314, 49158, 145, 49161,
		1315, 49157, 145, 49154, 1316, 49187, 1317, 49156, 1316, 1318, 49157, 1316, 49153, 1319, 1320, 49161, 1321, 1322, 49154,
		1323, 49163, 1320, 49186, 1324, 1325, 49153, 1326, 1324, 49160, 1327, 49153, 1328, 1329, 49199, 1330, 49154, 1329, 49160,
		1328, 1329, 1331, 49155, 1330, 49153, 1332, 49153, 1333, 1334, 49154, 1335, 1336, 49153, 1337, 49161, 1338, 1339, 1334, 1340,
		1334, 49153, 1341, 457, 49171, 1342, 49162, 457, 49169, 1343, 1344, 49176, 1343, 49154, 1345, 49154, 1346, 49153, 1345, 1346,
		1347, 1348, 1346, 49153, 1349, 1350, 49153, 1349, 1351, 1352, 49168, 1344, 49199, 145, 49158, 1353, 1354, 1353, 1354, 49155,
		1353, 1354, 49166, 1353, 1354, 49161, 1353, 1355, 49157, 1354, 49198, 1356, 1357, 49154, 1358, 49157, 1357, 49153, 1359,
		49156, 1360, 49161, 1361, 49157, 1360, 1362, 1363, 49153, 1364, 1365, 49159, 1366, 49153, 1365, 49153, 1366, 49153, 1365,
		49173, 1366, 1365, 49158, 1366, 1365, 49153, 1366, 1365, 49156, 1366, 49153, 1365, 1367, 1366, 1368, 1364, 1363, 49155, 1364,
		49153, 1365, 49153, 1364, 49153, 1365, 49153, 1364, 1369, 49153, 1365, 1370, 49157, 1365, 1368, 49156, 1365, 1371, 49155,
		1366, 49153, 1364, 49153, 1365, 49158, 1367, 49154, 1365, 49156, 1367, 49162, 1365, 49204, 1372, 49154, 1373, 49159, 1374,
		49153, 1373, 1375, 49153, 1374, 1373, 1375, 49155, 1372, 49153, 1376, 1377, 49153, 1378, 49161, 1379, 1380, 1377, 1380, 1378,
		49185, 1380, 49199, 1381, 1382, 49153, 1383, 49157, 1384, 1383, 1384, 49153, 1383, 1382, 1383, 49153, 1384, 1383, 49153,
		1385, 49153, 1381, 1386, 1381, 49159, 1387, 49161, 1388, 49157, 1387, 49183, 145, 49198, 1389, 1390, 49153, 1391, 49155,
		1392, 49153, 1393, 49155, 1391, 49153, 1392, 1391, 49153, 1394, 1395, 49153, 1396, 49153, 1397, 49154, 1398, 1396, 49165,
		1399, 49155, 1400, 49153, 1401, 49185, 1393, 49199, 1402, 49154, 1403, 49159, 1404, 49153, 1403, 1404, 1403, 1405, 1404,
		49153, 1406, 1407, 1402, 49162, 1408, 49161, 1409, 49157, 1408, 49164, 1410, 49170, 608, 49194, 1411, 1412, 1413, 1412, 49153,
		1413, 49157, 1412, 1414, 1415, 49159, 1416, 49161, 1417, 49157, 1416, 49199, 145, 49177, 1418, 49154, 1419, 49154, 1420,
		49153, 1421, 49155, 1420, 1421, 49155, 1420, 1422, 49155, 1419, 49161, 1423, 49153, 1424, 49154, 1425, 1426, 49247, 145,
		49183, 1427, 49183, 1428, 49161, 1429, 49160, 1430, 49163, 145, 1431, 1432, 49157, 1433, 49153, 1434, 49153, 1433, 49191,
		1432, 1435, 1436, 49155, 1433, 1434, 1432, 49155, 1433, 49154, 1437, 49153, 1438, 49154, 1437, 1436, 49159, 145, 1439, 49157,
		1440, 49153, 1441, 49154, 1440, 49191, 1439, 49153, 1442, 49155, 1439, 49164, 1440, 1441, 1443, 1444, 1445, 49153, 1446,
		1442, 49154, 1445, 49153, 1447, 49164, 1442, 49167, 145, 49208, 1448, 49158, 145, 49160, 1449, 1450, 49188, 1449, 1451, 49158,
		1452, 1450, 49157, 1452, 1451, 1453, 1449, 49153, 1454, 1455, 49153, 1456, 49161, 1450, 49161, 1457, 49170, 1458, 49154,
		1450, 1459, 1460, 49181, 1461, 49153, 1462, 49173, 1463, 1462, 1464, 49158, 1463, 1464, 49153, 1463, 1464, 49153, 1463, 49160,
		1462, 49215, 145, 49158, 1465, 145, 49153, 1465, 145, 49189, 1465, 49157, 1466, 49154, 145, 1466, 145, 49153, 1466, 145,
		49154, 1466, 1467, 1466, 49153, 1467, 1465, 1466, 49159, 145, 49161, 1468, 49189, 145, 49390, 1469, 49193, 1470, 1471, 49253,
		1472, 49250, 1473, 49163, 1474, 1472, 49155, 1475, 1476, 49162, 1472, 49347, 1477, 49211, 145, 49326, 1478, 49232, 145, 49350,
		1479, 49208, 145, 49336, 1480, 49158, 1018, 49182, 1481, 1482, 49161, 1483, 49155, 1482, 49153, 1484, 49247, 145, 49181,
		1485, 49153, 145, 49156, 1486, 1487, 49161, 145, 49199, 1488, 49158, 1489, 49153, 1490, 1491, 49153, 1492, 49155, 1493, 49153,
		1494, 49153, 1495, 1490, 1493, 49161, 145, 49161, 1496, 145, 49158, 1497, 145, 49172, 1488, 49156, 145, 49170, 1488, 49263,
		145, 49220, 1498, 49162, 1499, 1498, 49197, 1500, 49167, 1499, 49155, 1501, 49164, 1502, 49215, 145, 1503, 1504, 49181, 145,
		49388, 1505, 49170, 1506, 49266, 1505, 49164, 1506, 1507, 1508, 49436, 1509, 49232, 145, 49419, 1510, 49155, 1511, 49258,
		1512, 49156, 1513, 49164, 1512, 49154, 1513, 49160, 1512, 49158, 1513, 49161, 1512, 49153, 1513, 1514, 1515, 1516, 1517,
		49155, 1518, 49243, 145, 49397, 1519, 49161, 145, 49190, 1519, 49153, 145, 832, 49210, 1519, 1520, 1521, 49154, 1522, 49154,
		1519, 1523, 49156, 1524, 49159, 1525, 49159, 1522, 49153, 1519, 49158, 1522, 49181, 1519, 49155, 1522, 49199, 1519, 49162,
		838, 49174, 145, 49217, 1195, 49154, 1526, 1195, 49209, 145, 49238, 822, 49160, 145, 49169, 1527, 49165, 145, 49177, 1528,
		49159, 1529, 49153, 1530, 49167, 1529, 49177, 1528, 49158, 1529, 145, 49153, 1530, 49167, 1529, 49177, 1528, 49159, 1529,
		49153, 1530, 49167, 1529, 1528, 145, 49153, 1528, 49153, 145, 1528, 49153, 145, 49153, 1528, 49153, 145, 49155, 1528, 145,
		49159, 1528, 49155, 1529, 145, 1529, 145, 1529, 49153, 1530, 1529, 1531, 49153, 1529, 145, 49162, 1529, 49177, 1528, 49159,
		1529, 49153, 1530, 49167, 1529, 49153, 1528, 145, 49155, 1528, 49153, 145, 49159, 1528, 145, 49158, 1528, 145, 49159, 1529,
		49153, 1530, 49167, 1529, 49153, 1528, 145, 49155, 1528, 145, 49156, 1528, 145, 1528, 49154, 145, 49158, 1528, 145, 49159,
		1529, 49153, 1530, 49167, 1529, 49177, 1528, 49159, 1529, 49153, 1530, 49167, 1529, 49177, 1528, 49159, 1529, 49153, 1530,
		49167, 1529, 49177, 1528, 49159, 1529, 49153, 1530, 49167, 1529, 49177, 1528, 49159, 1529, 49153, 1530, 49167, 1529, 49177,
		1528, 49159, 1529, 49153, 1530, 49167, 1529, 49177, 1528, 49159, 1529, 49153, 1530, 49167, 1529, 49153, 823, 49153, 145,
		49176, 1528, 1532, 49176, 1529, 1532, 49157, 1529, 49176, 1528, 1532, 49176, 1529, 1532, 49157, 1529, 49176, 1528, 1532,
		49176, 1529, 1532, 49157, 1529, 49176, 1528, 1532, 49176, 1529, 1532, 49157, 1529, 49176, 1528, 1532, 49176, 1529, 1532,
		49157, 1529, 1533, 1534, 49153, 145, 49201, 1535, 49279, 1536, 49206, 1537, 49155, 1536, 49201, 1537, 49159, 1536, 1537,
		49165, 1536, 1537, 49153, 1536, 1538, 1539, 49153, 1538, 1540, 49166, 145, 49156, 1537, 145, 49166, 1537, 49231, 145, 49158,
		1541, 888, 49168, 1541, 49153, 888, 49158, 1541, 888, 49153, 1541, 888, 49156, 1541, 49156, 888, 49231, 145, 49348, 1542,
		49153, 145, 49160, 1543, 49158, 1544, 49192, 145, 49185, 1545, 49185, 1546, 49154, 1547, 1548, 49154, 1549, 49156, 1550,
		49161, 1551, 49155, 1550, 49153, 1552, 49183, 145, 49155, 1553, 256, 49178, 1553, 256, 49153, 1553, 256, 1553, 49153, 256,
		1553, 256, 49161, 1553, 256, 49155, 1553, 256, 1553, 256, 1553, 49157, 256, 1553, 49155, 65535, 3, 256, 1553, 256, 49154,
		1553, 256, 49153, 1553, 256, 1553, 49153, 65535, 5, 256, 1553, 256, 49153, 1553, 256, 1553, 49153, 256, 49155, 1553, 256,
		49158, 1553, 256, 49155, 1553, 256, 49155, 1553, 256, 1553, 256, 49161, 1553, 256, 49168, 1553, 49156, 256, 49154, 1553,
		256, 49156, 1553, 256, 49168, 1553, 49203, 256, 49153, 1554, 49165, 256, 49195, 832, 49155, 145, 49251, 832, 49163, 145,
		49166, 1555, 49153, 145, 49165, 1555, 1556, 145, 49166, 1555, 145, 49166, 1555, 49173, 1556, 49161, 145, 49162, 833, 49153,
		1557, 49154, 145, 49182, 980, 145, 1558, 1559, 49162, 1558, 1559, 1558, 1559, 49153, 1558, 1559, 49154, 1558, 1559, 49154,
		1558, 49156, 980, 1555, 49158, 1558, 1559, 49158, 1558, 1559, 49161, 1558, 49153, 1560, 49155, 145, 49160, 1558, 1559, 1558,
		49153, 1559, 49153, 1558, 1559, 49161, 1558, 49155, 980, 49153, 1555, 980, 49161, 1555, 49169, 1561, 49208, 145, 49177, 1562,
		1563, 49153, 1555, 49164, 145, 49185, 980, 49160, 1555, 1561, 49155, 145, 49160, 980, 49158, 145, 49153, 1555, 49165, 145,
		49157, 1564, 49177, 145, 49184, 1555, 49163, 1556, 49154, 838, 49157, 1555, 1556, 49221, 1555, 1556, 49153, 838, 49171, 1555,
		49163, 1556, 49188, 1555, 1556, 49156, 1555, 49155, 1556, 49156, 838, 49163, 1556, 49168, 1555, 49158, 1556, 49154, 838,
		49156, 1565, 49214, 1555, 1556, 1555, 1556, 49333, 1555, 1556, 49155, 1555, 49153, 1556, 838, 49213, 1555, 49153, 1556, 49155,
		1560, 49158, 1556, 49156, 838, 49175, 1555, 49169, 1556, 1561, 49192, 1556, 1561, 49237, 1556, 49156, 1555, 1566, 49167,
		1567, 1566, 49154, 65535, 4, 1567, 1566, 49154, 1567, 1566, 49157, 1567, 49153, 1566, 49155, 1567, 1566, 1567, 49153, 1566,
		49155, 1567, 1566, 49163, 1567, 49153, 1568, 49153, 1569, 49162, 1567, 49199, 1556, 49221, 1555, 49161, 1556, 838, 49153,
		1561, 49153, 1564, 49162, 145, 49164, 1556, 49154, 145, 49155, 1556, 49154, 1561, 49153, 1564, 49158, 145, 49267, 1555, 49163,
		145, 49236, 1556, 49194, 145, 49163, 1556, 49155, 145, 49207, 1556, 49159, 145, 49161, 1556, 49157, 145, 49191, 1556, 49159,
		145, 49181, 1556, 49233, 145, 49163, 1564, 49155, 145, 49160, 838, 49157, 1561, 1564, 49159, 1561, 49159, 1564, 1561, 49153,
		1564, 49163, 1561, 145, 49163, 1561, 1564, 49154, 145, 49166, 1561, 49164, 1564, 49171, 145, 49156, 838, 49164, 1561, 49157,
		1564, 49191, 145, 838, 49166, 145, 49174, 1564, 49302, 145, 49153, 1570, 49366, 1571, 49192, 145, 49332, 987, 49162, 145,
		49373, 1572, 49153, 145, 49409, 989, 49165, 145, 49456, 990, 49182, 145, 49309, 1573, 49249, 145, 1574, 1575, 49181, 1574,
		49247, 1576, 49279, 781, 49391, 1577, 49167, 781, 49405, 1578, 49153, 1570
	};

	static constexpr std::array<std::uint_least16_t, 1036> rleabfields =
	{
		49228, 1024, 49155, 4096, 6144, 7168, 49158, 8192, 49157, 9216, 49180, 1024, 4096, 49156, 1024, 49154, 4096, 7168, 49153,
		1024, 4096, 6144, 7168, 8192, 6144, 49153, 10240, 1024, 0, 1024, 9216, 1024, 16384, 49164, 1024, 10240, 49157, 1024, 4096,
		49153, 6144, 1024, 4096, 49157, 1024, 49153, 5120, 6144, 49154, 7168, 49153, 8192, 4105, 49154, 1033, 4105, 49158, 1033,
		10249, 4105, 49153, 6153, 49153, 4105, 1033, 9225, 49153, 8201, 49153, 9225, 49153, 10249, 49153, 11273, 49153, 12297, 49153,
		16393, 11, 49157, 1035, 4107, 16395, 13323, 12, 2060, 8204, 1036, 9228, 49154, 1036, 2060, 49153, 8204, 49153, 1036, 7181,
		13325, 16397, 49153, 10253, 8205, 1037, 49154, 7181, 10253, 15373, 13, 8205, 1037, 12301, 1037, 10253, 49153, 1037, 4109,
		49153, 7181, 8205, 12301, 49153, 1037, 6157, 1037, 4109, 49157, 1037, 7181, 4109, 49154, 4110, 14, 49154, 4110, 7182, 49153,
		4110, 8205, 49153, 4112, 6160, 16, 49160, 9233, 17, 49156, 11282, 18, 11282, 49153, 12307, 19, 12307, 19470, 13325, 16397,
		17421, 49155, 18445, 17421, 49153, 13325, 16397, 11286, 49153, 1046, 7190, 1046, 49153, 12310, 1046, 11286, 49155, 1046,
		49153, 10262, 12310, 16406, 11286, 9238, 8214, 16407, 49153, 1047, 23, 49153, 1047, 7191, 1047, 8215, 49155, 1047, 11287,
		49153, 19479, 24, 7192, 1048, 7192, 49154, 1048, 10264, 1048, 25, 49154, 1049, 7193, 1049, 7193, 1049, 13337, 7193, 17433,
		49153, 19481, 26, 49154, 1050, 7194, 49153, 1050, 10266, 49153, 1050, 12314, 27, 49153, 1051, 8219, 49154, 1051, 10267, 8219,
		49153, 1051, 49153, 7195, 16412, 1052, 28, 1052, 16412, 10268, 49153, 1052, 17436, 10268, 1052, 49153, 10268, 18461, 16413,
		1053, 29, 1053, 49153, 7197, 49154, 1053, 9245, 1053, 9245, 19486, 16414, 1054, 30, 1054, 12318, 19486, 10270, 49153, 1054,
		10270, 1054, 49154, 18462, 17438, 1054, 49153, 10270, 31, 49156, 4127, 16415, 4127, 32, 49161, 1056, 33, 49158, 1057, 13345,
		49161, 2082, 34, 4130, 10274, 49153, 2082, 49153, 12322, 49154, 4130, 10274, 8226, 10274, 11298, 12322, 4131, 49153, 10275,
		49153, 4131, 10275, 4131, 10275, 49154, 4131, 49154, 10275, 49154, 11299, 10275, 1060, 36, 13348, 1060, 6180, 8228, 1060,
		8228, 13348, 1024, 11264, 1024, 4134, 8230, 38, 12326, 49153, 8230, 49155, 4134, 8230, 49153, 4136, 17448, 40, 17448, 11264,
		49154, 4096, 11264, 49155, 4138, 42, 49154, 4139, 16427, 43, 6188, 44, 49153, 6188, 49155, 6189, 45, 49153, 6190, 46, 6191,
		47, 6191, 49160, 4144, 7216, 48, 4144, 7216, 49160, 4145, 49, 49156, 4145, 10289, 7219, 16435, 51, 49157, 7219, 7168, 8192,
		11264, 49153, 8192, 11264, 8192, 7216, 49154, 8247, 55, 8247, 49160, 11264, 49153, 16384, 49156, 9274, 58, 49156, 9274, 49155,
		10299, 49153, 13371, 10299, 13371, 49156, 12348, 60, 12348, 49156, 10301, 61, 49154, 10301, 49156, 10240, 49159, 18441, 9,
		13371, 59, 49156, 11264, 49154, 13312, 19456, 49156, 7168, 49158, 8192, 9216, 49153, 10240, 16384, 19456, 18432, 12288, 2048,
		49155, 10240, 49182, 1024, 4096, 49156, 1024, 6144, 49153, 4096, 49153, 6144, 49153, 7168, 8192, 49154, 6144, 10240, 0, 15360,
		6144, 49156, 1024, 12288, 1024, 2048, 3072, 4096, 6144, 8192, 11264, 12288, 14336, 16384, 17408, 19456, 49153, 1024, 4096,
		49153, 6144, 8192, 9216, 49162, 1024, 49153, 4096, 7168, 8192, 49156, 6144, 8192, 49153, 9216, 10240, 11264, 49154, 1024,
		10240, 17408, 49154, 1101, 4173, 6221, 1024, 4096, 49153, 1024, 49153, 6144, 49153, 7168, 8192, 49154, 9216, 11264, 12288,
		16384, 18432, 19456, 0, 49153, 1024, 6144, 7168, 1024, 10240, 16471, 1111, 12375, 11351, 49153, 6231, 1111, 49154, 8192,
		13312, 10240, 12288, 49153, 6144, 49153, 10240, 4096, 17408, 8287, 95, 8287, 49156, 9216, 49154, 10240, 11264, 9216, 49153,
		10240, 11264, 49155, 8289, 49154, 11361, 49153, 13409, 97, 49153, 8289, 8228, 13348, 8291, 13411, 99, 8291, 49153, 12387,
		10249, 49154, 8192, 49159, 10240, 11264, 49153, 13312, 49156, 16384, 18432, 19456, 49153, 4096, 49158, 1024, 4096, 49154,
		6144, 107, 1131, 6251, 49154, 1131, 6252, 49155, 1132, 6252, 109, 1133, 10349, 19565, 49153, 1135, 4205, 12397, 1024, 7168,
		11264, 8192, 1024, 4096, 1024, 8192, 10240, 11264, 13312, 17408, 19456, 49154, 4096, 6144, 49155, 11386, 49156, 10363, 123,
		49154, 10249, 13321, 10249, 16393, 17417, 49157, 11389, 125, 8192, 9216, 10240, 9216, 49153, 10240, 49153, 12288, 17408,
		49153, 12288, 49153, 13312, 49154, 16384, 13312, 49154, 16384, 18432, 49153, 16384, 49155, 17408, 16384, 13312, 10240, 49156,
		8192, 49154, 9346, 130, 49154, 10371, 18563, 131, 49153, 10371, 49153, 11286, 49153, 17430, 22, 49157, 10240, 49155, 10374,
		134, 10374, 49159, 11400, 136, 49153, 11400, 49155, 16419, 35, 49154, 10378, 138, 49154, 10378, 49154, 11299, 16419, 49159,
		11264, 49157, 13312, 12326, 49154, 16384, 17408, 16384, 17448, 49158, 11264, 49153, 2048, 49153, 1024, 13312, 6144, 11264,
		8192, 1024, 4096, 49154, 1024, 12301, 49154, 1037, 5133, 6157, 6144, 49155, 8192, 17408, 49157, 1024, 49153, 7168, 49156,
		1024, 1037, 49157, 1024, 49153, 6144, 49153, 1024, 162, 4258, 3234, 49153, 1186, 49153, 7168, 49154, 8192, 49153, 16384,
		18432, 10409, 169, 10410, 170, 49153, 16481, 5120, 16384, 5120, 19456, 49153, 5293, 173, 49153, 16384, 7343, 175, 7343, 49154,
		8192, 5297, 7345, 5297, 7345, 7346, 7347, 179, 7347, 18612, 180, 18612, 16565, 181, 49154, 16384, 7168, 49154, 11264, 49154,
		16570, 16571, 187, 16571, 17596, 188, 17596, 49153, 9405, 11453, 189, 9405, 10430, 190, 10430, 49153, 13312, 17408, 49153,
		8385, 193, 49155, 8385, 49154, 11264, 49153, 16384, 49154, 16580, 196, 49154, 16580, 11461, 197, 49153, 11461, 49155, 11264,
		49154, 16384, 11264, 49154, 17408, 11264, 49157, 12492, 204, 49153, 12492, 16588, 49159, 11469, 205, 49153, 13312, 49155,
		13519, 207, 49154, 13519, 49154, 16592, 208, 49157, 13521, 49153, 17617, 16593, 209, 13521, 16593, 49153, 17617, 16415, 16595,
		211, 49158, 16595, 18643, 17620, 212, 17620, 49155, 16597, 213, 16597, 17622, 49153, 16598, 214, 49155, 16598, 17622, 16598,
		49159, 18647, 215, 49157, 16600, 216, 16600, 49155, 16601, 217, 49156, 16601, 49154, 17625, 49157, 16602, 218, 16602, 18481,
		49156, 13532, 220, 13532, 17629, 221, 49158, 17629, 49156, 16384, 49158, 19456, 49154, 19680, 224, 49156, 19680, 16384, 18658,
		226, 49159, 18658, 49154, 18659, 227, 49153, 18659, 49155, 19456, 9445, 16613, 17637, 229, 9445, 16613, 9445, 16613, 17408,
		11264, 17408, 12413, 16619, 235, 49153, 16619, 49164, 16384, 13550, 238, 49154, 13550, 18432, 19456, 18672, 240, 49153, 12288,
		19456, 19700, 244, 16629, 245, 49155, 16629, 16384, 49158, 5120, 8192, 9216, 49154, 5120, 7168, 5120, 49153, 9216, 5120,
		49156, 17408, 18527, 49154, 16384, 49156, 18688, 256, 49153, 18688, 49153, 13325, 12288, 49153, 16384, 12288, 11264, 13312,
		18432, 12288, 11264, 19456, 17408, 13576, 12552, 16648, 17672, 2048, 5120, 12288, 5120, 277, 49153, 5397, 7168, 2048
	};

	static constexpr std::array<std::uint_least8_t, 12632> flyweights =
	{
		0, 0, 25, 1, 0, 0, 0, 0, 1, 1, 25, 1, 0, 0, 0, 0, 2, 2, 25, 1, 0, 0, 0, 0, 3, 3, 24, 1, 0, 0, 0, 0, 4, 4, 16, 1, 0, 0, 0,
		0, 5, 4, 16, 1, 0, 0, 0, 0, 6, 4, 16, 1, 0, 0, 0, 0, 6, 5, 18, 1, 0, 0, 0, 0, 7, 4, 16, 1, 0, 0, 0, 0, 6, 4, 17, 1, 0, 0,
		0, 0, 6, 4, 13, 1, 0, 0, 0, 0, 8, 5, 20, 1, 0, 0, 0, 0, 9, 4, 16, 1, 0, 0, 0, 0, 10, 4, 12, 1, 0, 0, 0, 0, 11, 4, 16, 1,
		0, 0, 0, 0, 12, 6, 8, 1, 0, 0, 0, 0, 13, 4, 16, 1, 0, 0, 0, 0, 14, 7, 4, 34, 0, 1, 1, 0, 15, 8, 4, 34, 0, 1, 1, 0, 16, 5,
		19, 1, 0, 0, 0, 0, 17, 9, 11, 1, 0, 0, 0, 0, 18, 5, 19, 1, 0, 0, 0, 0, 19, 10, 0, 34, 0, 0, 0, 2, 20, 11, 0, 34, 0, 0, 0,
		2, 21, 11, 0, 34, 0, 0, 0, 2, 22, 0, 25, 1, 0, 0, 0, 0, 23, 2, 25, 1, 0, 0, 0, 0, 24, 3, 24, 1, 0, 0, 0, 0, 25, 4, 16, 1,
		0, 0, 0, 0, 25, 5, 18, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 26, 5, 19, 1, 0, 0, 0, 0, 27, 11, 2, 34, 0, 0, 0, 0, 28,
		4, 15, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 32, 11, 0, 1, 0, 3, 0,
		4, 33, 4, 16, 1, 0, 0, 0, 0, 28, 4, 14, 1, 0, 0, 0, 0, 34, 8, 4, 34, 0, 1, 1, 0, 32, 11, 0, 34, 0, 0, 0, 5, 35, 11, 0, 34,
		0, 0, 0, 2, 35, 11, 0, 34, 0, 0, 0, 6, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 36, 11, 0, 34, 0, 0, 0, 8, 34,
		8, 4, 34, 0, 0, 0, 0, 35, 11, 0, 34, 0, 0, 0, 0, 37, 11, 0, 34, 0, 0, 0, 0, 32, 11, 0, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 9,
		9, 0, 32, 11, 0, 34, 0, 10, 0, 11, 35, 11, 0, 34, 0, 0, 0, 12, 34, 8, 4, 34, 0, 13, 13, 0, 34, 8, 4, 34, 0, 14, 14, 0, 34,
		8, 4, 34, 0, 15, 15, 0, 34, 8, 4, 34, 0, 16, 16, 0, 34, 8, 4, 34, 0, 17, 17, 0, 34, 8, 4, 34, 0, 18, 18, 0, 34, 8, 4, 34,
		0, 19, 19, 0, 35, 11, 0, 34, 0, 0, 0, 20, 34, 8, 4, 34, 0, 21, 21, 0, 34, 8, 4, 34, 0, 22, 22, 0, 35, 11, 0, 34, 0, 0, 0,
		23, 34, 8, 4, 34, 0, 24, 24, 0, 35, 11, 0, 34, 0, 0, 0, 25, 34, 8, 4, 34, 0, 26, 26, 0, 34, 8, 4, 34, 0, 27, 27, 0, 34, 8,
		4, 34, 0, 28, 28, 0, 34, 8, 4, 34, 0, 29, 29, 0, 38, 12, 2, 34, 0, 0, 0, 0, 35, 11, 0, 34, 0, 0, 0, 30, 39, 8, 4, 34, 0,
		31, 31, 0, 40, 12, 3, 34, 0, 7, 7, 8, 35, 11, 0, 34, 0, 0, 0, 32, 35, 11, 0, 34, 0, 0, 0, 33, 34, 8, 4, 34, 0, 34, 34, 0,
		34, 8, 4, 34, 0, 35, 35, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 34, 8, 4, 34, 0, 36, 36, 0, 37, 11, 0, 34,
		0, 0, 0, 0, 37, 11, 0, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 37, 37, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 34,
		8, 4, 34, 0, 38, 38, 0, 34, 8, 4, 34, 0, 39, 39, 0, 35, 11, 0, 34, 0, 0, 0, 40, 35, 11, 0, 34, 0, 0, 0, 8, 34, 8, 4, 34,
		0, 41, 41, 0, 34, 8, 4, 34, 0, 42, 42, 0, 34, 8, 4, 34, 0, 43, 43, 0, 34, 8, 4, 34, 0, 7, 7, 0, 36, 11, 0, 34, 0, 0, 0, 8,
		35, 11, 0, 34, 0, 0, 0, 44, 35, 11, 0, 34, 0, 0, 0, 45, 35, 11, 0, 34, 0, 0, 0, 46, 35, 11, 0, 34, 0, 0, 0, 47, 35, 11, 0,
		34, 0, 0, 0, 48, 35, 11, 0, 34, 0, 0, 0, 49, 35, 11, 0, 34, 0, 0, 0, 50, 35, 11, 0, 34, 0, 0, 0, 51, 35, 11, 0, 34, 0, 0,
		0, 52, 35, 11, 0, 34, 0, 0, 0, 53, 35, 11, 0, 34, 0, 0, 0, 54, 35, 11, 0, 34, 0, 0, 0, 55, 35, 11, 0, 34, 0, 0, 0, 56, 36,
		11, 0, 34, 0, 0, 0, 57, 35, 11, 0, 34, 0, 0, 0, 58, 35, 11, 0, 34, 0, 0, 0, 59, 35, 11, 0, 34, 0, 0, 0, 60, 35, 11, 0, 34,
		0, 0, 0, 61, 35, 11, 0, 34, 0, 0, 0, 62, 35, 11, 0, 34, 0, 0, 0, 63, 35, 11, 0, 34, 0, 0, 0, 64, 35, 11, 0, 34, 0, 0, 0,
		65, 35, 11, 0, 34, 0, 0, 0, 66, 35, 11, 0, 34, 0, 0, 0, 67, 35, 11, 0, 34, 0, 0, 0, 68, 35, 11, 0, 34, 0, 0, 0, 69, 35, 11,
		0, 34, 0, 0, 0, 70, 36, 11, 0, 34, 0, 0, 0, 71, 35, 11, 0, 34, 0, 0, 0, 72, 37, 11, 0, 34, 0, 0, 0, 0, 41, 11, 1, 34, 0,
		0, 0, 0, 42, 11, 1, 34, 0, 0, 0, 0, 43, 12, 1, 1, 0, 0, 0, 0, 41, 11, 1, 1, 0, 0, 0, 0, 44, 12, 1, 1, 0, 0, 0, 0, 26, 5,
		19, 1, 0, 0, 0, 0, 26, 5, 19, 6, 0, 0, 0, 0, 43, 12, 1, 1, 0, 0, 0, 0, 26, 5, 19, 1, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0,
		46, 11, 7, 2, 0, 73, 0, 74, 45, 13, 7, 2, 0, 0, 0, 0, 47, 13, 7, 2, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 48, 13, 7, 2, 0,
		0, 0, 0, 48, 13, 7, 2, 0, 0, 0, 0, 34, 8, 4, 21, 0, 7, 7, 0, 35, 11, 0, 21, 0, 0, 0, 8, 26, 5, 19, 21, 0, 0, 0, 0, 49, 14,
		27, 0, 0, 0, 0, 0, 50, 11, 1, 21, 0, 0, 0, 0, 35, 11, 0, 21, 0, 0, 0, 25, 51, 4, 16, 1, 0, 0, 0, 0, 34, 8, 4, 21, 0, 73,
		73, 0, 34, 8, 4, 21, 0, 75, 75, 0, 52, 4, 16, 1, 0, 0, 0, 0, 34, 8, 4, 21, 0, 76, 76, 0, 34, 8, 4, 21, 0, 77, 77, 0, 34,
		8, 4, 21, 0, 78, 78, 0, 35, 11, 0, 21, 0, 0, 0, 0, 34, 8, 4, 21, 0, 1, 1, 0, 35, 11, 0, 21, 0, 0, 0, 79, 35, 11, 0, 21, 0,
		0, 0, 80, 35, 11, 0, 21, 0, 0, 0, 2, 32, 11, 0, 21, 0, 7, 0, 81, 35, 11, 0, 21, 0, 0, 0, 82, 35, 11, 0, 21, 0, 0, 0, 83,
		34, 8, 4, 21, 0, 84, 84, 0, 53, 11, 0, 21, 0, 85, 0, 86, 53, 11, 0, 21, 0, 87, 0, 88, 54, 8, 4, 21, 0, 0, 0, 0, 55, 8, 4,
		21, 0, 0, 0, 0, 53, 11, 0, 21, 0, 89, 0, 90, 32, 11, 0, 21, 0, 91, 0, 92, 35, 11, 0, 21, 0, 0, 0, 93, 34, 8, 4, 21, 0, 7,
		7, 0, 35, 11, 0, 21, 0, 0, 0, 8, 34, 8, 4, 21, 0, 7, 7, 0, 35, 11, 0, 21, 0, 0, 0, 8, 34, 8, 4, 12, 0, 7, 7, 0, 35, 11, 0,
		12, 0, 0, 0, 8, 53, 11, 0, 21, 0, 92, 0, 94, 53, 11, 0, 21, 0, 95, 0, 96, 35, 11, 0, 21, 0, 0, 0, 97, 36, 11, 0, 21, 0, 0,
		0, 98, 56, 8, 4, 21, 0, 99, 99, 0, 53, 11, 0, 21, 0, 82, 0, 100, 57, 5, 20, 21, 0, 0, 0, 0, 34, 8, 4, 21, 0, 7, 7, 0, 35,
		11, 0, 21, 0, 0, 0, 8, 34, 8, 4, 21, 0, 101, 101, 0, 37, 11, 0, 21, 0, 0, 0, 0, 34, 8, 4, 21, 0, 36, 36, 0, 34, 8, 4, 14,
		0, 102, 102, 0, 34, 8, 4, 14, 0, 102, 102, 0, 34, 8, 4, 14, 0, 1, 1, 0, 35, 11, 0, 14, 0, 0, 0, 2, 35, 11, 0, 14, 0, 0, 0,
		96, 35, 11, 0, 14, 0, 0, 0, 96, 36, 11, 0, 14, 0, 0, 0, 96, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 31, 5, 21,
		14, 0, 0, 0, 0, 45, 13, 7, 14, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 45, 13, 7, 14, 0, 0, 0, 0, 58, 13, 6, 14, 0, 0, 0, 0,
		34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0,
		103, 103, 0, 35, 11, 0, 14, 0, 0, 0, 89, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35,
		11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0,
		0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 34, 8, 4, 14, 0, 7, 7, 0, 35, 11, 0, 14, 0, 0, 0, 8, 49, 14, 27,
		0, 0, 0, 0, 0, 34, 8, 4, 4, 0, 104, 104, 0, 43, 12, 1, 4, 0, 0, 0, 0, 31, 4, 16, 4, 0, 0, 0, 0, 35, 11, 0, 4, 0, 0, 0, 95,
		32, 11, 0, 4, 0, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 0, 60, 4, 12, 4, 0, 0, 0, 0, 31, 5, 21, 4, 0, 0, 0, 0, 31, 5, 18, 4, 0,
		0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 45, 13, 7, 27, 0, 0, 0, 0, 48, 13, 7, 27, 0, 0, 0, 0, 61, 12, 7, 27, 0, 0, 0, 0, 61,
		12, 7, 27, 0, 0, 0, 0, 60, 4, 12, 27, 0, 0, 0, 0, 31, 4, 16, 27, 0, 0, 0, 0, 51, 4, 16, 27, 0, 0, 0, 0, 61, 12, 7, 27, 0,
		0, 0, 0, 62, 12, 7, 27, 0, 0, 0, 0, 31, 4, 16, 27, 0, 0, 0, 0, 38, 12, 2, 27, 0, 0, 0, 0, 63, 4, 16, 27, 0, 0, 0, 0, 64,
		5, 26, 3, 0, 0, 0, 0, 64, 5, 26, 3, 0, 0, 0, 0, 64, 5, 26, 1, 0, 0, 0, 0, 57, 5, 20, 3, 0, 0, 0, 0, 31, 4, 16, 3, 0, 0, 0,
		0, 31, 5, 18, 3, 0, 0, 0, 0, 51, 4, 16, 1, 0, 0, 0, 0, 31, 4, 16, 3, 0, 0, 0, 0, 31, 5, 21, 3, 0, 0, 0, 0, 62, 12, 7, 3,
		0, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 0, 65, 5, 26, 3, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 4, 16, 3, 0, 0, 0, 0, 59,
		4, 16, 1, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 66, 12, 1, 1, 0, 0, 0,
		0, 61, 12, 7, 2, 0, 0, 0, 0, 62, 12, 7, 2, 0, 0, 0, 0, 61, 12, 7, 3, 0, 0, 0, 0, 45, 13, 7, 3, 0, 0, 0, 0, 62, 12, 7, 3,
		0, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 0, 67, 6, 8, 3, 0, 0, 0, 0, 31, 4, 16, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 62, 12,
		7, 2, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 59, 4, 16, 3, 0, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 0, 64, 5, 26, 1, 0, 0, 0, 0,
		31, 5, 21, 3, 0, 0, 0, 0, 45, 13, 7, 3, 0, 0, 0, 0, 43, 12, 1, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 31, 5, 21, 3, 0,
		0, 0, 0, 59, 4, 16, 50, 0, 0, 0, 0, 51, 4, 16, 50, 0, 0, 0, 0, 31, 4, 16, 50, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 64,
		5, 26, 50, 0, 0, 0, 0, 38, 12, 2, 50, 0, 0, 0, 0, 62, 12, 7, 50, 0, 0, 0, 0, 38, 12, 2, 50, 0, 0, 0, 0, 61, 12, 7, 50, 0,
		0, 0, 0, 45, 13, 7, 50, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 56, 0, 0, 0, 0, 61, 12, 7, 56, 0, 0, 0, 0, 38, 12,
		2, 56, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 64, 0, 0, 0, 0, 38, 12, 2, 64, 0, 0, 0, 0, 45, 13, 7, 64, 0, 0, 0,
		0, 43, 12, 1, 64, 0, 0, 0, 0, 31, 5, 21, 64, 0, 0, 0, 0, 31, 4, 16, 64, 0, 0, 0, 0, 51, 4, 16, 64, 0, 0, 0, 0, 59, 4, 16,
		64, 0, 0, 0, 0, 66, 12, 1, 64, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 90, 0, 0, 0, 0, 62, 12, 7, 90, 0, 0, 0,
		0, 45, 13, 7, 90, 0, 0, 0, 0, 68, 12, 1, 90, 0, 0, 0, 0, 48, 13, 7, 90, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 51, 4, 16,
		90, 0, 0, 0, 0, 38, 12, 2, 95, 0, 0, 0, 0, 48, 13, 7, 95, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 51, 4, 16, 95, 0, 0, 0,
		0, 38, 12, 2, 50, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 0, 38, 12, 2, 3,
		0, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 0, 48, 13, 7, 3, 0, 0, 0, 0, 64, 5, 26, 1, 0, 0, 0, 0, 61, 12, 7, 3, 0, 0, 0, 0, 61, 12,
		7, 3, 0, 0, 0, 0, 45, 13, 7, 3, 0, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 0, 62, 12, 7, 16, 0, 0, 0, 0, 62, 12, 7, 16, 0, 0, 0,
		0, 69, 12, 5, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 62, 12, 7, 16, 0, 0, 0, 0, 69, 12, 5,
		16, 0, 0, 0, 0, 45, 13, 7, 16, 0, 0, 0, 0, 69, 12, 5, 16, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 0,
		67, 6, 8, 16, 0, 0, 0, 0, 31, 4, 16, 16, 0, 0, 0, 0, 43, 12, 1, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38, 12, 2, 16,
		0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 38,
		12, 2, 5, 0, 0, 0, 0, 62, 12, 7, 5, 0, 0, 0, 0, 69, 12, 5, 5, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 5, 0, 0,
		0, 0, 45, 13, 7, 5, 0, 0, 0, 0, 38, 12, 2, 5, 0, 0, 0, 0, 70, 12, 5, 5, 0, 0, 0, 0, 38, 12, 2, 5, 0, 0, 0, 0, 67, 6, 8, 5,
		0, 0, 0, 0, 31, 5, 18, 5, 0, 0, 0, 0, 31, 5, 10, 5, 0, 0, 0, 0, 31, 5, 21, 5, 0, 0, 0, 0, 31, 5, 18, 5, 0, 0, 0, 0, 38, 12,
		2, 5, 0, 0, 0, 0, 31, 4, 16, 5, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 23, 0, 0, 0, 0, 62, 12, 7, 23, 0, 0, 0,
		0, 69, 12, 5, 23, 0, 0, 0, 0, 38, 12, 2, 23, 0, 0, 0, 0, 45, 13, 7, 23, 0, 0, 0, 0, 69, 12, 5, 23, 0, 0, 0, 0, 62, 12, 7,
		23, 0, 0, 0, 0, 67, 6, 8, 23, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 22, 0, 0, 0, 0, 69, 12, 5, 22, 0, 0, 0, 0,
		38, 12, 2, 22, 0, 0, 0, 0, 38, 12, 2, 22, 0, 0, 0, 0, 45, 13, 7, 22, 0, 0, 0, 0, 62, 12, 7, 22, 0, 0, 0, 0, 67, 6, 8, 22,
		0, 0, 0, 0, 31, 4, 16, 22, 0, 0, 0, 0, 31, 5, 18, 22, 0, 0, 0, 0, 38, 12, 2, 22, 0, 0, 0, 0, 62, 12, 7, 22, 0, 0, 0, 0, 45,
		13, 7, 22, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 44, 0, 0, 0, 0, 69, 12, 5, 44, 0, 0, 0, 0, 38, 12, 2, 44, 0,
		0, 0, 0, 38, 12, 2, 44, 0, 0, 0, 0, 45, 13, 7, 44, 0, 0, 0, 0, 70, 12, 5, 44, 0, 0, 0, 0, 62, 12, 7, 44, 0, 0, 0, 0, 67,
		6, 8, 44, 0, 0, 0, 0, 31, 5, 21, 44, 0, 0, 0, 0, 31, 5, 10, 44, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 54, 0,
		0, 0, 0, 38, 12, 2, 54, 0, 0, 0, 0, 38, 12, 2, 54, 0, 0, 0, 0, 70, 12, 5, 54, 0, 0, 0, 0, 69, 12, 5, 54, 0, 0, 0, 0, 45,
		13, 7, 54, 0, 0, 0, 0, 38, 12, 2, 54, 0, 0, 0, 0, 67, 6, 8, 54, 0, 0, 0, 0, 67, 6, 8, 54, 0, 0, 0, 0, 31, 5, 10, 54, 0, 0,
		0, 0, 31, 5, 21, 54, 0, 0, 0, 0, 31, 5, 18, 54, 0, 0, 0, 0, 62, 12, 7, 55, 0, 0, 0, 0, 69, 12, 5, 55, 0, 0, 0, 0, 49, 14,
		27, 0, 0, 0, 0, 0, 38, 12, 2, 55, 0, 0, 0, 0, 38, 12, 2, 55, 0, 0, 0, 0, 38, 12, 2, 55, 0, 0, 0, 0, 62, 12, 7, 55, 0, 0,
		0, 0, 45, 13, 7, 55, 0, 0, 0, 0, 38, 12, 2, 55, 0, 0, 0, 0, 62, 12, 7, 55, 0, 0, 0, 0, 67, 6, 8, 55, 0, 0, 0, 0, 31, 5, 10,
		55, 0, 0, 0, 0, 31, 5, 21, 55, 0, 0, 0, 0, 38, 12, 2, 29, 0, 0, 0, 0, 62, 12, 7, 29, 0, 0, 0, 0, 69, 12, 5, 29, 0, 0, 0,
		0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 29, 0, 0, 0, 0, 45, 13, 7, 29, 0, 0, 0, 0, 38, 12, 2, 29, 0, 0, 0, 0, 62, 12, 7,
		29, 0, 0, 0, 0, 70, 12, 5, 29, 0, 0, 0, 0, 45, 13, 7, 29, 0, 0, 0, 0, 62, 12, 7, 29, 0, 0, 0, 0, 67, 6, 8, 29, 0, 0, 0, 0,
		38, 12, 2, 29, 0, 0, 0, 0, 62, 12, 7, 37, 0, 0, 0, 0, 62, 12, 7, 37, 0, 0, 0, 0, 69, 12, 5, 37, 0, 0, 0, 0, 49, 14, 27, 0,
		0, 0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 0, 45, 13, 7, 37, 0, 0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 0, 70,
		12, 5, 37, 0, 0, 0, 0, 62, 12, 7, 37, 0, 0, 0, 0, 62, 12, 7, 37, 0, 0, 0, 0, 45, 13, 7, 37, 0, 0, 0, 0, 31, 5, 21, 37, 0,
		0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 0, 31, 5, 10, 37, 0, 0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 0, 67, 6, 8, 37, 0, 0, 0, 0, 31, 5,
		10, 37, 0, 0, 0, 0, 31, 5, 21, 37, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 69, 12, 5, 48, 0, 0, 0, 0, 38, 12, 2, 48, 0, 0,
		0, 0, 45, 13, 7, 48, 0, 0, 0, 0, 70, 12, 5, 48, 0, 0, 0, 0, 62, 12, 7, 48, 0, 0, 0, 0, 67, 6, 8, 48, 0, 0, 0, 0, 31, 4, 16,
		48, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 57, 0, 0, 0, 0, 62, 12, 7, 57, 0, 0, 0, 0, 71, 12, 2, 57, 0, 0, 0,
		0, 31, 5, 18, 1, 0, 0, 0, 0, 72, 12, 2, 57, 0, 0, 0, 0, 66, 12, 1, 57, 0, 0, 0, 0, 45, 13, 7, 57, 0, 0, 0, 0, 31, 4, 16,
		57, 0, 0, 0, 0, 67, 6, 8, 57, 0, 0, 0, 0, 51, 4, 16, 57, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 33, 0, 0, 0, 0,
		62, 12, 7, 33, 0, 0, 0, 0, 71, 12, 2, 33, 0, 0, 0, 0, 72, 12, 2, 33, 0, 0, 0, 0, 66, 12, 1, 33, 0, 0, 0, 0, 45, 13, 7, 33,
		0, 0, 0, 0, 67, 6, 8, 33, 0, 0, 0, 0, 38, 12, 2, 33, 0, 0, 0, 0, 38, 12, 2, 58, 0, 0, 0, 0, 31, 5, 21, 58, 0, 0, 0, 0, 31,
		4, 16, 58, 0, 0, 0, 0, 51, 4, 16, 58, 0, 0, 0, 0, 45, 13, 7, 58, 0, 0, 0, 0, 67, 6, 8, 58, 0, 0, 0, 0, 31, 5, 10, 58, 0,
		0, 0, 0, 31, 4, 17, 58, 0, 0, 0, 0, 31, 4, 13, 58, 0, 0, 0, 0, 73, 13, 5, 58, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38,
		12, 2, 58, 0, 0, 0, 0, 38, 12, 2, 58, 0, 0, 0, 0, 62, 12, 7, 58, 0, 0, 0, 0, 69, 12, 5, 58, 0, 0, 0, 0, 38, 12, 2, 58, 0,
		0, 0, 0, 62, 12, 7, 58, 0, 0, 0, 0, 62, 12, 7, 58, 0, 0, 0, 0, 31, 5, 21, 58, 0, 0, 0, 0, 45, 13, 7, 58, 0, 0, 0, 0, 31,
		5, 21, 58, 0, 0, 0, 0, 31, 4, 16, 58, 0, 0, 0, 0, 31, 4, 16, 58, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 4, 16, 58, 0,
		0, 0, 0, 38, 12, 2, 39, 0, 0, 0, 0, 38, 12, 2, 39, 0, 0, 0, 0, 69, 12, 5, 39, 0, 0, 0, 0, 69, 12, 5, 39, 0, 0, 0, 0, 62,
		12, 7, 39, 0, 0, 0, 0, 62, 12, 7, 39, 0, 0, 0, 0, 45, 13, 7, 39, 0, 0, 0, 0, 45, 13, 7, 39, 0, 0, 0, 0, 67, 6, 8, 39, 0,
		0, 0, 0, 59, 4, 16, 39, 0, 0, 0, 0, 31, 4, 16, 39, 0, 0, 0, 0, 67, 13, 5, 39, 0, 0, 0, 0, 73, 13, 5, 39, 0, 0, 0, 0, 67,
		6, 8, 39, 0, 0, 0, 0, 73, 13, 5, 39, 0, 0, 0, 0, 69, 12, 5, 39, 0, 0, 0, 0, 62, 12, 7, 39, 0, 0, 0, 0, 31, 5, 21, 39, 0,
		0, 0, 0, 34, 8, 4, 18, 0, 105, 105, 0, 49, 14, 27, 0, 0, 0, 0, 0, 34, 8, 4, 18, 0, 105, 105, 0, 38, 12, 2, 18, 0, 0, 0, 0,
		38, 12, 2, 18, 0, 0, 0, 0, 38, 12, 2, 18, 0, 0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 0, 68, 12, 1, 18, 0, 0, 0, 0, 38, 12, 2, 18,
		0, 0, 0, 0, 38, 12, 2, 25, 0, 0, 0, 0, 38, 12, 2, 25, 0, 0, 0, 0, 74, 12, 2, 25, 0, 0, 0, 0, 38, 12, 2, 17, 0, 0, 0, 0, 38,
		12, 2, 17, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 48, 13, 7, 17, 0, 0, 0, 0, 62, 12, 7, 17, 0, 0, 0, 0, 31, 4, 16, 17, 0,
		0, 0, 0, 51, 4, 16, 17, 0, 0, 0, 0, 59, 4, 16, 17, 0, 0, 0, 0, 75, 5, 10, 17, 0, 0, 0, 0, 31, 5, 10, 17, 0, 0, 0, 0, 31,
		5, 21, 17, 0, 0, 0, 0, 76, 8, 4, 11, 0, 0, 106, 0, 76, 8, 4, 11, 0, 0, 84, 0, 76, 8, 4, 11, 0, 0, 84, 0, 49, 14, 27, 0, 0,
		0, 0, 0, 32, 11, 0, 11, 0, 93, 0, 93, 60, 4, 12, 10, 0, 0, 0, 0, 38, 12, 2, 10, 0, 0, 0, 0, 51, 4, 16, 10, 0, 0, 0, 0, 59,
		4, 16, 10, 0, 0, 0, 0, 38, 12, 2, 10, 0, 0, 0, 0, 24, 3, 24, 41, 0, 0, 0, 0, 38, 12, 2, 41, 0, 0, 0, 0, 31, 4, 17, 41, 0,
		0, 0, 0, 31, 4, 13, 41, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 46, 0, 0, 0, 0, 51, 4, 16, 1, 0, 0, 0, 0, 38, 12,
		9, 46, 0, 0, 0, 0, 38, 12, 2, 46, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 51, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0,
		0, 0, 62, 12, 7, 51, 0, 0, 0, 0, 48, 13, 7, 51, 0, 0, 0, 0, 38, 12, 2, 26, 0, 0, 0, 0, 62, 12, 7, 26, 0, 0, 0, 0, 48, 13,
		7, 26, 0, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 9, 0, 0, 0, 0, 62, 12, 7, 9, 0, 0, 0,
		0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 52, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 52, 0, 0, 0, 0, 38, 12, 2,
		32, 0, 0, 0, 0, 47, 13, 7, 32, 0, 0, 0, 0, 69, 12, 5, 32, 0, 0, 0, 0, 62, 12, 7, 32, 0, 0, 0, 0, 45, 13, 7, 32, 0, 0, 0,
		0, 51, 4, 16, 32, 0, 0, 0, 0, 68, 12, 1, 32, 0, 0, 0, 0, 31, 4, 16, 32, 0, 0, 0, 0, 31, 5, 18, 32, 0, 0, 0, 0, 45, 13, 7,
		32, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 32, 0, 0, 0, 0, 31, 5, 10, 32, 0, 0, 0, 0, 31, 4, 16, 38, 0, 0, 0, 0,
		51, 4, 16, 1, 0, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 0, 51, 4, 16, 38, 0, 0, 0, 0, 60, 4, 12, 38, 0, 0, 0, 0, 59, 4, 16, 38,
		0, 0, 0, 0, 77, 4, 16, 38, 0, 0, 0, 0, 78, 13, 7, 38, 0, 0, 0, 0, 30, 5, 26, 38, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67,
		6, 8, 38, 0, 0, 0, 0, 38, 12, 2, 38, 0, 0, 0, 0, 66, 12, 1, 38, 0, 0, 0, 0, 79, 12, 7, 38, 0, 0, 0, 0, 62, 12, 7, 38, 0,
		0, 0, 0, 38, 12, 2, 38, 0, 0, 0, 0, 38, 12, 2, 35, 0, 0, 0, 0, 38, 12, 2, 35, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62,
		12, 7, 35, 0, 0, 0, 0, 69, 12, 5, 35, 0, 0, 0, 0, 45, 13, 7, 35, 0, 0, 0, 0, 31, 5, 21, 35, 0, 0, 0, 0, 59, 4, 16, 35, 0,
		0, 0, 0, 67, 6, 8, 35, 0, 0, 0, 0, 38, 12, 2, 53, 0, 0, 0, 0, 38, 12, 2, 40, 0, 0, 0, 0, 38, 12, 2, 40, 0, 0, 0, 0, 72, 12,
		2, 40, 0, 0, 0, 0, 67, 6, 8, 40, 0, 0, 0, 0, 75, 5, 10, 40, 0, 0, 0, 0, 31, 5, 21, 40, 0, 0, 0, 0, 31, 5, 21, 32, 0, 0, 0,
		0, 38, 12, 2, 8, 0, 0, 0, 0, 62, 12, 7, 8, 0, 0, 0, 0, 69, 12, 5, 8, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 4, 16, 8,
		0, 0, 0, 0, 38, 12, 2, 91, 0, 0, 0, 0, 69, 12, 5, 91, 0, 0, 0, 0, 62, 12, 7, 91, 0, 0, 0, 0, 48, 13, 7, 91, 0, 0, 0, 0, 45,
		13, 7, 91, 0, 0, 0, 0, 67, 6, 8, 91, 0, 0, 0, 0, 31, 4, 16, 91, 0, 0, 0, 0, 66, 12, 1, 91, 0, 0, 0, 0, 59, 4, 16, 91, 0,
		0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 58, 13, 6, 2, 0, 0, 0, 0, 62, 12, 7, 62, 0, 0, 0, 0, 69, 12, 5, 62, 0, 0, 0, 0, 38, 12,
		2, 62, 0, 0, 0, 0, 45, 13, 7, 62, 0, 0, 0, 0, 73, 13, 5, 62, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 62, 0, 0, 0,
		0, 59, 4, 16, 62, 0, 0, 0, 0, 31, 4, 16, 62, 0, 0, 0, 0, 51, 4, 16, 62, 0, 0, 0, 0, 31, 5, 21, 62, 0, 0, 0, 0, 62, 12, 7,
		76, 0, 0, 0, 0, 69, 12, 5, 76, 0, 0, 0, 0, 38, 12, 2, 76, 0, 0, 0, 0, 73, 13, 5, 76, 0, 0, 0, 0, 45, 13, 7, 76, 0, 0, 0,
		0, 62, 12, 7, 76, 0, 0, 0, 0, 67, 6, 8, 76, 0, 0, 0, 0, 38, 12, 2, 76, 0, 0, 0, 0, 38, 12, 2, 93, 0, 0, 0, 0, 48, 13, 7,
		93, 0, 0, 0, 0, 69, 12, 5, 93, 0, 0, 0, 0, 62, 12, 7, 93, 0, 0, 0, 0, 67, 13, 5, 93, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0,
		0, 31, 4, 16, 93, 0, 0, 0, 0, 38, 12, 2, 70, 0, 0, 0, 0, 69, 12, 5, 70, 0, 0, 0, 0, 62, 12, 7, 70, 0, 0, 0, 0, 80, 13, 7,
		70, 0, 0, 0, 0, 45, 13, 7, 70, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 59, 4, 16, 70, 0, 0, 0, 0, 51, 4, 16, 70, 0, 0, 0,
		0, 67, 6, 8, 70, 0, 0, 0, 0, 67, 6, 8, 73, 0, 0, 0, 0, 38, 12, 2, 73, 0, 0, 0, 0, 43, 12, 1, 73, 0, 0, 0, 0, 44, 12, 1, 73,
		0, 0, 0, 0, 59, 4, 16, 73, 0, 0, 0, 0, 32, 11, 0, 14, 0, 107, 0, 108, 32, 11, 0, 14, 0, 109, 0, 110, 32, 11, 0, 14, 0, 111,
		0, 112, 32, 11, 0, 14, 0, 113, 0, 114, 32, 11, 0, 14, 0, 115, 0, 116, 32, 11, 0, 14, 0, 117, 0, 118, 32, 11, 0, 14, 0, 119,
		0, 120, 32, 11, 0, 14, 0, 121, 0, 122, 49, 14, 27, 0, 0, 0, 0, 0, 31, 4, 16, 76, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 45,
		13, 7, 2, 0, 0, 0, 0, 81, 4, 16, 1, 0, 0, 0, 0, 73, 13, 5, 1, 0, 0, 0, 0, 38, 12, 2, 1, 0, 0, 0, 0, 69, 12, 5, 1, 0, 0, 0,
		0, 69, 12, 5, 1, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 38, 12, 2, 1, 0, 0, 0, 0, 73, 13, 5, 1, 0, 0, 0, 0, 37, 11, 0, 21,
		0, 0, 0, 0, 37, 11, 0, 14, 0, 0, 0, 0, 41, 11, 1, 34, 0, 0, 0, 0, 41, 11, 1, 21, 0, 0, 0, 0, 42, 11, 1, 34, 0, 0, 0, 0, 82,
		11, 1, 14, 0, 0, 0, 0, 35, 11, 0, 34, 0, 0, 0, 123, 35, 11, 0, 34, 0, 0, 0, 124, 83, 11, 0, 34, 0, 0, 0, 0, 82, 11, 1, 34,
		0, 0, 0, 0, 84, 11, 1, 34, 0, 0, 0, 0, 82, 11, 1, 21, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 48,
		13, 7, 2, 0, 0, 0, 0, 62, 12, 7, 2, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 48, 13, 7, 2, 0, 0, 0, 0, 48, 13, 7, 2, 0, 0, 0,
		0, 32, 11, 0, 34, 0, 125, 0, 126, 37, 11, 0, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 127, 127, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35,
		11, 0, 34, 0, 0, 0, 8, 35, 11, 0, 21, 0, 0, 0, 84, 34, 8, 4, 21, 0, 93, 93, 0, 35, 11, 0, 21, 0, 0, 0, 128, 35, 11, 0, 21,
		0, 0, 0, 129, 35, 11, 0, 21, 0, 0, 0, 130, 35, 11, 0, 21, 0, 0, 0, 131, 35, 11, 0, 21, 0, 0, 0, 132, 35, 11, 0, 21, 0, 0,
		0, 133, 32, 11, 0, 21, 0, 0, 0, 0, 40, 12, 3, 21, 0, 93, 93, 93, 34, 8, 4, 21, 0, 134, 134, 0, 40, 12, 3, 21, 0, 135, 135,
		135, 35, 11, 0, 21, 0, 136, 0, 137, 34, 8, 4, 21, 0, 94, 94, 0, 34, 8, 4, 21, 0, 138, 138, 0, 34, 8, 4, 21, 0, 139, 139,
		0, 34, 8, 4, 21, 0, 101, 101, 0, 34, 8, 4, 21, 0, 140, 140, 0, 34, 8, 4, 21, 0, 141, 141, 0, 85, 13, 26, 2, 0, 0, 0, 0, 86,
		13, 26, 2, 0, 0, 0, 0, 87, 5, 26, 1, 0, 0, 0, 0, 88, 4, 12, 1, 0, 0, 0, 0, 89, 4, 16, 1, 0, 0, 0, 0, 90, 4, 15, 1, 0, 0,
		0, 0, 90, 4, 14, 1, 0, 0, 0, 0, 28, 4, 17, 1, 0, 0, 0, 0, 91, 4, 16, 1, 0, 0, 0, 0, 23, 15, 22, 1, 0, 0, 0, 0, 23, 15, 23,
		1, 0, 0, 0, 0, 65, 5, 26, 1, 0, 0, 0, 0, 24, 3, 24, 1, 0, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0, 0, 67, 9, 11, 1, 0, 0, 0, 0, 93,
		9, 11, 1, 0, 0, 0, 0, 25, 4, 17, 1, 0, 0, 0, 0, 25, 4, 13, 1, 0, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0,
		0, 25, 4, 16, 1, 0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 88, 4, 16, 1, 0, 0, 0, 0, 67, 9, 11, 1,
		0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 24, 3, 24, 1, 0, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 0, 94, 5, 26, 1, 0, 0, 0, 0, 94, 5,
		26, 1, 0, 0, 0, 0, 95, 14, 27, 0, 0, 0, 0, 0, 65, 5, 26, 1, 0, 0, 0, 0, 84, 11, 1, 34, 0, 0, 0, 0, 57, 5, 20, 1, 0, 0, 0,
		0, 96, 5, 20, 1, 0, 0, 0, 0, 97, 4, 17, 1, 0, 0, 0, 0, 97, 4, 13, 1, 0, 0, 0, 0, 82, 11, 1, 34, 0, 0, 0, 0, 82, 11, 1, 34,
		0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5,
		18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0,
		31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 0, 98, 13, 7, 2, 0, 0, 0, 0, 58, 13, 6, 2, 0,
		0, 0, 0, 58, 13, 6, 2, 0, 0, 0, 0, 58, 13, 6, 2, 0, 0, 0, 0, 98, 13, 7, 2, 0, 0, 0, 0, 98, 13, 7, 2, 0, 0, 0, 0, 98, 13,
		7, 2, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 54, 8, 4, 1, 0, 0, 0, 0, 99, 11, 0, 1, 0, 0, 0, 0, 100, 5, 20, 1, 0, 0, 0, 0,
		34, 8, 4, 21, 0, 142, 142, 0, 97, 5, 21, 1, 0, 0, 0, 0, 34, 8, 4, 34, 0, 143, 143, 0, 34, 8, 4, 34, 0, 144, 144, 0, 101,
		5, 21, 1, 0, 0, 0, 0, 34, 8, 4, 34, 0, 145, 145, 0, 102, 12, 2, 1, 0, 0, 0, 0, 37, 11, 0, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0,
		0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 99, 11, 0, 1, 0, 0, 0, 0, 99, 11, 0, 1, 0, 0, 0, 0, 54, 8, 4, 1, 0, 0, 0, 0, 57, 5, 20,
		1, 0, 0, 0, 0, 103, 11, 0, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 35,
		11, 0, 34, 0, 0, 0, 146, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 104, 8, 9, 34, 0, 147, 147, 0, 105, 11, 9, 34,
		0, 0, 0, 148, 38, 12, 9, 34, 0, 0, 0, 0, 38, 12, 9, 34, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 89,
		5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 106, 5, 20, 1, 0, 0,
		0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 89, 4, 17, 1, 0, 0, 0, 0, 89, 4, 13, 1, 0, 0, 0, 0, 89, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21,
		1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 89, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 89,
		5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0,
		0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 107, 14, 27, 0, 0, 0, 0, 0, 108, 8, 21, 1, 0, 149, 149, 0, 109, 11,
		21, 1, 0, 0, 0, 150, 31, 5, 10, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 89, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0,
		0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 0, 25, 4, 17, 1,
		0, 0, 0, 0, 25, 4, 13, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 89, 4, 17, 1, 0, 0, 0, 0, 89, 4,
		13, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 0, 89, 4, 17, 1, 0, 0, 0, 0,
		89, 4, 13, 1, 0, 0, 0, 0, 89, 4, 17, 1, 0, 0, 0, 0, 89, 4, 13, 1, 0, 0, 0, 0, 25, 5, 21, 7, 0, 0, 0, 0, 25, 5, 21, 1, 0,
		0, 0, 0, 34, 8, 4, 19, 0, 104, 104, 0, 49, 14, 27, 0, 0, 0, 0, 0, 35, 11, 0, 19, 0, 0, 0, 95, 34, 8, 4, 34, 0, 151, 151,
		0, 34, 8, 4, 34, 0, 152, 152, 0, 34, 8, 4, 34, 0, 153, 153, 0, 35, 11, 0, 34, 0, 0, 0, 154, 35, 11, 0, 34, 0, 0, 0, 155,
		34, 8, 4, 34, 0, 156, 156, 0, 34, 8, 4, 34, 0, 157, 157, 0, 34, 8, 4, 34, 0, 158, 158, 0, 34, 8, 4, 34, 0, 159, 159, 0, 37,
		11, 0, 34, 0, 0, 0, 0, 84, 11, 1, 34, 0, 0, 0, 0, 82, 11, 1, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 160, 160, 0, 34, 8, 4, 12,
		0, 7, 7, 0, 35, 11, 0, 12, 0, 0, 0, 8, 37, 11, 0, 12, 0, 0, 0, 0, 31, 5, 21, 12, 0, 0, 0, 0, 34, 8, 4, 12, 0, 7, 7, 0, 35,
		11, 0, 12, 0, 0, 0, 8, 45, 13, 7, 12, 0, 0, 0, 0, 34, 8, 4, 12, 0, 7, 7, 0, 35, 11, 0, 12, 0, 0, 0, 8, 49, 14, 27, 0, 0,
		0, 0, 0, 31, 4, 16, 12, 0, 0, 0, 0, 31, 5, 10, 12, 0, 0, 0, 0, 35, 11, 0, 18, 0, 0, 0, 161, 35, 11, 0, 18, 0, 0, 0, 161,
		38, 12, 2, 59, 0, 0, 0, 0, 38, 12, 2, 59, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 68, 12, 1, 59, 0, 0, 0, 0, 31, 4, 16, 59,
		0, 0, 0, 0, 48, 13, 7, 59, 0, 0, 0, 0, 62, 12, 7, 14, 0, 0, 0, 0, 25, 4, 15, 1, 0, 0, 0, 0, 25, 4, 14, 1, 0, 0, 0, 0, 88,
		4, 12, 1, 0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 88, 4, 12, 1, 0, 0, 0, 0, 25, 4, 15, 1, 0, 0, 0, 0, 25, 4, 14, 1, 0, 0, 0,
		0, 25, 4, 17, 1, 0, 0, 0, 0, 25, 4, 13, 1, 0, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0, 0, 110, 12, 1, 1, 0, 0, 0, 0, 25, 4, 16, 1,
		0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 88, 4, 12, 1, 0, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 88, 4,
		12, 1, 0, 0, 0, 0, 111, 4, 16, 1, 0, 0, 0, 0, 28, 4, 17, 1, 0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0,
		0, 112, 5, 21, 24, 0, 0, 0, 0, 113, 5, 21, 1, 0, 0, 0, 0, 111, 4, 16, 1, 0, 0, 0, 0, 66, 12, 1, 24, 0, 0, 0, 0, 114, 12,
		2, 1, 0, 0, 0, 0, 114, 12, 9, 24, 0, 0, 0, 0, 28, 4, 13, 1, 0, 0, 0, 0, 115, 13, 5, 25, 0, 0, 0, 0, 66, 12, 1, 1, 0, 0, 0,
		0, 114, 12, 9, 24, 0, 0, 0, 0, 68, 12, 1, 24, 0, 0, 0, 0, 38, 12, 2, 1, 0, 0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 0, 49, 14, 27,
		0, 0, 0, 0, 0, 38, 12, 2, 28, 0, 0, 0, 0, 38, 12, 2, 28, 0, 0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 0, 116, 5, 19, 1, 0, 0, 0, 0,
		66, 12, 1, 28, 0, 0, 0, 0, 60, 4, 12, 1, 0, 0, 0, 0, 38, 12, 2, 30, 0, 0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 0, 44, 12, 1, 1, 0,
		0, 0, 0, 66, 12, 1, 30, 0, 0, 0, 0, 38, 12, 2, 30, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 6, 0, 0, 0, 0, 38, 12,
		2, 6, 0, 0, 0, 0, 38, 12, 2, 6, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 38, 12, 2, 6, 0, 0, 0, 0,
		38, 12, 2, 6, 0, 0, 0, 0, 31, 5, 21, 25, 0, 0, 0, 0, 31, 5, 21, 25, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 25,
		0, 0, 0, 0, 31, 5, 21, 30, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0,
		117, 12, 2, 24, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0, 117, 12,
		2, 24, 0, 0, 0, 0, 38, 12, 2, 61, 0, 0, 0, 0, 66, 12, 1, 61, 0, 0, 0, 0, 31, 5, 21, 61, 0, 0, 0, 0, 31, 5, 21, 61, 0, 0,
		0, 0, 38, 12, 2, 86, 0, 0, 0, 0, 68, 12, 1, 86, 0, 0, 0, 0, 51, 4, 16, 86, 0, 0, 0, 0, 59, 4, 16, 86, 0, 0, 0, 0, 38, 12,
		2, 77, 0, 0, 0, 0, 66, 12, 1, 77, 0, 0, 0, 0, 51, 4, 16, 77, 0, 0, 0, 0, 59, 4, 16, 77, 0, 0, 0, 0, 67, 6, 8, 77, 0, 0, 0,
		0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 14, 0, 0, 0, 0, 58, 13, 6, 14, 0, 0, 0, 0, 31, 4, 16, 14, 0, 0, 0, 0, 62, 12, 7,
		14, 0, 0, 0, 0, 43, 12, 1, 14, 0, 0, 0, 0, 41, 11, 1, 14, 0, 0, 0, 0, 62, 12, 7, 14, 0, 0, 0, 0, 38, 12, 2, 79, 0, 0, 0,
		0, 38, 12, 9, 79, 0, 0, 0, 0, 45, 13, 7, 79, 0, 0, 0, 0, 31, 4, 16, 79, 0, 0, 0, 0, 59, 4, 16, 79, 0, 0, 0, 0, 51, 4, 16,
		79, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 63, 5, 19, 1, 0, 0, 0, 0, 43, 12, 1, 1, 0, 0, 0, 0, 43, 12, 1, 1, 0, 0, 0, 0,
		26, 5, 19, 1, 0, 0, 0, 0, 34, 8, 4, 34, 0, 162, 162, 0, 63, 5, 19, 1, 0, 0, 0, 0, 34, 8, 4, 34, 0, 163, 163, 0, 37, 11, 0,
		34, 0, 0, 0, 0, 38, 12, 2, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 34, 8, 4, 34, 0, 7, 7, 0,
		35, 11, 0, 34, 0, 0, 0, 8, 37, 11, 0, 34, 0, 0, 0, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 34, 8, 4, 34,
		0, 164, 164, 0, 34, 8, 4, 34, 0, 165, 165, 0, 34, 8, 4, 34, 0, 166, 166, 0, 34, 8, 4, 34, 0, 167, 167, 0, 34, 8, 4, 34, 0,
		164, 164, 0, 34, 8, 4, 34, 0, 168, 168, 0, 34, 8, 4, 34, 0, 169, 169, 0, 34, 8, 4, 34, 0, 170, 170, 0, 34, 8, 4, 34, 0, 171,
		171, 0, 34, 8, 4, 34, 0, 7, 7, 0, 35, 11, 0, 34, 0, 0, 0, 8, 38, 12, 2, 34, 0, 0, 0, 0, 41, 11, 1, 34, 0, 0, 0, 0, 38, 12,
		2, 34, 0, 0, 0, 0, 38, 12, 2, 49, 0, 0, 0, 0, 48, 13, 7, 49, 0, 0, 0, 0, 69, 12, 5, 49, 0, 0, 0, 0, 62, 12, 7, 49, 0, 0,
		0, 0, 31, 5, 21, 49, 0, 0, 0, 0, 38, 12, 2, 65, 0, 0, 0, 0, 31, 4, 16, 65, 0, 0, 0, 0, 59, 4, 16, 65, 0, 0, 0, 0, 49, 14,
		27, 0, 0, 0, 0, 0, 69, 12, 5, 75, 0, 0, 0, 0, 38, 12, 2, 75, 0, 0, 0, 0, 45, 13, 7, 75, 0, 0, 0, 0, 62, 12, 7, 75, 0, 0,
		0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 59, 4, 16, 75, 0, 0, 0, 0, 67, 6, 8, 75, 0, 0, 0, 0, 45, 13, 7, 16, 0, 0, 0, 0, 31, 4, 16,
		16, 0, 0, 0, 0, 31, 4, 16, 16, 0, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 69, 0, 0, 0, 0,
		38, 12, 2, 69, 0, 0, 0, 0, 62, 12, 7, 69, 0, 0, 0, 0, 45, 13, 7, 69, 0, 0, 0, 0, 81, 4, 16, 1, 0, 0, 0, 0, 59, 4, 16, 69,
		0, 0, 0, 0, 38, 12, 2, 74, 0, 0, 0, 0, 62, 12, 7, 74, 0, 0, 0, 0, 69, 12, 5, 74, 0, 0, 0, 0, 73, 13, 5, 74, 0, 0, 0, 0, 49,
		14, 27, 0, 0, 0, 0, 0, 31, 4, 16, 74, 0, 0, 0, 0, 62, 12, 7, 84, 0, 0, 0, 0, 69, 12, 5, 84, 0, 0, 0, 0, 38, 12, 2, 84, 0,
		0, 0, 0, 45, 13, 7, 84, 0, 0, 0, 0, 73, 13, 5, 84, 0, 0, 0, 0, 31, 4, 16, 84, 0, 0, 0, 0, 51, 4, 16, 84, 0, 0, 0, 0, 59,
		4, 16, 84, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 66, 12, 1, 1, 0, 0, 0, 0, 67, 6, 8, 84, 0, 0, 0, 0, 38, 12, 2, 39, 0, 0,
		0, 0, 45, 13, 7, 39, 0, 0, 0, 0, 66, 12, 1, 39, 0, 0, 0, 0, 67, 6, 8, 39, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12,
		2, 68, 0, 0, 0, 0, 62, 12, 7, 68, 0, 0, 0, 0, 69, 12, 5, 68, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 68, 0, 0, 0,
		0, 31, 4, 16, 68, 0, 0, 0, 0, 59, 4, 16, 68, 0, 0, 0, 0, 38, 12, 2, 39, 0, 0, 0, 0, 66, 12, 1, 39, 0, 0, 0, 0, 31, 5, 21,
		39, 0, 0, 0, 0, 73, 13, 5, 39, 0, 0, 0, 0, 38, 12, 2, 92, 0, 0, 0, 0, 62, 12, 7, 92, 0, 0, 0, 0, 72, 12, 2, 92, 0, 0, 0,
		0, 45, 13, 7, 92, 0, 0, 0, 0, 118, 12, 2, 92, 0, 0, 0, 0, 66, 12, 1, 92, 0, 0, 0, 0, 31, 4, 16, 92, 0, 0, 0, 0, 51, 4, 16,
		92, 0, 0, 0, 0, 38, 12, 2, 87, 0, 0, 0, 0, 69, 12, 5, 87, 0, 0, 0, 0, 62, 12, 7, 87, 0, 0, 0, 0, 59, 4, 16, 87, 0, 0, 0,
		0, 66, 12, 1, 87, 0, 0, 0, 0, 45, 13, 7, 87, 0, 0, 0, 0, 38, 12, 2, 17, 0, 0, 0, 0, 35, 11, 0, 34, 0, 0, 0, 172, 26, 5, 19,
		1, 0, 0, 0, 0, 41, 11, 1, 34, 0, 0, 0, 0, 37, 11, 0, 34, 0, 0, 0, 0, 37, 11, 0, 21, 0, 0, 0, 0, 32, 11, 0, 11, 0, 173, 0,
		173, 38, 12, 2, 87, 0, 0, 0, 0, 69, 12, 5, 87, 0, 0, 0, 0, 62, 12, 7, 87, 0, 0, 0, 0, 59, 4, 16, 87, 0, 0, 0, 0, 73, 13,
		5, 87, 0, 0, 0, 0, 45, 13, 7, 87, 0, 0, 0, 0, 67, 6, 8, 87, 0, 0, 0, 0, 38, 12, 2, 25, 0, 0, 0, 0, 22, 14, 29, 0, 0, 0, 0,
		0, 22, 5, 28, 0, 0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 0, 114, 12,
		2, 24, 0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 0, 32, 11, 0, 4, 0, 0, 0, 0, 38, 12, 2, 27, 0, 0, 0, 0, 61, 12, 7, 27, 0, 0,
		0, 0, 38, 12, 2, 27, 0, 0, 0, 0, 57, 5, 20, 27, 0, 0, 0, 0, 63, 5, 19, 3, 0, 0, 0, 0, 119, 12, 2, 3, 0, 0, 0, 0, 25, 4, 13,
		1, 0, 0, 0, 0, 25, 4, 17, 1, 0, 0, 0, 0, 120, 14, 27, 0, 0, 0, 0, 0, 31, 5, 18, 3, 0, 0, 0, 0, 78, 13, 7, 2, 0, 0, 0, 0,
		31, 4, 16, 1, 0, 0, 0, 0, 63, 4, 16, 1, 0, 0, 0, 0, 31, 4, 17, 1, 0, 0, 0, 0, 31, 4, 13, 1, 0, 0, 0, 0, 45, 13, 7, 14, 0,
		0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 0, 60, 4, 12, 1, 0, 0, 0, 0, 31, 4, 17, 1, 0, 0, 0, 0, 31, 4, 13, 1, 0, 0, 0, 0, 121, 4,
		17, 1, 0, 0, 0, 0, 121, 4, 13, 1, 0, 0, 0, 0, 31, 4, 17, 1, 0, 0, 0, 0, 31, 4, 13, 1, 0, 0, 0, 0, 122, 4, 16, 1, 0, 0, 0,
		0, 123, 4, 16, 1, 0, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 0, 97, 4, 16, 1, 0, 0, 0, 0, 124, 4, 12, 1, 0, 0, 0, 0, 30, 5, 26, 1,
		0, 0, 0, 0, 121, 4, 16, 1, 0, 0, 0, 0, 125, 4, 16, 1, 0, 0, 0, 0, 126, 6, 8, 1, 0, 0, 0, 0, 127, 7, 4, 34, 0, 1, 1, 0, 128,
		5, 19, 1, 0, 0, 0, 0, 129, 10, 0, 34, 0, 0, 0, 2, 31, 4, 17, 1, 0, 0, 0, 0, 31, 4, 13, 1, 0, 0, 0, 0, 38, 12, 2, 30, 0, 0,
		0, 0, 130, 12, 1, 1, 0, 0, 0, 0, 95, 14, 27, 0, 0, 0, 0, 0, 131, 5, 26, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21,
		1, 0, 0, 0, 0, 120, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 36, 0, 0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 0, 38, 12, 9, 21, 0, 0, 0, 0,
		31, 5, 10, 21, 0, 0, 0, 0, 31, 5, 21, 21, 0, 0, 0, 0, 31, 5, 10, 21, 0, 0, 0, 0, 31, 5, 21, 21, 0, 0, 0, 0, 31, 5, 21, 21,
		0, 0, 0, 0, 38, 12, 2, 71, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 67, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 45,
		13, 7, 2, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 38, 12, 2, 42, 0, 0, 0, 0, 38, 12, 2, 42, 0, 0, 0, 0, 31, 5, 10, 42, 0, 0,
		0, 0, 38, 12, 2, 42, 0, 0, 0, 0, 38, 12, 2, 20, 0, 0, 0, 0, 38, 12, 9, 20, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12,
		2, 118, 0, 0, 0, 0, 62, 12, 7, 118, 0, 0, 0, 0, 38, 12, 2, 60, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 51, 4, 16, 60, 0, 0,
		0, 0, 38, 12, 2, 43, 0, 0, 0, 0, 51, 4, 16, 43, 0, 0, 0, 0, 38, 12, 9, 43, 0, 0, 0, 0, 34, 8, 4, 15, 0, 174, 174, 0, 34,
		8, 4, 15, 0, 174, 174, 0, 35, 11, 0, 15, 0, 0, 0, 175, 35, 11, 0, 15, 0, 0, 0, 175, 38, 12, 2, 47, 0, 0, 0, 0, 38, 12, 2,
		45, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 45, 0, 0, 0, 0, 34, 8, 4, 136, 0, 174, 174, 0, 49, 14, 27, 0, 0, 0,
		0, 0, 35, 11, 0, 136, 0, 0, 0, 175, 38, 12, 2, 106, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 104, 0, 0, 0, 0, 31,
		4, 16, 104, 0, 0, 0, 0, 38, 12, 2, 110, 0, 0, 0, 0, 38, 12, 2, 13, 0, 0, 0, 0, 38, 12, 2, 81, 0, 0, 0, 0, 51, 4, 16, 81,
		0, 0, 0, 0, 31, 5, 10, 81, 0, 0, 0, 0, 38, 12, 2, 120, 0, 0, 0, 0, 31, 5, 21, 120, 0, 0, 0, 0, 31, 5, 10, 120, 0, 0, 0, 0,
		38, 12, 2, 116, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 5, 10, 116, 0, 0, 0, 0, 38, 12, 2, 128, 0, 0, 0, 0, 49, 14, 27,
		0, 0, 0, 0, 0, 31, 5, 10, 128, 0, 0, 0, 0, 38, 12, 2, 66, 0, 0, 0, 0, 31, 5, 10, 66, 0, 0, 0, 0, 31, 5, 10, 66, 0, 0, 0,
		0, 49, 14, 27, 0, 0, 0, 0, 0, 51, 4, 16, 66, 0, 0, 0, 0, 38, 12, 2, 72, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 4, 16,
		72, 0, 0, 0, 0, 38, 12, 2, 98, 0, 0, 0, 0, 38, 12, 2, 97, 0, 0, 0, 0, 31, 5, 10, 97, 0, 0, 0, 0, 38, 12, 2, 31, 0, 0, 0,
		0, 62, 12, 7, 31, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 48, 13, 7, 31, 0, 0, 0, 0, 31, 5, 10, 31, 0, 0, 0, 0, 31, 4, 16,
		31, 0, 0, 0, 0, 59, 4, 16, 31, 0, 0, 0, 0, 38, 12, 2, 88, 0, 0, 0, 0, 31, 5, 10, 88, 0, 0, 0, 0, 31, 4, 16, 88, 0, 0, 0,
		0, 38, 12, 2, 117, 0, 0, 0, 0, 31, 5, 10, 117, 0, 0, 0, 0, 38, 12, 2, 112, 0, 0, 0, 0, 31, 5, 21, 112, 0, 0, 0, 0, 45, 13,
		7, 112, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 5, 10, 112, 0, 0, 0, 0, 51, 4, 16, 112, 0, 0, 0, 0, 31, 4, 16, 112, 0,
		0, 0, 0, 38, 12, 2, 78, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 4, 16, 78, 0, 0, 0, 0, 51, 4, 16, 78, 0, 0, 0, 0, 38,
		12, 2, 83, 0, 0, 0, 0, 31, 5, 10, 83, 0, 0, 0, 0, 38, 12, 2, 82, 0, 0, 0, 0, 31, 5, 10, 82, 0, 0, 0, 0, 38, 12, 2, 121, 0,
		0, 0, 0, 51, 4, 16, 121, 0, 0, 0, 0, 31, 5, 10, 121, 0, 0, 0, 0, 38, 12, 2, 89, 0, 0, 0, 0, 34, 8, 4, 130, 0, 77, 77, 0,
		35, 11, 0, 130, 0, 0, 0, 82, 31, 5, 10, 130, 0, 0, 0, 0, 31, 5, 10, 3, 0, 0, 0, 0, 69, 12, 5, 94, 0, 0, 0, 0, 62, 12, 7,
		94, 0, 0, 0, 0, 38, 12, 2, 94, 0, 0, 0, 0, 48, 13, 7, 94, 0, 0, 0, 0, 59, 4, 16, 94, 0, 0, 0, 0, 51, 4, 16, 94, 0, 0, 0,
		0, 49, 14, 27, 0, 0, 0, 0, 0, 31, 5, 10, 94, 0, 0, 0, 0, 67, 6, 8, 94, 0, 0, 0, 0, 48, 13, 7, 94, 0, 0, 0, 0, 48, 13, 7,
		85, 0, 0, 0, 0, 69, 12, 5, 85, 0, 0, 0, 0, 38, 12, 2, 85, 0, 0, 0, 0, 62, 12, 7, 85, 0, 0, 0, 0, 45, 13, 7, 85, 0, 0, 0,
		0, 31, 4, 16, 85, 0, 0, 0, 0, 64, 5, 26, 85, 0, 0, 0, 0, 59, 4, 16, 85, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2,
		101, 0, 0, 0, 0, 67, 6, 8, 101, 0, 0, 0, 0, 62, 12, 7, 96, 0, 0, 0, 0, 38, 12, 2, 96, 0, 0, 0, 0, 69, 12, 5, 96, 0, 0, 0,
		0, 45, 13, 7, 96, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 96, 0, 0, 0, 0, 31, 4, 16, 96, 0, 0, 0, 0, 59, 4, 16,
		96, 0, 0, 0, 0, 38, 12, 2, 111, 0, 0, 0, 0, 45, 13, 7, 111, 0, 0, 0, 0, 31, 4, 16, 111, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0,
		0, 0, 62, 12, 7, 100, 0, 0, 0, 0, 69, 12, 5, 100, 0, 0, 0, 0, 38, 12, 2, 100, 0, 0, 0, 0, 73, 13, 5, 100, 0, 0, 0, 0, 59,
		4, 16, 100, 0, 0, 0, 0, 31, 4, 16, 100, 0, 0, 0, 0, 31, 4, 16, 100, 0, 0, 0, 0, 45, 13, 7, 100, 0, 0, 0, 0, 59, 4, 16, 100,
		0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 100, 0, 0, 0, 0, 38, 12, 2, 100, 0, 0, 0, 0, 38, 12, 2, 100, 0, 0, 0, 0,
		59, 4, 16, 100, 0, 0, 0, 0, 31, 5, 10, 48, 0, 0, 0, 0, 38, 12, 2, 108, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 69, 12, 5,
		108, 0, 0, 0, 0, 62, 12, 7, 108, 0, 0, 0, 0, 73, 13, 5, 108, 0, 0, 0, 0, 45, 13, 7, 108, 0, 0, 0, 0, 59, 4, 16, 108, 0, 0,
		0, 0, 51, 4, 16, 108, 0, 0, 0, 0, 31, 4, 16, 108, 0, 0, 0, 0, 62, 12, 7, 108, 0, 0, 0, 0, 38, 12, 2, 129, 0, 0, 0, 0, 49,
		14, 27, 0, 0, 0, 0, 0, 59, 4, 16, 129, 0, 0, 0, 0, 38, 12, 2, 109, 0, 0, 0, 0, 62, 12, 7, 109, 0, 0, 0, 0, 69, 12, 5, 109,
		0, 0, 0, 0, 45, 13, 7, 109, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 109, 0, 0, 0, 0, 62, 12, 7, 107, 0, 0, 0, 0,
		62, 12, 7, 107, 0, 0, 0, 0, 69, 12, 5, 107, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 107, 0, 0, 0, 0, 45, 13, 7,
		107, 0, 0, 0, 0, 70, 12, 5, 107, 0, 0, 0, 0, 73, 13, 5, 107, 0, 0, 0, 0, 38, 12, 2, 107, 0, 0, 0, 0, 132, 12, 2, 107, 0,
		0, 0, 0, 38, 12, 2, 135, 0, 0, 0, 0, 69, 12, 5, 135, 0, 0, 0, 0, 62, 12, 7, 135, 0, 0, 0, 0, 45, 13, 7, 135, 0, 0, 0, 0,
		59, 4, 16, 135, 0, 0, 0, 0, 51, 4, 16, 135, 0, 0, 0, 0, 31, 4, 16, 135, 0, 0, 0, 0, 67, 6, 8, 135, 0, 0, 0, 0, 49, 14, 27,
		0, 0, 0, 0, 0, 38, 12, 2, 124, 0, 0, 0, 0, 70, 12, 5, 124, 0, 0, 0, 0, 69, 12, 5, 124, 0, 0, 0, 0, 62, 12, 7, 124, 0, 0,
		0, 0, 45, 13, 7, 124, 0, 0, 0, 0, 31, 4, 16, 124, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 124, 0, 0, 0, 0, 38, 12,
		2, 123, 0, 0, 0, 0, 70, 12, 5, 123, 0, 0, 0, 0, 69, 12, 5, 123, 0, 0, 0, 0, 62, 12, 7, 123, 0, 0, 0, 0, 49, 14, 27, 0, 0,
		0, 0, 0, 45, 13, 7, 123, 0, 0, 0, 0, 31, 4, 16, 123, 0, 0, 0, 0, 59, 4, 16, 123, 0, 0, 0, 0, 51, 4, 16, 123, 0, 0, 0, 0,
		77, 4, 16, 123, 0, 0, 0, 0, 59, 4, 16, 123, 0, 0, 0, 0, 38, 12, 2, 123, 0, 0, 0, 0, 62, 12, 7, 123, 0, 0, 0, 0, 38, 12, 2,
		114, 0, 0, 0, 0, 69, 12, 5, 114, 0, 0, 0, 0, 62, 12, 7, 114, 0, 0, 0, 0, 45, 13, 7, 114, 0, 0, 0, 0, 59, 4, 16, 114, 0, 0,
		0, 0, 31, 4, 16, 114, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 114, 0, 0, 0, 0, 31, 4, 16, 38, 0, 0, 0, 0, 38, 12,
		2, 102, 0, 0, 0, 0, 62, 12, 7, 102, 0, 0, 0, 0, 69, 12, 5, 102, 0, 0, 0, 0, 73, 13, 5, 102, 0, 0, 0, 0, 45, 13, 7, 102, 0,
		0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 102, 0, 0, 0, 0, 38, 12, 2, 126, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62,
		12, 7, 126, 0, 0, 0, 0, 69, 12, 5, 126, 0, 0, 0, 0, 45, 13, 7, 126, 0, 0, 0, 0, 67, 6, 8, 126, 0, 0, 0, 0, 31, 5, 10, 126,
		0, 0, 0, 0, 59, 4, 16, 126, 0, 0, 0, 0, 31, 5, 21, 126, 0, 0, 0, 0, 34, 8, 4, 125, 0, 1, 1, 0, 35, 11, 0, 125, 0, 0, 0, 2,
		67, 6, 8, 125, 0, 0, 0, 0, 31, 5, 10, 125, 0, 0, 0, 0, 38, 12, 2, 125, 0, 0, 0, 0, 38, 12, 2, 141, 0, 0, 0, 0, 62, 12, 7,
		141, 0, 0, 0, 0, 69, 12, 5, 141, 0, 0, 0, 0, 48, 13, 7, 141, 0, 0, 0, 0, 45, 13, 7, 141, 0, 0, 0, 0, 31, 4, 16, 141, 0, 0,
		0, 0, 59, 4, 16, 141, 0, 0, 0, 0, 38, 12, 2, 140, 0, 0, 0, 0, 62, 12, 7, 140, 0, 0, 0, 0, 69, 12, 5, 140, 0, 0, 0, 0, 49,
		14, 27, 0, 0, 0, 0, 0, 133, 13, 7, 140, 0, 0, 0, 0, 45, 13, 7, 140, 0, 0, 0, 0, 31, 4, 16, 140, 0, 0, 0, 0, 59, 4, 16, 140,
		0, 0, 0, 0, 51, 4, 16, 140, 0, 0, 0, 0, 38, 12, 2, 122, 0, 0, 0, 0, 38, 12, 2, 133, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0,
		69, 12, 5, 133, 0, 0, 0, 0, 62, 12, 7, 133, 0, 0, 0, 0, 45, 13, 7, 133, 0, 0, 0, 0, 59, 4, 16, 133, 0, 0, 0, 0, 51, 4, 16,
		133, 0, 0, 0, 0, 31, 4, 16, 133, 0, 0, 0, 0, 67, 6, 8, 133, 0, 0, 0, 0, 31, 5, 10, 133, 0, 0, 0, 0, 31, 4, 16, 134, 0, 0,
		0, 0, 51, 4, 16, 134, 0, 0, 0, 0, 38, 12, 2, 134, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 62, 12, 7, 134, 0, 0, 0, 0, 69,
		12, 5, 134, 0, 0, 0, 0, 38, 12, 2, 138, 0, 0, 0, 0, 62, 12, 7, 138, 0, 0, 0, 0, 45, 13, 7, 138, 0, 0, 0, 0, 67, 6, 8, 138,
		0, 0, 0, 0, 38, 12, 2, 63, 0, 0, 0, 0, 38, 12, 2, 63, 0, 0, 0, 0, 38, 12, 2, 63, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38,
		12, 9, 63, 0, 0, 0, 0, 38, 12, 9, 63, 0, 0, 0, 0, 51, 4, 16, 63, 0, 0, 0, 0, 51, 4, 16, 63, 0, 0, 0, 0, 38, 12, 2, 63, 0,
		0, 0, 0, 38, 12, 2, 80, 0, 0, 0, 0, 38, 12, 2, 127, 0, 0, 0, 0, 38, 12, 2, 79, 0, 0, 0, 0, 38, 12, 2, 115, 0, 0, 0, 0, 49,
		14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 115, 0, 0, 0, 0, 59, 4, 16, 115, 0, 0, 0, 0, 38, 12, 2, 103, 0, 0, 0, 0, 45, 13, 7, 103,
		0, 0, 0, 0, 59, 4, 16, 103, 0, 0, 0, 0, 38, 12, 2, 119, 0, 0, 0, 0, 62, 12, 7, 119, 0, 0, 0, 0, 59, 4, 16, 119, 0, 0, 0,
		0, 51, 4, 16, 119, 0, 0, 0, 0, 31, 4, 16, 119, 0, 0, 0, 0, 31, 5, 21, 119, 0, 0, 0, 0, 68, 12, 1, 119, 0, 0, 0, 0, 66, 12,
		1, 119, 0, 0, 0, 0, 67, 6, 8, 119, 0, 0, 0, 0, 31, 5, 10, 119, 0, 0, 0, 0, 38, 12, 2, 99, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0,
		0, 0, 69, 12, 5, 99, 0, 0, 0, 0, 45, 13, 7, 99, 0, 0, 0, 0, 43, 12, 1, 99, 0, 0, 0, 0, 66, 12, 1, 137, 0, 0, 0, 0, 66, 12,
		1, 139, 0, 0, 0, 0, 114, 12, 2, 137, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 30, 0, 0, 0, 0, 38, 12, 2, 28, 0,
		0, 0, 0, 38, 12, 2, 28, 0, 0, 0, 0, 114, 12, 2, 139, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 38, 12, 2, 105, 0, 0, 0, 0, 49,
		14, 27, 0, 0, 0, 0, 0, 31, 5, 21, 105, 0, 0, 0, 0, 48, 13, 7, 105, 0, 0, 0, 0, 62, 12, 7, 105, 0, 0, 0, 0, 59, 4, 16, 105,
		0, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 134, 13, 5, 1, 0, 0, 0, 0, 67, 13, 5, 1, 0, 0, 0, 0, 45,
		13, 7, 2, 0, 0, 0, 0, 73, 13, 5, 1, 0, 0, 0, 0, 115, 13, 5, 1, 0, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 0, 48, 13, 7, 21, 0, 0,
		0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 54, 8, 4, 1, 0, 0, 0, 0, 99, 11, 0, 1, 0, 0, 0, 0, 103, 11, 0, 1, 0, 0, 0, 0, 99, 11, 0,
		1, 0, 0, 0, 0, 57, 5, 20, 1, 0, 0, 0, 0, 54, 8, 4, 1, 0, 0, 0, 0, 99, 11, 0, 1, 0, 0, 0, 0, 93, 6, 8, 1, 0, 0, 0, 0, 31,
		5, 21, 131, 0, 0, 0, 0, 48, 13, 7, 131, 0, 0, 0, 0, 51, 4, 16, 131, 0, 0, 0, 0, 59, 4, 16, 131, 0, 0, 0, 0, 31, 4, 16, 131,
		0, 0, 0, 0, 62, 12, 7, 19, 0, 0, 0, 0, 38, 12, 2, 113, 0, 0, 0, 0, 31, 5, 10, 113, 0, 0, 0, 0, 45, 13, 7, 113, 0, 0, 0, 0,
		34, 8, 4, 132, 0, 176, 176, 0, 35, 11, 0, 132, 0, 0, 0, 177, 80, 13, 7, 132, 0, 0, 0, 0, 62, 12, 7, 132, 0, 0, 0, 0, 45,
		13, 7, 132, 0, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 0, 67, 6, 8, 132, 0, 0, 0, 0, 31, 4, 16, 132, 0, 0, 0, 0, 102, 12, 2, 3,
		0, 0, 0, 0, 57, 5, 20, 3, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 0, 135,
		8, 21, 1, 0, 0, 0, 0, 135, 8, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 136, 5, 21, 1, 0, 0,
		0, 0, 31, 5, 21, 28, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 63, 5, 19, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21,
		1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 0, 120, 14, 27, 0, 0, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 0,
		117, 12, 2, 24, 0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 0, 95, 14, 27, 0, 0, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 0, 137, 5, 26,
		1, 0, 0, 0, 0, 78, 13, 7, 2, 0, 0, 0, 0, 22, 5, 28, 0, 0, 0, 0, 0
	};

	static constexpr std::array<std::uint_least64_t, 138> pflags =
	{
		UINT64_C(7), UINT64_C(4294967319), UINT64_C(4294967327), UINT64_C(140741783322647), UINT64_C(140747152032263), UINT64_C(140746078290183),
		UINT64_C(140746078289927), UINT64_C(141295834104071), UINT64_C(703696031711239), UINT64_C(140746078290439), UINT64_C(140746078290055),
		UINT64_C(141296907846151), UINT64_C(11399736556787719), UINT64_C(141295834104327), UINT64_C(17092320570644487), UINT64_C(17092320570638343),
		UINT64_C(704245787558919), UINT64_C(11399736556781575), UINT64_C(141295834136583), UINT64_C(17088953316284423), UINT64_C(17088953316278279),
		UINT64_C(17088953383387143), UINT64_C(5), UINT64_C(4294967325), UINT64_C(140737488355349), UINT64_C(140746078289925), UINT64_C(141287244201989),
		UINT64_C(17064764060598277), UINT64_C(140746078290181), UINT64_C(703696031711237), UINT64_C(70918499991557), UINT64_C(140737488355333),
		UINT64_C(17097749409300485), UINT64_C(11400286849564677), UINT64_C(17092320570638341), UINT64_C(17088953316278277), UINT64_C(17088953383387141),
		UINT64_C(17064764060467205), UINT64_C(17064420463083525), UINT64_C(17096718617149445), UINT64_C(17094382154940421), UINT64_C(17065313816444933),
		UINT64_C(17065313883553797), UINT64_C(17064970218930181), UINT64_C(17064970218995717), UINT64_C(11541023800983557), UINT64_C(11609537119428613),
		UINT64_C(11611392578682885), UINT64_C(11541023800950789), UINT64_C(1), UINT64_C(3554514934333445), UINT64_C(140737488355845),
		UINT64_C(11400286849466885), UINT64_C(17660699362722821), UINT64_C(17627782733366277), UINT64_C(17064832779943941), UINT64_C(17655270524060677),
		UINT64_C(703687441776645), UINT64_C(282024732524549), UINT64_C(140738562097669), UINT64_C(140737488355461), UINT64_C(11576208173080581),
		UINT64_C(11576208173047813), UINT64_C(141287244169221), UINT64_C(566935683077), UINT64_C(70918499991589), UINT64_C(17064970218962949),
		UINT64_C(11399736556781573), UINT64_C(17064970218897413), UINT64_C(11434920928878597), UINT64_C(11575658418282501), UINT64_C(12560820835713029),
		UINT64_C(17064420597301253), UINT64_C(11399736556814341), UINT64_C(17134789240815621), UINT64_C(11399737093652485), UINT64_C(17083524477616133),
		UINT64_C(140737488420869), UINT64_C(11611394692612101), UINT64_C(17205707975696389), UINT64_C(11541023801049093), UINT64_C(140737488388101),
		UINT64_C(17065313816412165), UINT64_C(17064764127576069), UINT64_C(17065313883521029), UINT64_C(352393477750853), UINT64_C(70918499991621),
		UINT64_C(70922794958885), UINT64_C(140746078290053), UINT64_C(703696031712261), UINT64_C(141295834104069), UINT64_C(141295834103813),
		UINT64_C(140747152032261), UINT64_C(11962686510203909), UINT64_C(633868453413893), UINT64_C(70368777732097), UINT64_C(703687441776773),
		UINT64_C(703687441777669), UINT64_C(12103973754373125), UINT64_C(17627714013889541), UINT64_C(17592186312851461), UINT64_C(17029236359430149),
		UINT64_C(17627370416505861), UINT64_C(17627714080998405), UINT64_C(17092320570900485), UINT64_C(17088953316409349), UINT64_C(703696031711365),
		UINT64_C(8589934593), UINT64_C(203821968269317), UINT64_C(200454713778181), UINT64_C(176480206225413), UINT64_C(140746078290437),
		UINT64_C(140737496743941), UINT64_C(140737490452485), UINT64_C(17064420463099909), UINT64_C(11540474046218245), UINT64_C(3518987233165317),
		UINT64_C(17064420479877125), UINT64_C(17064420463116293), UINT64_C(3553621580972037), UINT64_C(524289), UINT64_C(140737488355589),
		UINT64_C(141288317911557), UINT64_C(141287244169733), UINT64_C(703687441777797), UINT64_C(141287244169477), UINT64_C(11399736556783621),
		UINT64_C(17092320570640389), UINT64_C(704237197624325), UINT64_C(17088953316280325), UINT64_C(12702108080963589), UINT64_C(549755813893),
		UINT64_C(17064420463149061), UINT64_C(11541023801016325), UINT64_C(11540474046185477), UINT64_C(176334177574917), UINT64_C(140771848093701),
		UINT64_C(352393477750789)
	};

	static constexpr std::array<std::uint_least16_t, 16> cflags =
	{
		512, 896, 640, 2432, 3080, 3072, 7280, 7269, 7237, 7176, 7267, 7235, 7233, 7168, 0, 128
	};

	auto table = std::make_unique<raw_record_table>();
	run_length_decode(std::cbegin(rlestage1), std::cend(rlestage1), std::begin(table->stage1));
	run_length_decode(std::cbegin(rlestage2), std::cend(rlestage2), std::begin(table->stage2));
	run_length_decode(std::cbegin(rleabfields), std::cend(rleabfields),
		make_member_accessor<decltype(&raw_record::abfields), &raw_record::abfields>(std::begin(table->records)));
	auto& records = table->records;
	for (std::size_t r = 0, f = 0, e = flyweights.size(); f < e; ++r, f += 8) {
		records[r].pflags = pflags[flyweights[f + 0]];
		records[r].cflags = cflags[flyweights[f + 1]];
		records[r].gcindex = flyweights[f + 2];
		records[r].scindex = flyweights[f + 3];
		records[r].wfields = flyweights[f + 4];
		records[r].cfindex = flyweights[f + 5];
		records[r].clindex = flyweights[f + 6];
		records[r].cuindex = flyweights[f + 7];
	}
	return table;
}

} // namespace lug::unicode

#endif
