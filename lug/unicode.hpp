// lug - Embedded DSL for PE grammar parser combinators in C++
// Copyright (c) 2017 Jesse W. Towner
// See LICENSE.md file for license details

// This header file is generated by the makeunicode tool program.
// Do not modify this file by hand. Instead, modify and run the
// tool to regenerate this file.

#ifndef LUG_UNICODE_HPP__
#define LUG_UNICODE_HPP__

#include <lug/detail.hpp>
#include <cctype>
#include <cstddef>
#include <cstdint>
#include <array>
#include <memory>
#include <optional>
#include <utility>

namespace lug::unicode
{

// POSIX compatibility properties
enum class ctype : std::uint_least16_t
{
	is_bitfield_enum,
	alpha    = UINT16_C(1) <<  0,
	lower    = UINT16_C(1) <<  1,
	upper    = UINT16_C(1) <<  2,
	punct    = UINT16_C(1) <<  3,
	digit    = UINT16_C(1) <<  4,
	xdigit   = UINT16_C(1) <<  5,
	alnum    = UINT16_C(1) <<  6,
	space    = UINT16_C(1) <<  7,
	blank    = UINT16_C(1) <<  8,
	cntrl    = UINT16_C(1) <<  9,
	graph    = UINT16_C(1) << 10,
	print    = UINT16_C(1) << 11,
	word     = UINT16_C(1) << 12,
	none     = 0
};

// Unicode binary properties
enum class ptype : std::uint_least64_t
{
	is_bitfield_enum,
	Any                                  = UINT64_C(1) <<  0,
	Ascii                                = UINT64_C(1) <<  1,
	Assigned                             = UINT64_C(1) <<  2,
	Line_Ending                          = UINT64_C(1) <<  3,
	White_Space                          = UINT64_C(1) <<  4,
	Bidi_Control                         = UINT64_C(1) <<  5,
	Join_Control                         = UINT64_C(1) <<  6,
	Dash                                 = UINT64_C(1) <<  7,
	Quotation_Mark                       = UINT64_C(1) <<  8,
	Terminal_Punctuation                 = UINT64_C(1) <<  9,
	Other_Math                           = UINT64_C(1) << 10,
	Hex_Digit                            = UINT64_C(1) << 11,
	ASCII_Hex_Digit                      = UINT64_C(1) << 12,
	Other_Alphabetic                     = UINT64_C(1) << 13,
	Ideographic                          = UINT64_C(1) << 14,
	Diacritic                            = UINT64_C(1) << 15,
	Extender                             = UINT64_C(1) << 16,
	Other_Lowercase                      = UINT64_C(1) << 17,
	Other_Uppercase                      = UINT64_C(1) << 18,
	Noncharacter_Code_Point              = UINT64_C(1) << 19,
	Other_Grapheme_Extend                = UINT64_C(1) << 20,
	IDS_Binary_Operator                  = UINT64_C(1) << 21,
	IDS_Ternary_Operator                 = UINT64_C(1) << 22,
	Radical                              = UINT64_C(1) << 23,
	Unified_Ideograph                    = UINT64_C(1) << 24,
	Other_Default_Ignorable_Code_Point   = UINT64_C(1) << 25,
	Soft_Dotted                          = UINT64_C(1) << 26,
	Logical_Order_Exception              = UINT64_C(1) << 27,
	Other_ID_Start                       = UINT64_C(1) << 28,
	Other_ID_Continue                    = UINT64_C(1) << 29,
	Sentence_Terminal                    = UINT64_C(1) << 30,
	Variation_Selector                   = UINT64_C(1) << 31,
	Pattern_White_Space                  = UINT64_C(1) << 32,
	Pattern_Syntax                       = UINT64_C(1) << 33,
	Prepended_Concatenation_Mark         = UINT64_C(1) << 34,
	Regional_Indicator                   = UINT64_C(1) << 35,
	Lowercase                            = UINT64_C(1) << 36,
	Uppercase                            = UINT64_C(1) << 37,
	Cased                                = UINT64_C(1) << 38,
	Case_Ignorable                       = UINT64_C(1) << 39,
	Changes_When_Lowercased              = UINT64_C(1) << 40,
	Changes_When_Uppercased              = UINT64_C(1) << 41,
	Changes_When_Titlecased              = UINT64_C(1) << 42,
	Changes_When_Casefolded              = UINT64_C(1) << 43,
	Changes_When_Casemapped              = UINT64_C(1) << 44,
	Alphabetic                           = UINT64_C(1) << 45,
	Default_Ignorable_Code_Point         = UINT64_C(1) << 46,
	Grapheme_Base                        = UINT64_C(1) << 47,
	Grapheme_Extend                      = UINT64_C(1) << 48,
	Math                                 = UINT64_C(1) << 49,
	ID_Start                             = UINT64_C(1) << 50,
	ID_Continue                          = UINT64_C(1) << 51,
	XID_Start                            = UINT64_C(1) << 52,
	XID_Continue                         = UINT64_C(1) << 53,
	None                                 = 0
};

// Unicode general categories
enum class gctype : std::uint_least32_t
{
	is_bitfield_enum,
	Ll = UINT32_C(1) <<  0,    Lowercase_Letter = Ll,
	Lm = UINT32_C(1) <<  1,    Modifier_Letter = Lm,
	Lo = UINT32_C(1) <<  2,    Other_Letter = Lo,
	Lt = UINT32_C(1) <<  3,    Titlecase_Letter = Lt,
	Lu = UINT32_C(1) <<  4,    Uppercase_Letter = Lu,
	Mc = UINT32_C(1) <<  5,    Spacing_Mark = Mc,
	Me = UINT32_C(1) <<  6,    Enclosing_Mark = Me,
	Mn = UINT32_C(1) <<  7,    Nonspacing_Mark = Mn,
	Nd = UINT32_C(1) <<  8,    Decimal_Number = Nd,
	Nl = UINT32_C(1) <<  9,    Letter_Number = Nl,
	No = UINT32_C(1) << 10,    Other_Number = No,
	Pc = UINT32_C(1) << 11,    Connector_Punctuation = Pc,
	Pd = UINT32_C(1) << 12,    Dash_Punctuation = Pd,
	Pe = UINT32_C(1) << 13,    Close_Punctuation = Pe,
	Pf = UINT32_C(1) << 14,    Final_Punctuation = Pf,
	Pi = UINT32_C(1) << 15,    Initial_Punctuation = Pi,
	Po = UINT32_C(1) << 16,    Other_Punctuation = Po,
	Ps = UINT32_C(1) << 17,    Open_Punctuation = Ps,
	Sc = UINT32_C(1) << 18,    Currency_Symbol = Sc,
	Sk = UINT32_C(1) << 19,    Modifier_Symbol = Sk,
	Sm = UINT32_C(1) << 20,    Mathematical_Symbol = Sm,
	So = UINT32_C(1) << 21,    Other_Symbol = So,
	Zl = UINT32_C(1) << 22,    Line_Separator = Zl,
	Zp = UINT32_C(1) << 23,    Paragraph_Separator = Zp,
	Zs = UINT32_C(1) << 24,    Space_Separator = Zs,
	Cc = UINT32_C(1) << 25,    Control = Cc,
	Cf = UINT32_C(1) << 26,    Format = Cf,
	Cn = UINT32_C(1) << 27,    Unassigned = Cn,
	Co = UINT32_C(1) << 28,    Private_Use = Co,
	Cs = UINT32_C(1) << 29,    Surrogate = Cs,
	C  = Cc|Cf|Cn|Co|Cs,       Other = C,
	L  = Lu|Ll|Lt|Lm|Lo,       Letter = L,
	LC = Lu|Ll|Lt,             Cased_Letter = LC,
	M  = Mc|Me|Mn,             Mark = M,
	N  = Nd|Nl|No,             Number = N,
	P  = Pc|Pd|Pe|Pf|Pi|Po|Ps, Punctuation = P,
	S  = Sc|Sm|Sk|So,          Symbol = S,
	Z  = Zl|Zp|Zs,             Separator = Z,
	None = 0
};

// Unicode scripts
enum class sctype : std::uint_least8_t
{
	Unknown                  =   0,
	Common                   =   1,
	Inherited                =   2,
	Arabic                   =   3,
	Armenian                 =   4,
	Bengali                  =   5,
	Bopomofo                 =   6,
	Braille                  =   7,
	Buginese                 =   8,
	Buhid                    =   9,
	Canadian_Aboriginal      =  10,
	Cherokee                 =  11,
	Coptic                   =  12,
	Cypriot                  =  13,
	Cyrillic                 =  14,
	Deseret                  =  15,
	Devanagari               =  16,
	Ethiopic                 =  17,
	Georgian                 =  18,
	Glagolitic               =  19,
	Gothic                   =  20,
	Greek                    =  21,
	Gujarati                 =  22,
	Gurmukhi                 =  23,
	Han                      =  24,
	Hangul                   =  25,
	Hanunoo                  =  26,
	Hebrew                   =  27,
	Hiragana                 =  28,
	Kannada                  =  29,
	Katakana                 =  30,
	Kharoshthi               =  31,
	Khmer                    =  32,
	Lao                      =  33,
	Latin                    =  34,
	Limbu                    =  35,
	Linear_B                 =  36,
	Malayalam                =  37,
	Mongolian                =  38,
	Myanmar                  =  39,
	New_Tai_Lue              =  40,
	Ogham                    =  41,
	Old_Italic               =  42,
	Old_Persian              =  43,
	Oriya                    =  44,
	Osmanya                  =  45,
	Runic                    =  46,
	Shavian                  =  47,
	Sinhala                  =  48,
	Syloti_Nagri             =  49,
	Syriac                   =  50,
	Tagalog                  =  51,
	Tagbanwa                 =  52,
	Tai_Le                   =  53,
	Tamil                    =  54,
	Telugu                   =  55,
	Thaana                   =  56,
	Thai                     =  57,
	Tibetan                  =  58,
	Tifinagh                 =  59,
	Ugaritic                 =  60,
	Yi                       =  61,
	Balinese                 =  62,
	Cuneiform                =  63,
	Nko                      =  64,
	Phags_Pa                 =  65,
	Phoenician               =  66,
	Carian                   =  67,
	Cham                     =  68,
	Kayah_Li                 =  69,
	Lepcha                   =  70,
	Lycian                   =  71,
	Lydian                   =  72,
	Ol_Chiki                 =  73,
	Rejang                   =  74,
	Saurashtra               =  75,
	Sundanese                =  76,
	Vai                      =  77,
	Avestan                  =  78,
	Bamum                    =  79,
	Egyptian_Hieroglyphs     =  80,
	Imperial_Aramaic         =  81,
	Inscriptional_Pahlavi    =  82,
	Inscriptional_Parthian   =  83,
	Javanese                 =  84,
	Kaithi                   =  85,
	Lisu                     =  86,
	Meetei_Mayek             =  87,
	Old_South_Arabian        =  88,
	Old_Turkic               =  89,
	Samaritan                =  90,
	Tai_Tham                 =  91,
	Tai_Viet                 =  92,
	Batak                    =  93,
	Brahmi                   =  94,
	Mandaic                  =  95,
	Chakma                   =  96,
	Meroitic_Cursive         =  97,
	Meroitic_Hieroglyphs     =  98,
	Miao                     =  99,
	Sharada                  = 100,
	Sora_Sompeng             = 101,
	Takri                    = 102,
	Bassa_Vah                = 103,
	Caucasian_Albanian       = 104,
	Duployan                 = 105,
	Elbasan                  = 106,
	Grantha                  = 107,
	Khojki                   = 108,
	Khudawadi                = 109,
	Linear_A                 = 110,
	Mahajani                 = 111,
	Manichaean               = 112,
	Mende_Kikakui            = 113,
	Modi                     = 114,
	Mro                      = 115,
	Nabataean                = 116,
	Old_North_Arabian        = 117,
	Old_Permic               = 118,
	Pahawh_Hmong             = 119,
	Palmyrene                = 120,
	Psalter_Pahlavi          = 121,
	Pau_Cin_Hau              = 122,
	Siddham                  = 123,
	Tirhuta                  = 124,
	Warang_Citi              = 125,
	Ahom                     = 126,
	Anatolian_Hieroglyphs    = 127,
	Hatran                   = 128,
	Multani                  = 129,
	Old_Hungarian            = 130,
	SignWriting              = 131,
	Adlam                    = 132,
	Bhaiksuki                = 133,
	Marchen                  = 134,
	Newa                     = 135,
	Osage                    = 136,
	Tangut                   = 137,
	Masaram_Gondi            = 138,
	Nushu                    = 139,
	Soyombo                  = 140,
	Zanabazar_Square         = 141
};

// Unicode Character Database (UCD) record
class ucd_record
{
	struct raw_record {
		std::uint_least64_t pflags;
		std::uint_least16_t cflags;
		std::uint_least8_t gcindex;
		std::uint_least8_t scindex;
		std::uint_least8_t cfindex;
		std::uint_least8_t clindex;
		std::uint_least8_t cuindex;
	} const* record_;
	explicit ucd_record(raw_record const* r) noexcept : record_(r) {}
	struct raw_record_table {
		std::array<std::uint_least8_t, 8704> stage1;
		std::array<std::uint_least16_t, 31616> stage2;
		std::array<raw_record, 1015> records;
	};
	static std::int_least32_t case_mapping(std::size_t index) noexcept;
	static std::unique_ptr<raw_record_table> decompress_table();
	friend ucd_record query(char32_t r);
public:
	ctype compatibility() const noexcept { return static_cast<ctype>(record_->cflags); }
	ptype properties() const noexcept { return static_cast<ptype>(record_->pflags); }
	gctype general_category() const noexcept { return static_cast<gctype>(UINT32_C(1) << record_->gcindex); }
	sctype script() const noexcept { return static_cast<sctype>(record_->scindex); }
	bool any_of(ctype c) const noexcept { return (compatibility() & c) != ctype::none; }
	bool any_of(ptype p) const noexcept { return (properties() & p) != ptype::None; }
	bool any_of(gctype gc) const noexcept { return (general_category() & gc) != gctype::None; }
	std::int_least32_t casefold_mapping() const noexcept { return case_mapping(record_->cfindex); }
	std::int_least32_t lowercase_mapping() const noexcept { return case_mapping(record_->clindex); }
	std::int_least32_t uppercase_mapping() const noexcept { return case_mapping(record_->cuindex); }
};

// Retrieves the UCD record for the given Unicode codepoint
inline ucd_record query(char32_t r)
{
	static auto const table = ucd_record::decompress_table();
	std::size_t index = 129;
	if (r < 0x110000) {
		index = table->stage1[r >> 7];
		index = table->stage2[(index << 7) | (r & 0x7f)];
	}
	return ucd_record{table->records.data() + index};
}

// Simple casefold conversion
inline char32_t tocasefold(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).casefold_mapping());
}

// Simple lowercase conversion
inline char32_t tolower(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).lowercase_mapping());
}

// Simple uppercase conversion
inline char32_t toupper(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).uppercase_mapping());
}

// Sparse character rune set
using rune_set = std::vector<std::pair<char32_t, char32_t>>;

inline void push_range(rune_set& runes, char32_t start, char32_t end)
{
	runes.emplace_back(start, end);
	std::push_heap(std::begin(runes), std::end(runes));
}

namespace detail
{

inline void push_uniform_casefolded_range(rune_set& runes, ptype props, char32_t start, char32_t end)
{
	if ((props & ptype::Cased) != ptype::None) {
		push_range(runes, tolower(start), tolower(end));
		push_range(runes, toupper(start), toupper(end));
	} else {
		push_range(runes, start, end);
	}
}

} // namespace detail

inline void push_casefolded_range(rune_set& runes, char32_t start, char32_t end)
{
	ptype p = query(start).properties();
	char32_t r1 = start, r2 = start;
	for (char32_t rn = start + 1; rn <= end; r2 = rn, ++rn) {
		ptype q = query(start).properties();
		if (((p ^ q) & ptype::Cased) != ptype::None) {
			detail::push_uniform_casefolded_range(runes, p, r1, r2);
			r1 = rn;
			p = q;
		}
	}
	detail::push_uniform_casefolded_range(runes, p, r1, r2);
}

inline rune_set sort_and_optimize(rune_set runes)
{
	rune_set optimized_runes;
	auto out = optimized_runes.end();
	std::sort_heap(std::begin(runes), std::end(runes));
	for (auto next = std::cbegin(runes), last = std::cend(runes); next != last; ++next) {
		if (out == optimized_runes.end() || next->first < out->first || out->second < next->first)
			out = optimized_runes.insert(optimized_runes.end(), *next);
		else
			out->second = out->second < next->second ? next->second : out->second;
	}
	optimized_runes.shrink_to_fit();
	return optimized_runes;
}

namespace detail
{

inline std::string normalize_property_label(std::string_view id)
{
	std::string normid;
	for (char c : id)
		if (c != ' ' && c != '\t' && c != '_' && c != '-')
			normid.push_back(static_cast<char>(std::tolower(c)));
	return normid;
}

} // namespace detail

// Convert from text to ctype property
inline std::optional<ctype> stoctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using ct = ctype;

	static constexpr std::array<std::pair<std::string_view, ctype>, 13> labels =
	{ {
		{ "alnum"sv, ct::alnum }, { "alpha"sv, ct::alpha }, { "blank"sv, ct::blank }, { "cntrl"sv, ct::cntrl },
		{ "digit"sv, ct::digit }, { "graph"sv, ct::graph }, { "lower"sv, ct::lower }, { "print"sv, ct::print },
		{ "punct"sv, ct::punct }, { "space"sv, ct::space }, { "upper"sv, ct::upper }, { "word"sv, ct::word }, { "xdigit"sv, ct::xdigit }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ctype>{static_cast<ctype>(c->second)} : std::nullopt;
}

// Convert from text to ptype property
inline std::optional<ptype> stoptype(std::string_view s)
{
	using namespace std::string_view_literals;
	using pt = ptype;

	static constexpr std::array<std::pair<std::string_view, ptype>, 54> labels =
	{ {
		{ "alphabetic"sv, pt::Alphabetic }, { "any"sv, pt::Any }, { "ascii"sv, pt::Ascii },
		{ "asciihexdigit"sv, pt::ASCII_Hex_Digit }, { "assigned"sv, pt::Assigned }, { "bidicontrol"sv, pt::Bidi_Control },
		{ "cased"sv, pt::Cased }, { "caseignorable"sv, pt::Case_Ignorable },
		{ "changeswhencasefolded"sv, pt::Changes_When_Casefolded }, { "changeswhencasemapped"sv, pt::Changes_When_Casemapped },
		{ "changeswhenlowercased"sv, pt::Changes_When_Lowercased }, { "changeswhentitlecased"sv, pt::Changes_When_Titlecased },
		{ "changeswhenuppercased"sv, pt::Changes_When_Uppercased }, { "dash"sv, pt::Dash },
		{ "defaultignorablecodepoint"sv, pt::Default_Ignorable_Code_Point }, { "diacritic"sv, pt::Diacritic },
		{ "extender"sv, pt::Extender }, { "graphemebase"sv, pt::Grapheme_Base }, { "graphemeextend"sv, pt::Grapheme_Extend },
		{ "hexdigit"sv, pt::Hex_Digit }, { "idcontinue"sv, pt::ID_Continue }, { "ideographic"sv, pt::Ideographic },
		{ "idsbinaryoperator"sv, pt::IDS_Binary_Operator }, { "idstart"sv, pt::ID_Start },
		{ "idsternaryoperator"sv, pt::IDS_Ternary_Operator }, { "joincontrol"sv, pt::Join_Control },
		{ "lineending"sv, pt::Line_Ending }, { "logicalorderexception"sv, pt::Logical_Order_Exception },
		{ "lowercase"sv, pt::Lowercase }, { "math"sv, pt::Math }, { "noncharactercodepoint"sv, pt::Noncharacter_Code_Point },
		{ "otheralphabetic"sv, pt::Other_Alphabetic },
		{ "otherdefaultignorablecodepoint"sv, pt::Other_Default_Ignorable_Code_Point },
		{ "othergraphemeextend"sv, pt::Other_Grapheme_Extend }, { "otheridcontinue"sv, pt::Other_ID_Continue },
		{ "otheridstart"sv, pt::Other_ID_Start }, { "otherlowercase"sv, pt::Other_Lowercase }, { "othermath"sv, pt::Other_Math },
		{ "otheruppercase"sv, pt::Other_Uppercase }, { "patternsyntax"sv, pt::Pattern_Syntax },
		{ "patternwhitespace"sv, pt::Pattern_White_Space }, { "prependedconcatenationmark"sv, pt::Prepended_Concatenation_Mark },
		{ "quotationmark"sv, pt::Quotation_Mark }, { "radical"sv, pt::Radical },
		{ "regionalindicator"sv, pt::Regional_Indicator }, { "sentenceterminal"sv, pt::Sentence_Terminal },
		{ "softdotted"sv, pt::Soft_Dotted }, { "terminalpunctuation"sv, pt::Terminal_Punctuation },
		{ "unifiedideograph"sv, pt::Unified_Ideograph }, { "uppercase"sv, pt::Uppercase },
		{ "variationselector"sv, pt::Variation_Selector }, { "whitespace"sv, pt::White_Space },
		{ "xidcontinue"sv, pt::XID_Continue }, { "xidstart"sv, pt::XID_Start }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ptype>{static_cast<ptype>(c->second)} : std::nullopt;
}

// Convert from text to gctype property
inline std::optional<gctype> stogctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using gc = gctype;

	static constexpr std::array<std::pair<std::string_view, gctype>, 60> labels =
	{ {
		{ "cc"sv, gc::Cc }, { "cf"sv, gc::Cf }, { "closepunctuation"sv, gc::Pe }, { "cn"sv, gc::Cn }, { "co"sv, gc::Co },
		{ "connectorpunctuation"sv, gc::Pc }, { "control"sv, gc::Cc }, { "cs"sv, gc::Cs }, { "currencysymbol"sv, gc::Sc },
		{ "dashpunctuation"sv, gc::Pd }, { "decimalnumber"sv, gc::Nd }, { "enclosingmark"sv, gc::Me },
		{ "finalpunctuation"sv, gc::Pf }, { "format"sv, gc::Cf }, { "initialpunctuation"sv, gc::Pi },
		{ "letternumber"sv, gc::Nl }, { "lineseparator"sv, gc::Zl }, { "ll"sv, gc::Ll }, { "lm"sv, gc::Lm }, { "lo"sv, gc::Lo },
		{ "lowercaseletter"sv, gc::Ll }, { "lt"sv, gc::Lt }, { "lu"sv, gc::Lu }, { "mathematicalsymbol"sv, gc::Sm },
		{ "mc"sv, gc::Mc }, { "me"sv, gc::Me }, { "mn"sv, gc::Mn }, { "modifierletter"sv, gc::Lm },
		{ "modifiersymbol"sv, gc::Sk }, { "nd"sv, gc::Nd }, { "nl"sv, gc::Nl }, { "no"sv, gc::No },
		{ "nonspacingmark"sv, gc::Mn }, { "openpunctuation"sv, gc::Ps }, { "otherletter"sv, gc::Lo },
		{ "othernumber"sv, gc::No }, { "otherpunctuation"sv, gc::Po }, { "othersymbol"sv, gc::So },
		{ "paragraphseparator"sv, gc::Zp }, { "pc"sv, gc::Pc }, { "pd"sv, gc::Pd }, { "pe"sv, gc::Pe }, { "pf"sv, gc::Pf },
		{ "pi"sv, gc::Pi }, { "po"sv, gc::Po }, { "privateuse"sv, gc::Co }, { "ps"sv, gc::Ps }, { "sc"sv, gc::Sc },
		{ "sk"sv, gc::Sk }, { "sm"sv, gc::Sm }, { "so"sv, gc::So }, { "spaceseparator"sv, gc::Zs }, { "spacingmark"sv, gc::Mc },
		{ "surrogate"sv, gc::Cs }, { "titlecaseletter"sv, gc::Lt }, { "unassigned"sv, gc::Cn }, { "uppercaseletter"sv, gc::Lu },
		{ "zl"sv, gc::Zl }, { "zp"sv, gc::Zp }, { "zs"sv, gc::Zs }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<gctype>{static_cast<gctype>(c->second)} : std::nullopt;
}

// Convert from text to sctype property
inline std::optional<sctype> stosctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using sc = sctype;

	static constexpr std::array<std::pair<std::string_view, sctype>, 142> labels =
	{ {
		{ "adlam"sv, sc::Adlam }, { "ahom"sv, sc::Ahom }, { "anatolianhieroglyphs"sv, sc::Anatolian_Hieroglyphs },
		{ "arabic"sv, sc::Arabic }, { "armenian"sv, sc::Armenian }, { "avestan"sv, sc::Avestan }, { "balinese"sv, sc::Balinese },
		{ "bamum"sv, sc::Bamum }, { "bassavah"sv, sc::Bassa_Vah }, { "batak"sv, sc::Batak }, { "bengali"sv, sc::Bengali },
		{ "bhaiksuki"sv, sc::Bhaiksuki }, { "bopomofo"sv, sc::Bopomofo }, { "brahmi"sv, sc::Brahmi },
		{ "braille"sv, sc::Braille }, { "buginese"sv, sc::Buginese }, { "buhid"sv, sc::Buhid },
		{ "canadianaboriginal"sv, sc::Canadian_Aboriginal }, { "carian"sv, sc::Carian },
		{ "caucasianalbanian"sv, sc::Caucasian_Albanian }, { "chakma"sv, sc::Chakma }, { "cham"sv, sc::Cham },
		{ "cherokee"sv, sc::Cherokee }, { "common"sv, sc::Common }, { "coptic"sv, sc::Coptic }, { "cuneiform"sv, sc::Cuneiform },
		{ "cypriot"sv, sc::Cypriot }, { "cyrillic"sv, sc::Cyrillic }, { "deseret"sv, sc::Deseret },
		{ "devanagari"sv, sc::Devanagari }, { "duployan"sv, sc::Duployan },
		{ "egyptianhieroglyphs"sv, sc::Egyptian_Hieroglyphs }, { "elbasan"sv, sc::Elbasan }, { "ethiopic"sv, sc::Ethiopic },
		{ "georgian"sv, sc::Georgian }, { "glagolitic"sv, sc::Glagolitic }, { "gothic"sv, sc::Gothic },
		{ "grantha"sv, sc::Grantha }, { "greek"sv, sc::Greek }, { "gujarati"sv, sc::Gujarati }, { "gurmukhi"sv, sc::Gurmukhi },
		{ "han"sv, sc::Han }, { "hangul"sv, sc::Hangul }, { "hanunoo"sv, sc::Hanunoo }, { "hatran"sv, sc::Hatran },
		{ "hebrew"sv, sc::Hebrew }, { "hiragana"sv, sc::Hiragana }, { "imperialaramaic"sv, sc::Imperial_Aramaic },
		{ "inherited"sv, sc::Inherited }, { "inscriptionalpahlavi"sv, sc::Inscriptional_Pahlavi },
		{ "inscriptionalparthian"sv, sc::Inscriptional_Parthian }, { "javanese"sv, sc::Javanese }, { "kaithi"sv, sc::Kaithi },
		{ "kannada"sv, sc::Kannada }, { "katakana"sv, sc::Katakana }, { "kayahli"sv, sc::Kayah_Li },
		{ "kharoshthi"sv, sc::Kharoshthi }, { "khmer"sv, sc::Khmer }, { "khojki"sv, sc::Khojki },
		{ "khudawadi"sv, sc::Khudawadi }, { "lao"sv, sc::Lao }, { "latin"sv, sc::Latin }, { "lepcha"sv, sc::Lepcha },
		{ "limbu"sv, sc::Limbu }, { "lineara"sv, sc::Linear_A }, { "linearb"sv, sc::Linear_B }, { "lisu"sv, sc::Lisu },
		{ "lycian"sv, sc::Lycian }, { "lydian"sv, sc::Lydian }, { "mahajani"sv, sc::Mahajani }, { "malayalam"sv, sc::Malayalam },
		{ "mandaic"sv, sc::Mandaic }, { "manichaean"sv, sc::Manichaean }, { "marchen"sv, sc::Marchen },
		{ "masaramgondi"sv, sc::Masaram_Gondi }, { "meeteimayek"sv, sc::Meetei_Mayek }, { "mendekikakui"sv, sc::Mende_Kikakui },
		{ "meroiticcursive"sv, sc::Meroitic_Cursive }, { "meroitichieroglyphs"sv, sc::Meroitic_Hieroglyphs },
		{ "miao"sv, sc::Miao }, { "modi"sv, sc::Modi }, { "mongolian"sv, sc::Mongolian }, { "mro"sv, sc::Mro },
		{ "multani"sv, sc::Multani }, { "myanmar"sv, sc::Myanmar }, { "nabataean"sv, sc::Nabataean }, { "newa"sv, sc::Newa },
		{ "newtailue"sv, sc::New_Tai_Lue }, { "nko"sv, sc::Nko }, { "nushu"sv, sc::Nushu }, { "ogham"sv, sc::Ogham },
		{ "olchiki"sv, sc::Ol_Chiki }, { "oldhungarian"sv, sc::Old_Hungarian }, { "olditalic"sv, sc::Old_Italic },
		{ "oldnortharabian"sv, sc::Old_North_Arabian }, { "oldpermic"sv, sc::Old_Permic }, { "oldpersian"sv, sc::Old_Persian },
		{ "oldsoutharabian"sv, sc::Old_South_Arabian }, { "oldturkic"sv, sc::Old_Turkic }, { "oriya"sv, sc::Oriya },
		{ "osage"sv, sc::Osage }, { "osmanya"sv, sc::Osmanya }, { "pahawhhmong"sv, sc::Pahawh_Hmong },
		{ "palmyrene"sv, sc::Palmyrene }, { "paucinhau"sv, sc::Pau_Cin_Hau }, { "phagspa"sv, sc::Phags_Pa },
		{ "phoenician"sv, sc::Phoenician }, { "psalterpahlavi"sv, sc::Psalter_Pahlavi }, { "rejang"sv, sc::Rejang },
		{ "runic"sv, sc::Runic }, { "samaritan"sv, sc::Samaritan }, { "saurashtra"sv, sc::Saurashtra },
		{ "sharada"sv, sc::Sharada }, { "shavian"sv, sc::Shavian }, { "siddham"sv, sc::Siddham },
		{ "signwriting"sv, sc::SignWriting }, { "sinhala"sv, sc::Sinhala }, { "sorasompeng"sv, sc::Sora_Sompeng },
		{ "soyombo"sv, sc::Soyombo }, { "sundanese"sv, sc::Sundanese }, { "sylotinagri"sv, sc::Syloti_Nagri },
		{ "syriac"sv, sc::Syriac }, { "tagalog"sv, sc::Tagalog }, { "tagbanwa"sv, sc::Tagbanwa }, { "taile"sv, sc::Tai_Le },
		{ "taitham"sv, sc::Tai_Tham }, { "taiviet"sv, sc::Tai_Viet }, { "takri"sv, sc::Takri }, { "tamil"sv, sc::Tamil },
		{ "tangut"sv, sc::Tangut }, { "telugu"sv, sc::Telugu }, { "thaana"sv, sc::Thaana }, { "thai"sv, sc::Thai },
		{ "tibetan"sv, sc::Tibetan }, { "tifinagh"sv, sc::Tifinagh }, { "tirhuta"sv, sc::Tirhuta },
		{ "ugaritic"sv, sc::Ugaritic }, { "unknown"sv, sc::Unknown }, { "vai"sv, sc::Vai }, { "warangciti"sv, sc::Warang_Citi },
		{ "yi"sv, sc::Yi }, { "zanabazarsquare"sv, sc::Zanabazar_Square }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<sctype>{static_cast<sctype>(c->second)} : std::nullopt;
}

namespace detail
{

template <class InputIt, class OutputIt>
void run_length_decode(InputIt first, InputIt last, OutputIt dest)
{
	using value_type = typename std::iterator_traits<InputIt>::value_type;
	constexpr auto seqmask = static_cast<value_type>(0x03ull << (std::numeric_limits<value_type>::digits - 2));
	while (first != last) {
		auto const lead = *first++;
		if ((lead & seqmask) == seqmask)
			dest = ::std::fill_n(dest, static_cast<std::size_t>(lead & ~seqmask) + 1, *first++);
		else
			*dest++ = lead;
	}
}

} // namespace detail

inline std::int_least32_t ucd_record::case_mapping(std::size_t index) noexcept
{
	static constexpr std::array<std::int_least32_t, 178> casemappings =
	{
		0, 32, -32, 775, 743, 7615, 121, 1, -1, -121, -268, -300, 195, 210, 206, 205, 79, 202, 203, 207, 97, 211, 209, 163, 213,
		130, 214, 218, 217, 219, 56, 2, -2, -79, -97, -56, -130, 10795, -163, 10792, 10815, -195, 69, 71, 10783, 10780, 10782, -210,
		-206, -205, -202, -203, 42319, 42315, -207, 42280, 42308, -209, -211, 10743, 42305, 10749, -213, -214, 10727, -218, 42282,
		-69, -217, -71, -219, 42261, 42258, 116, 84, 38, 37, 64, 63, -38, -37, -31, -64, -63, 8, -30, -62, -25, -57, -15, -47, -22,
		-54, -8, -86, -48, -80, 7, -116, -60, -96, -7, 80, 15, 48, 7264, 38864, -6222, -6254, -6221, -6253, -6212, -6244, -6210,
		-6242, -6211, -6243, -6204, -6236, -6180, -6181, 35267, 35266, 35332, 3814, -58, -59, -7615, 74, 86, 100, 128, 112, 126,
		-74, -9, -7173, -7205, -100, -112, -128, -126, -7517, -8383, -8262, 28, -28, 16, -16, 26, -26, -10743, -3814, -10727, -10795,
		-10792, -10780, -10749, -10783, -10782, -10815, -7264, -35332, -42280, -42308, -42319, -42315, -42305, -42258, -42282, -42261,
		928, -928, -38864, 40, -40, 34, -34
	};

	return casemappings[index];
}

inline std::unique_ptr<ucd_record::raw_record_table> ucd_record::decompress_table()
{
	static constexpr std::array<std::uint_least8_t, 625> rlestage1 =
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
		33, 34, 35, 36, 37, 38, 39, 40, 194, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 72, 75, 76, 193, 77, 67, 78, 193, 67, 79, 80, 81, 82, 83, 84, 85, 86,
		87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 242, 97, 98, 255, 97, 255, 97, 99, 100, 199, 101, 102, 193, 103, 104, 105, 106, 107,
		108, 109, 110, 111, 112, 113, 114, 115, 255, 35, 116, 207, 117, 241, 118, 193, 119, 120, 121, 122, 123, 124, 125, 126, 127,
		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 136, 193, 143, 144, 136, 145, 146, 147, 148, 149,
		150, 151, 152, 153, 154, 193, 136, 155, 194, 136, 156, 157, 158, 159, 160, 161, 162, 136, 163, 164, 136, 165, 166, 167, 168,
		193, 136, 169, 193, 136, 170, 171, 193, 136, 172, 173, 174, 196, 136, 198, 175, 176, 177, 175, 178, 212, 136, 199, 179, 180,
		222, 136, 195, 181, 182, 255, 136, 195, 183, 184, 185, 186, 187, 197, 136, 188, 189, 238, 190, 191, 196, 190, 192, 192, 255,
		136, 192, 193, 192, 194, 192, 195, 193, 196, 192, 197, 209, 136, 192, 198, 192, 199, 229, 136, 96, 192, 200, 192, 201, 192,
		202, 192, 203, 136, 192, 204, 136, 192, 205, 192, 206, 192, 207, 192, 208, 192, 209, 192, 210, 192, 211, 192, 212, 195, 213,
		192, 214, 192, 215, 201, 136, 192, 216, 206, 136, 192, 217, 192, 218, 192, 219, 200, 136, 192, 220, 192, 221, 193, 136, 192,
		222, 192, 223, 192, 224, 192, 225, 192, 226, 136, 96, 192, 227, 196, 96, 192, 228, 192, 229, 192, 230, 192, 231, 192, 232,
		192, 233, 192, 234, 202, 136, 192, 235, 255, 97, 255, 97, 255, 97, 255, 97, 255, 97, 192, 236, 223, 97, 192, 237, 97, 192,
		238, 235, 97, 192, 239, 248, 97, 192, 240, 215, 136, 195, 119, 192, 241, 201, 136, 192, 235, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192,
		235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255,
		136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255,
		136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 192, 242, 192, 243, 192,
		244, 192, 245, 219, 243, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 118, 255, 118,
		255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 192, 246, 255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 255,
		118, 192, 246
	};

	static constexpr std::array<std::uint_least16_t, 6163> rlestage2 =
	{
		49160, 0, 1, 49155, 2, 49169, 0, 3, 4, 5, 6, 7, 49153, 6, 8, 9, 10, 6, 11, 12, 13, 14, 6, 49161, 15, 16, 12, 49154, 11, 4,
		6, 49157, 17, 49171, 18, 9, 6, 10, 19, 20, 21, 49157, 22, 49153, 23, 49153, 24, 49167, 23, 9, 11, 10, 11, 0, 49156, 25, 26,
		49177, 25, 27, 28, 49155, 29, 30, 28, 31, 30, 32, 33, 34, 35, 30, 31, 30, 34, 49153, 36, 31, 37, 28, 38, 31, 36, 32, 39,
		49154, 36, 28, 49174, 40, 34, 49158, 40, 41, 49174, 42, 34, 49158, 42, 43, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 46, 47, 48, 44, 45, 44, 45, 44, 45, 49, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 50,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 51, 44, 45, 44, 45, 44, 45, 52, 53, 54, 44, 45, 44, 45, 55, 44,
		45, 49153, 56, 44, 45, 49, 57, 58, 59, 44, 45, 56, 60, 61, 62, 63, 44, 45, 64, 49, 62, 65, 66, 67, 44, 45, 44, 45, 44, 45,
		68, 44, 45, 68, 49153, 49, 44, 45, 68, 44, 45, 49153, 69, 44, 45, 44, 45, 70, 44, 45, 49, 71, 44, 45, 49, 72, 49155, 71,
		73, 74, 75, 73, 74, 75, 73, 74, 75, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 76, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 48, 73, 74, 75, 44, 45, 77, 78, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 79,
		49, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 49157, 49, 80, 44, 45, 81, 82, 49153, 83, 44,
		45, 84, 85, 86, 44, 45, 44, 46, 44, 45, 44, 45, 44, 45, 87, 88, 89, 90, 91, 49, 49153, 92, 49, 93, 49, 94, 95, 49154, 49,
		92, 96, 49, 97, 49, 98, 99, 49, 100, 101, 99, 102, 103, 49153, 49, 101, 49, 104, 105, 49153, 49, 106, 49158, 49, 107, 49153,
		49, 108, 49153, 49, 108, 49154, 49, 109, 108, 110, 49153, 111, 112, 49156, 49, 113, 49, 71, 49159, 49, 114, 115, 49168, 49,
		49153, 116, 117, 49157, 116, 49158, 118, 49153, 119, 49155, 31, 49161, 118, 49153, 120, 49165, 31, 49156, 116, 49156, 31,
		49153, 121, 118, 31, 118, 49168, 31, 49220, 122, 123, 49160, 122, 124, 49159, 122, 49156, 125, 49157, 122, 49164, 125, 126,
		127, 126, 127, 118, 128, 126, 127, 49153, 129, 130, 49154, 131, 132, 133, 49155, 129, 128, 31, 134, 135, 49154, 136, 129,
		137, 129, 49153, 138, 139, 49168, 140, 129, 49160, 140, 141, 49154, 142, 139, 49168, 143, 144, 49160, 143, 145, 49153, 146,
		147, 148, 149, 150, 49153, 151, 152, 153, 154, 126, 127, 126, 127, 126, 127, 126, 127, 126, 127, 155, 156, 155, 156, 155,
		156, 155, 156, 155, 156, 155, 156, 155, 156, 157, 158, 159, 160, 161, 162, 163, 126, 127, 164, 126, 127, 165, 49154, 166,
		49167, 167, 49183, 168, 49183, 169, 49157, 170, 171, 170, 171, 49158, 170, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173,
		172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 174,
		49153, 175, 49153, 122, 175, 49153, 176, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173,
		172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172,
		173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 177, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172,
		173, 172, 173, 178, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172,
		173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173,
		172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172,
		173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173,
		129, 49189, 179, 49153, 129, 180, 49157, 181, 129, 49189, 182, 183, 129, 184, 185, 49153, 129, 49153, 186, 187, 129, 49168,
		188, 189, 49164, 188, 49165, 190, 191, 190, 192, 49153, 190, 193, 190, 194, 192, 194, 49159, 129, 49178, 195, 49156, 129,
		49154, 195, 192, 196, 49162, 129, 49156, 197, 198, 49154, 199, 49153, 200, 201, 132, 200, 49153, 202, 49162, 203, 132, 204,
		129, 200, 184, 49183, 205, 206, 49161, 205, 49159, 207, 49154, 208, 203, 209, 210, 49158, 203, 49161, 211, 49155, 200, 49153,
		205, 208, 49250, 205, 212, 205, 49158, 203, 198, 202, 49153, 210, 49155, 203, 49153, 213, 49153, 203, 202, 49154, 210, 203,
		49153, 205, 49161, 211, 49154, 205, 49153, 202, 205, 49154, 214, 49159, 215, 216, 215, 216, 129, 217, 218, 219, 49181, 218,
		49167, 220, 49162, 221, 49153, 129, 49154, 218, 49199, 205, 49189, 222, 49162, 223, 222, 49165, 129, 49161, 224, 49184, 225,
		49160, 226, 49153, 227, 228, 229, 230, 231, 232, 49156, 129, 49173, 233, 49153, 234, 49153, 235, 236, 49160, 234, 236, 49154,
		234, 236, 49155, 234, 237, 49153, 129, 49166, 238, 129, 49176, 239, 49154, 240, 49153, 129, 241, 129, 49162, 218, 49204,
		129, 49172, 205, 129, 49159, 205, 49173, 129, 49163, 203, 49153, 242, 198, 49158, 209, 49157, 210, 49166, 209, 203, 49154,
		243, 244, 49205, 245, 243, 244, 246, 245, 49154, 244, 49159, 243, 49155, 244, 246, 49153, 244, 245, 49153, 122, 49153, 246,
		49154, 243, 49161, 245, 49153, 243, 49153, 184, 49161, 247, 248, 249, 49165, 245, 250, 251, 49153, 252, 129, 49159, 250,
		49153, 129, 49153, 250, 49153, 129, 49173, 250, 129, 49158, 250, 129, 250, 49154, 129, 49155, 250, 49153, 129, 253, 250,
		254, 49153, 252, 49155, 251, 49153, 129, 49153, 252, 49153, 129, 49153, 252, 253, 250, 49159, 129, 254, 49155, 129, 49153,
		250, 129, 49154, 250, 49153, 251, 49153, 129, 49161, 255, 49153, 250, 49153, 256, 49157, 257, 258, 256, 250, 259, 49154,
		129, 49153, 260, 261, 129, 49157, 262, 49155, 129, 49153, 262, 49153, 129, 49173, 262, 129, 49158, 262, 129, 49153, 262,
		129, 49153, 262, 129, 49153, 262, 49153, 129, 263, 129, 49154, 261, 49153, 260, 49155, 129, 49153, 260, 49153, 129, 49153,
		260, 263, 49154, 129, 260, 49158, 129, 49155, 262, 129, 262, 49158, 129, 49161, 264, 49153, 260, 49154, 262, 260, 49162,
		129, 49153, 265, 266, 129, 49160, 267, 129, 49154, 267, 129, 49173, 267, 129, 49158, 267, 129, 49153, 267, 129, 49156, 267,
		49153, 129, 268, 267, 49154, 266, 49156, 265, 129, 49153, 265, 266, 129, 49153, 266, 268, 49153, 129, 267, 49166, 129, 49153,
		267, 49153, 265, 49153, 129, 49161, 269, 270, 271, 49158, 129, 267, 49154, 265, 49154, 268, 129, 272, 49153, 273, 129, 49159,
		274, 49153, 129, 49153, 274, 49153, 129, 49173, 274, 129, 49158, 274, 129, 49153, 274, 129, 49156, 274, 49153, 129, 275,
		274, 276, 272, 273, 49155, 272, 49153, 129, 49153, 273, 49153, 129, 49153, 273, 275, 49159, 129, 272, 276, 49155, 129, 49153,
		274, 129, 49154, 274, 49153, 272, 49153, 129, 49161, 277, 278, 274, 49157, 279, 49161, 129, 280, 281, 129, 49157, 281, 49154,
		129, 49154, 281, 129, 49155, 281, 49154, 129, 49153, 281, 129, 281, 129, 49153, 281, 49154, 129, 49153, 281, 49154, 129,
		49154, 281, 49154, 129, 49163, 281, 49155, 129, 282, 283, 280, 49153, 283, 49154, 129, 49154, 283, 129, 49154, 283, 284,
		49153, 129, 281, 49157, 129, 282, 49165, 129, 49161, 285, 49154, 286, 49157, 287, 288, 287, 49156, 129, 289, 49154, 290,
		129, 49159, 291, 129, 49154, 291, 129, 49174, 291, 129, 49167, 291, 49154, 129, 291, 49154, 289, 49155, 290, 129, 49154,
		289, 129, 49154, 289, 292, 49158, 129, 49153, 289, 129, 49154, 291, 49156, 129, 49153, 291, 49153, 289, 49153, 129, 49161,
		293, 49159, 129, 49158, 294, 295, 296, 297, 49153, 298, 129, 49159, 296, 129, 49154, 296, 129, 49174, 296, 129, 49161, 296,
		129, 49156, 296, 49153, 129, 299, 296, 298, 297, 49153, 298, 300, 49153, 298, 129, 297, 49153, 298, 129, 49153, 298, 297,
		299, 49158, 129, 49153, 300, 49158, 129, 296, 129, 49153, 296, 49153, 297, 49153, 129, 49161, 301, 129, 49153, 296, 49164,
		129, 49153, 302, 49153, 303, 129, 49159, 304, 129, 49154, 304, 129, 49192, 304, 49153, 305, 304, 306, 49153, 303, 49155,
		302, 129, 49154, 303, 129, 49154, 303, 305, 304, 307, 49155, 129, 49154, 304, 306, 49158, 308, 49154, 304, 49153, 302, 49153,
		129, 49161, 309, 49160, 308, 307, 49157, 304, 49153, 129, 49153, 310, 129, 49169, 311, 49154, 129, 49175, 311, 129, 49160,
		311, 129, 311, 49153, 129, 49158, 311, 49154, 129, 312, 49155, 129, 313, 49153, 310, 49154, 314, 129, 314, 129, 49158, 310,
		313, 49157, 129, 49161, 315, 49153, 129, 49153, 310, 316, 49163, 129, 49199, 317, 318, 317, 319, 49158, 318, 49155, 129,
		320, 49156, 321, 317, 322, 49157, 323, 318, 323, 324, 49161, 325, 49153, 326, 49188, 129, 49153, 327, 129, 327, 49153, 129,
		49153, 327, 129, 327, 49153, 129, 327, 49157, 129, 49155, 327, 129, 49158, 327, 129, 49154, 327, 129, 327, 129, 327, 49153,
		129, 49153, 327, 129, 49155, 327, 328, 327, 329, 49157, 328, 129, 49153, 328, 327, 49153, 129, 49156, 330, 129, 331, 129,
		49156, 332, 328, 49153, 129, 49161, 333, 49153, 129, 49155, 327, 49183, 129, 334, 49154, 335, 49155, 336, 337, 49155, 336,
		49157, 337, 335, 336, 49154, 335, 49153, 338, 49157, 335, 49161, 339, 49161, 340, 335, 338, 335, 338, 335, 338, 341, 342,
		341, 342, 49153, 343, 49159, 334, 129, 49187, 334, 49155, 129, 49165, 344, 345, 49153, 344, 49154, 338, 336, 49153, 338,
		49156, 334, 49162, 344, 129, 49187, 344, 129, 49159, 335, 338, 49157, 335, 129, 49153, 335, 49156, 336, 49155, 346, 49153,
		336, 49188, 129, 49194, 347, 49153, 348, 49155, 349, 348, 49156, 349, 350, 348, 49153, 350, 49153, 348, 49153, 349, 347,
		49161, 351, 49153, 352, 49155, 353, 49157, 347, 49153, 348, 49153, 349, 49155, 347, 49154, 349, 347, 348, 49153, 354, 49153,
		347, 49153, 348, 49156, 354, 49154, 347, 49155, 349, 49164, 347, 349, 49153, 348, 49153, 349, 49157, 355, 350, 347, 355,
		49161, 351, 49153, 355, 348, 349, 49153, 356, 49189, 357, 129, 357, 49156, 129, 357, 49153, 129, 49194, 358, 359, 360, 49154,
		358, 49246, 361, 49153, 362, 49310, 361, 49224, 363, 129, 49155, 363, 49153, 129, 49158, 363, 129, 363, 129, 49155, 363,
		49153, 129, 49192, 363, 129, 49155, 363, 49153, 129, 49184, 363, 129, 49155, 363, 49153, 129, 49158, 363, 129, 363, 129,
		49155, 363, 49153, 129, 49166, 363, 129, 49208, 363, 129, 49155, 363, 49153, 129, 49218, 363, 49153, 129, 49153, 364, 365,
		366, 367, 368, 49155, 367, 49153, 368, 49160, 369, 49162, 370, 49154, 129, 49167, 363, 49161, 371, 49157, 129, 49231, 372,
		49157, 373, 49153, 129, 49157, 374, 49153, 129, 375, 49515, 376, 377, 378, 49168, 376, 379, 49177, 380, 381, 382, 49154,
		129, 49226, 383, 49154, 132, 49154, 384, 49159, 383, 49158, 129, 49164, 385, 129, 49155, 385, 49153, 386, 387, 49162, 129,
		49169, 388, 49153, 389, 390, 49153, 184, 49160, 129, 49169, 391, 49153, 392, 49163, 129, 49164, 393, 129, 49154, 393, 129,
		49153, 394, 49163, 129, 49203, 395, 49153, 396, 397, 49158, 398, 49159, 397, 398, 49153, 397, 49162, 399, 49154, 400, 401,
		49153, 402, 400, 403, 395, 399, 49153, 129, 49161, 404, 49157, 129, 49161, 405, 49157, 129, 49153, 406, 132, 184, 407, 132,
		408, 406, 407, 409, 410, 49154, 411, 412, 129, 49161, 413, 49157, 129, 49186, 414, 415, 49203, 414, 49159, 129, 49156, 414,
		49153, 416, 49185, 414, 417, 414, 49156, 129, 49221, 376, 49161, 129, 49182, 418, 129, 49154, 419, 49155, 420, 49153, 419,
		49154, 420, 49155, 129, 49153, 420, 419, 49157, 420, 49154, 421, 49155, 129, 422, 49154, 129, 49153, 423, 49161, 424, 49181,
		425, 49153, 129, 49156, 425, 49162, 129, 49195, 426, 49155, 129, 49156, 426, 49154, 427, 49153, 426, 427, 49166, 426, 49157,
		129, 49161, 428, 429, 49154, 129, 49153, 430, 49183, 431, 49174, 432, 49153, 433, 49153, 434, 433, 49153, 129, 49153, 435,
		49204, 436, 437, 438, 437, 49158, 438, 129, 439, 437, 438, 49153, 437, 49159, 438, 49157, 437, 49153, 438, 49159, 440, 49153,
		129, 440, 49161, 441, 49157, 129, 49161, 441, 49157, 129, 49158, 442, 443, 49155, 444, 49153, 442, 49153, 129, 49165, 122,
		445, 49216, 129, 49155, 446, 447, 49198, 448, 449, 447, 49156, 446, 447, 446, 49156, 447, 446, 447, 450, 49158, 448, 49155,
		129, 49161, 451, 49153, 452, 453, 454, 49153, 452, 453, 49161, 455, 49160, 449, 49160, 455, 49154, 129, 49153, 456, 457,
		49181, 458, 457, 49155, 456, 49153, 457, 49153, 456, 459, 460, 49153, 456, 49153, 458, 49161, 461, 49157, 458, 49189, 462,
		463, 464, 49153, 465, 49154, 464, 465, 464, 49154, 465, 49153, 466, 49159, 129, 49155, 467, 49187, 468, 49159, 469, 49159,
		470, 49153, 469, 471, 472, 49154, 129, 49153, 473, 49154, 474, 49161, 475, 49154, 129, 49154, 468, 49161, 476, 49181, 477,
		49154, 478, 479, 49153, 478, 49153, 480, 481, 482, 483, 49153, 484, 485, 486, 487, 488, 49206, 129, 49159, 489, 49159, 129,
		49154, 122, 490, 49164, 122, 491, 49158, 122, 49155, 492, 122, 49155, 492, 49153, 493, 122, 49153, 492, 491, 49153, 122,
		49157, 129, 49189, 49, 49156, 165, 494, 49200, 116, 49156, 495, 117, 49154, 116, 49156, 495, 49164, 49, 496, 497, 49154,
		49, 498, 49175, 49, 499, 49155, 49, 49160, 500, 501, 49154, 500, 501, 49173, 500, 502, 49155, 125, 49163, 122, 49174, 125,
		49165, 208, 49156, 122, 129, 49153, 125, 49154, 122, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 46, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 44, 45, 44, 45, 44, 45, 44, 45, 49155, 48, 50, 503, 49153, 49, 504, 49, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		46, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 49159, 505, 49159, 506, 49157, 505,
		49153, 129, 49157, 506, 49153, 129, 49159, 505, 49159, 506, 49159, 505, 49159, 506, 49157, 505, 49153, 129, 49157, 506, 49153,
		129, 139, 505, 139, 505, 139, 505, 139, 505, 129, 506, 129, 506, 129, 506, 129, 506, 49159, 505, 49159, 506, 49153, 507,
		49155, 508, 49153, 509, 49153, 510, 49153, 511, 49153, 512, 49153, 129, 49159, 513, 49159, 514, 49159, 513, 49159, 514, 49159,
		513, 49159, 514, 49153, 505, 49154, 513, 129, 139, 513, 49153, 506, 49153, 515, 516, 128, 517, 49154, 128, 49154, 513, 129,
		139, 513, 49155, 518, 516, 49154, 128, 49153, 505, 49153, 139, 49153, 129, 49153, 139, 49153, 506, 49153, 519, 129, 49154,
		128, 49153, 505, 49154, 139, 159, 49153, 139, 49153, 506, 49153, 520, 164, 49154, 128, 49153, 129, 49154, 513, 129, 139,
		513, 49153, 521, 49153, 522, 516, 49153, 128, 129, 49162, 27, 35, 523, 524, 49153, 525, 49157, 526, 527, 28, 528, 529, 530,
		49153, 33, 39, 530, 33, 49155, 28, 531, 49153, 28, 531, 532, 533, 49156, 534, 27, 49153, 28, 49154, 527, 49155, 28, 33, 39,
		28, 49153, 535, 28, 536, 537, 49154, 28, 34, 538, 539, 49154, 535, 49159, 28, 34, 540, 536, 49161, 28, 27, 35, 49155, 541,
		542, 49155, 534, 49157, 35, 36, 501, 49153, 129, 49157, 36, 543, 544, 543, 545, 546, 500, 49161, 36, 543, 544, 543, 545,
		546, 129, 49164, 500, 49154, 129, 49183, 320, 49167, 129, 49164, 547, 49155, 445, 547, 49154, 445, 49153, 547, 49155, 125,
		49156, 547, 125, 49166, 129, 49153, 346, 548, 49155, 346, 548, 49153, 346, 549, 49154, 548, 49153, 549, 49154, 548, 549,
		346, 548, 49153, 346, 550, 49156, 548, 49157, 346, 548, 346, 551, 346, 548, 552, 553, 554, 49153, 548, 555, 549, 49153, 548,
		556, 548, 549, 49155, 557, 558, 49153, 346, 49153, 549, 49153, 548, 49156, 543, 548, 49153, 549, 49153, 559, 346, 543, 49153,
		346, 560, 346, 49167, 36, 49167, 561, 49167, 562, 49154, 563, 44, 45, 49155, 563, 36, 49153, 346, 49155, 129, 49156, 34,
		49156, 564, 49153, 34, 49155, 564, 34, 49153, 564, 34, 49153, 564, 34, 564, 30, 49156, 564, 34, 30, 49153, 564, 49155, 30,
		49153, 564, 49155, 30, 49169, 564, 49153, 34, 49153, 564, 34, 564, 34, 49158, 564, 30, 564, 49157, 30, 49153, 564, 49165,
		30, 49181, 34, 565, 49388, 34, 49159, 30, 566, 567, 566, 567, 49171, 30, 49153, 34, 49158, 30, 538, 539, 49232, 30, 34, 49181,
		30, 49176, 34, 49153, 564, 30, 564, 49175, 30, 564, 49162, 30, 49157, 34, 564, 49219, 30, 49176, 568, 49162, 30, 49172, 568,
		49211, 36, 49177, 346, 49177, 569, 49177, 570, 49173, 36, 49311, 30, 49153, 564, 49163, 30, 49160, 564, 34, 49155, 30, 49156,
		564, 34, 49155, 30, 49153, 564, 49153, 30, 49153, 564, 49154, 30, 49156, 564, 49165, 30, 564, 30, 564, 49153, 30, 49157,
		564, 49162, 30, 49159, 34, 49156, 30, 49153, 564, 49208, 30, 564, 30, 564, 49180, 30, 49155, 564, 49160, 30, 49153, 564,
		34, 49271, 30, 538, 539, 538, 539, 538, 539, 538, 539, 538, 539, 538, 539, 538, 539, 49181, 36, 49195, 30, 49156, 34, 566,
		567, 49182, 34, 566, 567, 566, 567, 566, 567, 566, 567, 566, 567, 49167, 34, 49279, 571, 49154, 34, 566, 567, 566, 567, 566,
		567, 566, 567, 566, 567, 566, 567, 566, 567, 566, 567, 566, 567, 566, 567, 566, 567, 49214, 34, 566, 567, 566, 567, 49183,
		34, 566, 567, 49153, 34, 49199, 30, 49172, 34, 49153, 30, 49157, 34, 49190, 30, 49153, 568, 49183, 30, 49153, 568, 49185,
		30, 49154, 568, 49163, 30, 568, 49160, 30, 49176, 568, 49155, 30, 49167, 568, 49198, 572, 129, 49198, 573, 129, 44, 45, 574,
		575, 576, 577, 578, 44, 45, 44, 45, 44, 45, 579, 580, 581, 582, 49, 44, 45, 49, 44, 45, 49156, 49, 501, 500, 49153, 583,
		155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155,
		156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156,
		155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155,
		156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156, 155, 156,
		584, 49157, 585, 155, 156, 155, 156, 49154, 586, 155, 156, 49156, 129, 49155, 587, 588, 49153, 587, 49189, 589, 129, 589,
		49156, 129, 589, 49153, 129, 49207, 590, 49158, 129, 591, 592, 49165, 129, 593, 49174, 363, 49160, 129, 49158, 363, 129,
		49158, 363, 129, 49158, 363, 129, 49158, 363, 129, 49158, 363, 129, 49158, 363, 129, 49158, 363, 129, 49158, 363, 129, 49183,
		594, 49153, 28, 595, 596, 595, 596, 49154, 28, 595, 596, 28, 595, 596, 49160, 28, 526, 49153, 28, 526, 28, 595, 596, 49153,
		28, 595, 596, 538, 539, 538, 539, 538, 539, 538, 539, 49155, 28, 535, 597, 49161, 28, 49153, 526, 535, 49154, 28, 526, 598,
		530, 49158, 28, 49205, 568, 49177, 599, 129, 49240, 599, 49163, 129, 49365, 599, 49177, 129, 49153, 600, 49153, 346, 49159,
		600, 49155, 129, 27, 598, 535, 28, 346, 601, 602, 603, 538, 539, 538, 539, 530, 604, 530, 604, 538, 539, 49153, 30, 538,
		539, 538, 539, 538, 539, 538, 539, 526, 530, 49153, 604, 30, 49160, 603, 49155, 122, 49153, 605, 526, 49156, 206, 49153,
		346, 49154, 603, 606, 492, 359, 49153, 346, 129, 49237, 607, 49153, 129, 49153, 122, 49153, 608, 49153, 609, 607, 610, 49241,
		611, 359, 120, 49153, 612, 611, 49156, 129, 49193, 613, 49153, 129, 49202, 361, 362, 49193, 361, 129, 49153, 346, 49155,
		36, 49161, 346, 49178, 613, 49156, 129, 49187, 346, 49163, 129, 49167, 611, 49182, 614, 129, 49161, 36, 49181, 346, 49159,
		36, 346, 49166, 36, 49182, 614, 346, 49161, 36, 49190, 346, 49166, 36, 49167, 346, 49198, 615, 129, 49239, 615, 49319, 346,
		49333, 616, 49161, 129, 49215, 346, 49258, 616, 49172, 129, 49172, 617, 618, 49398, 617, 49154, 129, 49206, 619, 49160, 129,
		49191, 620, 49157, 621, 622, 623, 49291, 624, 625, 626, 49153, 627, 49167, 624, 49161, 628, 49153, 624, 49171, 129, 172,
		173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173,
		172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 629, 175, 49154, 176,
		630, 49159, 594, 49153, 175, 630, 631, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172,
		173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 49153, 632, 49153, 594, 49221, 633, 49161, 634, 49153, 635, 636, 637,
		49154, 638, 637, 49159, 129, 49174, 639, 49160, 118, 49153, 31, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 49153,
		49, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45,
		44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44,
		45, 500, 49159, 49, 44, 45, 44, 45, 640, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 118, 49153, 639, 44, 45, 641, 49, 71, 44,
		45, 44, 45, 49153, 49, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 44, 45, 642, 643, 644, 645,
		642, 129, 646, 647, 648, 649, 44, 45, 44, 45, 49214, 129, 71, 49153, 116, 49, 49156, 71, 49153, 650, 651, 49154, 650, 651,
		49155, 650, 651, 49174, 650, 49153, 652, 49153, 653, 652, 49155, 654, 49155, 129, 49157, 36, 49153, 346, 320, 346, 49157,
		129, 49203, 655, 49153, 656, 49153, 657, 49159, 129, 49153, 658, 49201, 659, 49167, 658, 660, 661, 49159, 129, 49153, 662,
		49161, 663, 49157, 129, 49169, 246, 49157, 245, 49154, 248, 245, 248, 245, 49153, 129, 49161, 664, 49179, 665, 49156, 666,
		49154, 667, 490, 668, 49174, 669, 49162, 670, 671, 672, 49162, 129, 673, 49180, 361, 49154, 129, 49154, 674, 675, 49198,
		676, 677, 49153, 675, 49155, 674, 49153, 675, 674, 49154, 675, 678, 49157, 679, 680, 49153, 681, 49155, 679, 129, 206, 49161,
		682, 49155, 129, 49153, 679, 49156, 347, 350, 683, 49160, 347, 49161, 351, 49156, 347, 129, 49192, 684, 49157, 685, 49153,
		686, 49153, 685, 49153, 686, 49153, 685, 49160, 129, 49154, 684, 685, 49159, 684, 685, 686, 49153, 129, 49161, 687, 49153,
		129, 688, 49154, 689, 49167, 347, 683, 49157, 347, 49154, 356, 347, 355, 350, 355, 49153, 347, 49199, 690, 691, 690, 49154,
		691, 49153, 692, 49153, 691, 692, 690, 49153, 692, 690, 691, 693, 694, 693, 694, 49175, 129, 49153, 690, 695, 696, 697, 49162,
		698, 699, 49153, 700, 49153, 699, 49153, 701, 698, 49153, 702, 699, 703, 49161, 129, 49157, 363, 49153, 129, 49157, 363,
		49153, 129, 49157, 363, 49160, 129, 49158, 363, 129, 49158, 363, 129, 49186, 49, 704, 49158, 49, 31, 49155, 116, 49156, 49,
		165, 49161, 129, 49231, 705, 49186, 698, 49153, 699, 700, 49153, 699, 700, 49153, 699, 701, 706, 703, 49153, 129, 49161,
		707, 49157, 129, 49187, 361, 49163, 129, 49174, 361, 49155, 129, 49200, 361, 49155, 129, 49279, 708, 49279, 709, 49293, 710,
		49153, 616, 710, 616, 710, 49153, 616, 49161, 710, 616, 710, 616, 710, 49153, 616, 49153, 710, 49154, 616, 49219, 710, 49153,
		129, 49257, 710, 49189, 129, 49158, 50, 49163, 129, 49156, 183, 49156, 129, 195, 190, 49161, 195, 711, 49164, 195, 129, 49156,
		195, 129, 195, 129, 49153, 195, 129, 49153, 195, 129, 49161, 195, 49249, 205, 49167, 712, 49168, 129, 49290, 205, 49157,
		713, 49369, 205, 539, 538, 49167, 129, 49215, 205, 49153, 129, 49205, 205, 49159, 129, 49183, 714, 49161, 205, 49153, 713,
		201, 202, 49153, 129, 49167, 715, 49154, 359, 716, 49154, 359, 717, 718, 359, 49157, 129, 49165, 122, 49153, 175, 359, 49153,
		610, 49153, 536, 717, 718, 717, 718, 717, 718, 717, 718, 717, 718, 717, 718, 719, 720, 719, 720, 49153, 28, 717, 718, 49155,
		359, 49154, 536, 49153, 132, 721, 129, 132, 722, 49153, 184, 610, 717, 718, 717, 718, 717, 718, 49153, 359, 723, 543, 724,
		49154, 543, 129, 723, 320, 49153, 359, 49155, 129, 713, 205, 713, 205, 713, 129, 713, 205, 713, 205, 713, 205, 713, 205,
		713, 49277, 205, 49153, 129, 35, 129, 184, 725, 359, 320, 49153, 359, 726, 717, 718, 359, 543, 132, 610, 721, 359, 49161,
		727, 722, 132, 49154, 543, 184, 359, 49157, 728, 49171, 40, 717, 723, 718, 729, 536, 31, 49157, 730, 49171, 42, 717, 543,
		718, 543, 717, 718, 184, 719, 720, 132, 359, 49161, 611, 120, 49196, 611, 49153, 731, 362, 49181, 361, 49154, 129, 49157,
		361, 49153, 129, 49157, 361, 49153, 129, 49157, 361, 49153, 129, 49154, 361, 49154, 129, 49153, 320, 543, 31, 346, 49153,
		320, 129, 346, 49155, 543, 49153, 346, 129, 49160, 542, 49154, 732, 49153, 346, 49153, 714, 49163, 733, 129, 49177, 733,
		129, 49170, 733, 129, 49153, 733, 129, 49166, 733, 49153, 129, 49165, 733, 49185, 129, 49274, 733, 49156, 129, 49154, 359,
		49155, 129, 49196, 36, 49154, 129, 49160, 346, 49204, 734, 49155, 735, 49168, 736, 49153, 735, 49154, 736, 129, 49163, 346,
		49155, 129, 736, 49198, 129, 49196, 346, 125, 49281, 129, 49180, 737, 49154, 129, 49200, 738, 49166, 129, 122, 49178, 36,
		49155, 129, 49183, 739, 49155, 740, 49160, 129, 49154, 739, 49168, 741, 742, 49159, 741, 742, 49156, 129, 49189, 743, 49156,
		744, 49156, 129, 49181, 745, 129, 746, 49187, 747, 49155, 129, 49159, 747, 748, 49156, 749, 49193, 129, 49191, 750, 49191,
		751, 49199, 752, 49181, 753, 49153, 129, 49161, 754, 49157, 129, 49187, 755, 49155, 129, 49187, 756, 49155, 129, 49191, 757,
		49159, 129, 49203, 758, 49162, 129, 759, 49167, 129, 49334, 760, 49160, 129, 49173, 760, 49161, 129, 49159, 760, 49175, 129,
		49157, 761, 49153, 129, 761, 129, 49195, 761, 129, 49153, 761, 49154, 129, 761, 49153, 129, 761, 49173, 762, 129, 763, 49159,
		764, 49174, 765, 49153, 766, 49158, 767, 49182, 768, 49159, 129, 49160, 769, 49199, 129, 49170, 770, 129, 49153, 770, 49156,
		129, 49156, 771, 49173, 772, 49157, 773, 49154, 129, 774, 49177, 775, 49156, 129, 776, 49215, 129, 49183, 777, 49175, 778,
		49155, 129, 49153, 779, 49153, 778, 49167, 779, 49153, 129, 49197, 779, 780, 49154, 781, 129, 49153, 781, 49156, 129, 49155,
		781, 49155, 780, 129, 49154, 780, 129, 49178, 780, 49155, 129, 49154, 782, 49155, 129, 782, 49159, 783, 49159, 129, 49157,
		784, 49153, 785, 784, 49158, 129, 49180, 786, 49153, 787, 788, 49180, 789, 49154, 790, 49183, 129, 49159, 791, 792, 49179,
		791, 49153, 793, 49155, 129, 49156, 794, 49157, 795, 796, 49160, 129, 49205, 797, 49154, 129, 798, 49157, 799, 49173, 800,
		49153, 129, 49159, 801, 49170, 802, 49156, 129, 49159, 803, 49169, 804, 49158, 129, 49155, 805, 49163, 129, 49158, 806, 49231,
		129, 49224, 807, 49206, 129, 49202, 808, 49164, 129, 49202, 809, 49158, 129, 49157, 810, 49247, 129, 49182, 811, 129, 812,
		813, 812, 49204, 814, 49165, 813, 815, 49153, 816, 49156, 817, 49155, 129, 49171, 818, 49161, 819, 49166, 129, 815, 49153,
		820, 821, 49196, 822, 49154, 821, 49155, 823, 49153, 821, 49153, 824, 49153, 825, 826, 49155, 827, 49165, 129, 49176, 828,
		49158, 129, 49161, 829, 49157, 129, 49154, 830, 49187, 831, 49156, 830, 832, 49157, 830, 49153, 833, 129, 49161, 834, 835,
		49154, 836, 49163, 129, 49186, 837, 838, 49153, 839, 837, 49160, 129, 49153, 840, 841, 49199, 842, 49154, 841, 49160, 840,
		841, 843, 49155, 842, 49153, 844, 49154, 845, 49154, 846, 844, 49153, 129, 49161, 847, 842, 845, 842, 845, 49153, 844, 129,
		49171, 848, 49162, 129, 49169, 849, 129, 49176, 849, 49154, 850, 49154, 851, 49153, 850, 851, 852, 853, 851, 49153, 854,
		855, 49153, 854, 856, 851, 49216, 129, 49158, 857, 129, 857, 129, 49155, 857, 129, 49166, 857, 129, 49161, 857, 858, 49157,
		129, 49198, 859, 860, 49154, 861, 49157, 860, 49153, 862, 49156, 129, 49161, 863, 49157, 129, 49153, 864, 49153, 865, 129,
		49159, 866, 49153, 129, 49153, 866, 49153, 129, 49173, 866, 129, 49158, 866, 129, 49153, 866, 129, 49156, 866, 49153, 129,
		867, 866, 868, 865, 864, 49155, 865, 49153, 129, 49153, 865, 49153, 129, 49153, 865, 869, 49153, 129, 866, 49157, 129, 868,
		49156, 129, 870, 49155, 866, 49153, 865, 49153, 129, 49158, 867, 49154, 129, 49156, 867, 49162, 129, 49204, 871, 49154, 872,
		49159, 873, 49153, 872, 874, 49153, 873, 872, 874, 49155, 871, 49153, 875, 876, 49153, 877, 49161, 878, 129, 876, 129, 877,
		49185, 129, 49199, 879, 880, 49153, 881, 49157, 882, 881, 882, 49153, 881, 880, 881, 49153, 882, 881, 49153, 883, 49153,
		879, 884, 879, 49159, 129, 49161, 885, 49189, 129, 49198, 886, 887, 49153, 888, 49155, 889, 49153, 129, 49155, 888, 49153,
		889, 888, 49153, 890, 891, 49153, 892, 49153, 893, 49154, 894, 49166, 892, 49155, 886, 49153, 889, 49185, 129, 49199, 895,
		49154, 896, 49159, 897, 49153, 896, 897, 896, 898, 897, 49153, 899, 900, 895, 49162, 129, 49161, 901, 49157, 129, 49164,
		406, 49170, 129, 49194, 902, 903, 904, 903, 49153, 904, 49157, 903, 905, 906, 49159, 129, 49161, 907, 49205, 129, 49177,
		908, 49154, 129, 49154, 909, 49153, 910, 49155, 909, 910, 49155, 909, 911, 49155, 129, 49161, 912, 49153, 913, 49154, 914,
		915, 49247, 129, 49183, 916, 49183, 917, 49161, 918, 49160, 919, 49163, 129, 920, 921, 49157, 922, 49153, 923, 49153, 922,
		49191, 921, 924, 925, 49155, 922, 923, 921, 49155, 922, 49154, 926, 49153, 927, 49154, 926, 925, 49159, 129, 928, 49157,
		929, 49153, 930, 49154, 929, 49191, 928, 49153, 129, 49155, 928, 49164, 929, 930, 931, 932, 933, 49153, 934, 129, 49154,
		933, 49153, 935, 49180, 129, 49208, 936, 49158, 129, 49160, 937, 129, 49188, 937, 938, 49158, 939, 129, 49157, 939, 938,
		940, 937, 49153, 941, 942, 49153, 943, 49161, 129, 49161, 944, 49170, 945, 49154, 129, 946, 947, 49181, 948, 49153, 129,
		49173, 949, 129, 950, 49158, 949, 950, 49153, 949, 950, 49153, 949, 49224, 129, 49158, 951, 129, 49153, 951, 129, 49189,
		951, 49157, 952, 49154, 129, 952, 129, 49153, 952, 129, 49154, 952, 953, 952, 49153, 953, 951, 952, 49159, 129, 49161, 954,
		49189, 129, 49305, 955, 49253, 129, 49262, 956, 129, 49156, 957, 49162, 129, 49219, 955, 49211, 129, 49326, 958, 49232, 129,
		49350, 959, 49208, 129, 49336, 633, 49158, 129, 49182, 960, 129, 49161, 961, 49155, 129, 49153, 962, 49247, 129, 49181, 963,
		49153, 129, 49156, 964, 965, 49161, 129, 49199, 966, 49158, 967, 49153, 968, 969, 49153, 970, 49155, 971, 49153, 972, 49153,
		973, 968, 971, 49161, 129, 49161, 974, 129, 49158, 975, 129, 49172, 966, 49156, 129, 49170, 966, 49263, 129, 49220, 976,
		49162, 129, 976, 49197, 977, 49167, 129, 49155, 978, 49164, 979, 49215, 129, 980, 981, 49181, 129, 49388, 982, 49170, 129,
		49266, 982, 49164, 129, 611, 49437, 607, 49232, 129, 49419, 983, 49155, 129, 49258, 984, 49156, 129, 49164, 984, 49154, 129,
		49160, 984, 49158, 129, 49161, 984, 49153, 129, 985, 986, 987, 988, 49155, 35, 49243, 129, 49269, 346, 49161, 129, 49190,
		346, 49153, 129, 49211, 346, 989, 990, 49154, 122, 49154, 346, 491, 49156, 991, 49159, 35, 49159, 122, 49153, 346, 49158,
		122, 49181, 346, 49155, 122, 49210, 346, 49174, 129, 49217, 736, 49154, 992, 736, 49209, 129, 49238, 346, 49160, 129, 49169,
		36, 49165, 129, 49177, 548, 49159, 549, 49153, 559, 49167, 549, 49177, 548, 49158, 549, 129, 49153, 559, 49167, 549, 49177,
		548, 49159, 549, 49153, 559, 49167, 549, 548, 129, 49153, 548, 49153, 129, 548, 49153, 129, 49153, 548, 49153, 129, 49155,
		548, 129, 49159, 548, 49155, 549, 129, 549, 129, 549, 49153, 559, 49155, 549, 129, 49162, 549, 49177, 548, 49159, 549, 49153,
		559, 49167, 549, 49153, 548, 129, 49155, 548, 49153, 129, 49159, 548, 129, 49158, 548, 129, 49159, 549, 49153, 559, 49167,
		549, 49153, 548, 129, 49155, 548, 129, 49156, 548, 129, 548, 49154, 129, 49158, 548, 129, 49159, 549, 49153, 559, 49167,
		549, 49177, 548, 49159, 549, 49153, 559, 49167, 549, 49177, 548, 49159, 549, 49153, 559, 49167, 549, 49177, 548, 49159, 549,
		49153, 559, 49167, 549, 49177, 548, 49159, 549, 49153, 559, 49167, 549, 49177, 548, 49159, 549, 49153, 559, 49167, 549, 49177,
		548, 49159, 549, 49153, 559, 49169, 549, 49153, 129, 49176, 548, 543, 49176, 549, 543, 49157, 549, 49176, 548, 543, 49176,
		549, 543, 49157, 549, 49176, 548, 543, 49176, 549, 543, 49157, 549, 49176, 548, 543, 49176, 549, 543, 49157, 549, 49176,
		548, 543, 49176, 549, 543, 49157, 549, 548, 549, 49153, 129, 49201, 993, 49279, 994, 49206, 995, 49155, 994, 49201, 995,
		49159, 994, 995, 49165, 994, 995, 49153, 994, 996, 997, 49153, 996, 998, 49166, 129, 49156, 995, 129, 49166, 995, 49231,
		129, 49158, 999, 129, 49168, 999, 49153, 129, 49158, 999, 129, 49153, 999, 129, 49156, 999, 49236, 129, 49348, 1000, 49153,
		129, 49160, 1001, 49158, 1002, 49192, 129, 49185, 1003, 49185, 1004, 49154, 1005, 1006, 49154, 1007, 49156, 129, 49161, 1008,
		49155, 129, 49153, 1009, 49183, 129, 49155, 1010, 129, 49178, 1010, 129, 49153, 1010, 129, 1010, 49153, 129, 1010, 129, 49161,
		1010, 129, 49155, 1010, 129, 1010, 129, 1010, 49157, 129, 1010, 49155, 129, 1010, 129, 1010, 129, 1010, 129, 49154, 1010,
		129, 49153, 1010, 129, 1010, 49153, 129, 1010, 129, 1010, 129, 1010, 129, 1010, 129, 1010, 129, 49153, 1010, 129, 1010, 49153,
		129, 49155, 1010, 129, 49158, 1010, 129, 49155, 1010, 129, 49155, 1010, 129, 1010, 129, 49161, 1010, 129, 49168, 1010, 49156,
		129, 49154, 1010, 129, 49156, 1010, 129, 49168, 1010, 49203, 129, 49153, 199, 49165, 129, 49195, 346, 49155, 129, 49251,
		346, 49163, 129, 49166, 346, 49153, 129, 49166, 346, 129, 49166, 346, 129, 49188, 346, 49161, 129, 49164, 36, 49154, 129,
		49182, 346, 129, 49177, 1011, 49157, 346, 49177, 1011, 49153, 346, 49155, 129, 49177, 1011, 49186, 346, 49208, 129, 49177,
		1012, 1013, 49153, 346, 49164, 129, 49195, 346, 49155, 129, 49160, 346, 49158, 129, 49153, 346, 49165, 129, 49157, 346, 49177,
		129, 49274, 346, 49156, 639, 49236, 346, 49162, 129, 49164, 346, 49154, 129, 49160, 346, 49158, 129, 49267, 346, 49163, 129,
		49236, 346, 49194, 129, 49163, 346, 49155, 129, 49207, 346, 49159, 129, 49161, 346, 49157, 129, 49191, 346, 49159, 129, 49181,
		346, 49233, 129, 49163, 346, 49155, 129, 49198, 346, 129, 49164, 346, 49154, 129, 49179, 346, 49171, 129, 49175, 346, 49191,
		129, 346, 49166, 129, 49174, 346, 49302, 129, 49153, 714, 49238, 616, 49192, 129, 49204, 616, 49162, 129, 49245, 616, 49153,
		129, 49281, 616, 49165, 129, 49328, 616, 49182, 129, 49181, 710, 49249, 129, 542, 35, 49181, 542, 49247, 1014, 49279, 542,
		49391, 715, 49167, 542, 49277, 709, 49153, 714
	};

	static constexpr std::array<std::uint_least8_t, 7105> flyweights =
	{
		0, 0, 25, 1, 0, 0, 0, 1, 1, 25, 1, 0, 0, 0, 2, 2, 25, 1, 0, 0, 0, 3, 3, 24, 1, 0, 0, 0, 4, 4, 16, 1, 0, 0, 0, 5, 4, 16, 1,
		0, 0, 0, 6, 4, 16, 1, 0, 0, 0, 6, 5, 18, 1, 0, 0, 0, 7, 4, 16, 1, 0, 0, 0, 6, 4, 17, 1, 0, 0, 0, 6, 4, 13, 1, 0, 0, 0, 8,
		5, 20, 1, 0, 0, 0, 9, 4, 16, 1, 0, 0, 0, 10, 4, 12, 1, 0, 0, 0, 11, 4, 16, 1, 0, 0, 0, 12, 6, 8, 1, 0, 0, 0, 13, 4, 16, 1,
		0, 0, 0, 14, 7, 4, 34, 1, 1, 0, 15, 8, 4, 34, 1, 1, 0, 16, 5, 19, 1, 0, 0, 0, 17, 9, 11, 1, 0, 0, 0, 18, 5, 19, 1, 0, 0,
		0, 19, 10, 0, 34, 0, 0, 2, 20, 11, 0, 34, 0, 0, 2, 21, 11, 0, 34, 0, 0, 2, 22, 0, 25, 1, 0, 0, 0, 23, 2, 25, 1, 0, 0, 0,
		24, 3, 24, 1, 0, 0, 0, 25, 4, 16, 1, 0, 0, 0, 25, 5, 18, 1, 0, 0, 0, 25, 5, 21, 1, 0, 0, 0, 26, 5, 19, 1, 0, 0, 0, 27, 11,
		2, 34, 0, 0, 0, 28, 4, 15, 1, 0, 0, 0, 29, 5, 20, 1, 0, 0, 0, 30, 5, 26, 1, 0, 0, 0, 31, 5, 10, 1, 0, 0, 0, 32, 11, 0, 1,
		3, 0, 4, 33, 4, 16, 1, 0, 0, 0, 28, 4, 14, 1, 0, 0, 0, 34, 8, 4, 34, 1, 1, 0, 32, 11, 0, 34, 0, 0, 5, 35, 11, 0, 34, 0, 0,
		2, 35, 11, 0, 34, 0, 0, 6, 34, 8, 4, 34, 7, 7, 0, 35, 11, 0, 34, 0, 0, 8, 36, 11, 0, 34, 0, 0, 8, 34, 8, 4, 34, 0, 0, 0,
		35, 11, 0, 34, 0, 0, 0, 37, 11, 0, 34, 0, 0, 0, 32, 11, 0, 34, 0, 0, 0, 34, 8, 4, 34, 9, 9, 0, 32, 11, 0, 34, 10, 0, 11,
		35, 11, 0, 34, 0, 0, 12, 34, 8, 4, 34, 13, 13, 0, 34, 8, 4, 34, 14, 14, 0, 34, 8, 4, 34, 15, 15, 0, 34, 8, 4, 34, 16, 16,
		0, 34, 8, 4, 34, 17, 17, 0, 34, 8, 4, 34, 18, 18, 0, 34, 8, 4, 34, 19, 19, 0, 35, 11, 0, 34, 0, 0, 20, 34, 8, 4, 34, 21,
		21, 0, 34, 8, 4, 34, 22, 22, 0, 35, 11, 0, 34, 0, 0, 23, 34, 8, 4, 34, 24, 24, 0, 35, 11, 0, 34, 0, 0, 25, 34, 8, 4, 34,
		26, 26, 0, 34, 8, 4, 34, 27, 27, 0, 34, 8, 4, 34, 28, 28, 0, 34, 8, 4, 34, 29, 29, 0, 38, 12, 2, 34, 0, 0, 0, 35, 11, 0,
		34, 0, 0, 30, 39, 8, 4, 34, 31, 31, 0, 40, 12, 3, 34, 7, 7, 8, 35, 11, 0, 34, 0, 0, 32, 35, 11, 0, 34, 0, 0, 33, 34, 8, 4,
		34, 34, 34, 0, 34, 8, 4, 34, 35, 35, 0, 34, 8, 4, 34, 36, 36, 0, 34, 8, 4, 34, 37, 37, 0, 34, 8, 4, 34, 38, 38, 0, 34, 8,
		4, 34, 39, 39, 0, 35, 11, 0, 34, 0, 0, 40, 34, 8, 4, 34, 41, 41, 0, 34, 8, 4, 34, 42, 42, 0, 34, 8, 4, 34, 43, 43, 0, 35,
		11, 0, 34, 0, 0, 44, 35, 11, 0, 34, 0, 0, 45, 35, 11, 0, 34, 0, 0, 46, 35, 11, 0, 34, 0, 0, 47, 35, 11, 0, 34, 0, 0, 48,
		35, 11, 0, 34, 0, 0, 49, 35, 11, 0, 34, 0, 0, 50, 35, 11, 0, 34, 0, 0, 51, 35, 11, 0, 34, 0, 0, 52, 35, 11, 0, 34, 0, 0,
		53, 35, 11, 0, 34, 0, 0, 54, 35, 11, 0, 34, 0, 0, 55, 35, 11, 0, 34, 0, 0, 56, 36, 11, 0, 34, 0, 0, 57, 35, 11, 0, 34, 0,
		0, 58, 35, 11, 0, 34, 0, 0, 59, 35, 11, 0, 34, 0, 0, 60, 35, 11, 0, 34, 0, 0, 61, 35, 11, 0, 34, 0, 0, 62, 35, 11, 0, 34,
		0, 0, 63, 35, 11, 0, 34, 0, 0, 64, 35, 11, 0, 34, 0, 0, 65, 35, 11, 0, 34, 0, 0, 66, 35, 11, 0, 34, 0, 0, 67, 35, 11, 0,
		34, 0, 0, 68, 35, 11, 0, 34, 0, 0, 69, 35, 11, 0, 34, 0, 0, 70, 36, 11, 0, 34, 0, 0, 71, 35, 11, 0, 34, 0, 0, 72, 41, 11,
		1, 34, 0, 0, 0, 42, 11, 1, 34, 0, 0, 0, 43, 12, 1, 1, 0, 0, 0, 41, 11, 1, 1, 0, 0, 0, 44, 12, 1, 1, 0, 0, 0, 26, 5, 19, 6,
		0, 0, 0, 45, 13, 7, 2, 0, 0, 0, 46, 11, 7, 2, 73, 0, 74, 47, 13, 7, 2, 0, 0, 0, 48, 13, 7, 2, 0, 0, 0, 34, 8, 4, 21, 7, 7,
		0, 35, 11, 0, 21, 0, 0, 8, 26, 5, 19, 21, 0, 0, 0, 49, 14, 27, 0, 0, 0, 0, 50, 11, 1, 21, 0, 0, 0, 35, 11, 0, 21, 0, 0, 25,
		51, 4, 16, 1, 0, 0, 0, 34, 8, 4, 21, 73, 73, 0, 34, 8, 4, 21, 75, 75, 0, 52, 4, 16, 1, 0, 0, 0, 34, 8, 4, 21, 76, 76, 0,
		34, 8, 4, 21, 77, 77, 0, 34, 8, 4, 21, 78, 78, 0, 35, 11, 0, 21, 0, 0, 0, 34, 8, 4, 21, 1, 1, 0, 35, 11, 0, 21, 0, 0, 79,
		35, 11, 0, 21, 0, 0, 80, 35, 11, 0, 21, 0, 0, 2, 32, 11, 0, 21, 7, 0, 81, 35, 11, 0, 21, 0, 0, 82, 35, 11, 0, 21, 0, 0, 83,
		34, 8, 4, 21, 84, 84, 0, 53, 11, 0, 21, 85, 0, 86, 53, 11, 0, 21, 87, 0, 88, 54, 8, 4, 21, 0, 0, 0, 55, 8, 4, 21, 0, 0, 0,
		53, 11, 0, 21, 89, 0, 90, 32, 11, 0, 21, 91, 0, 92, 35, 11, 0, 21, 0, 0, 93, 34, 8, 4, 12, 7, 7, 0, 35, 11, 0, 12, 0, 0,
		8, 53, 11, 0, 21, 92, 0, 94, 53, 11, 0, 21, 95, 0, 96, 35, 11, 0, 21, 0, 0, 97, 36, 11, 0, 21, 0, 0, 98, 56, 8, 4, 21, 99,
		99, 0, 53, 11, 0, 21, 82, 0, 100, 57, 5, 20, 21, 0, 0, 0, 34, 8, 4, 21, 101, 101, 0, 37, 11, 0, 21, 0, 0, 0, 34, 8, 4, 21,
		36, 36, 0, 34, 8, 4, 14, 102, 102, 0, 34, 8, 4, 14, 1, 1, 0, 35, 11, 0, 14, 0, 0, 2, 35, 11, 0, 14, 0, 0, 96, 36, 11, 0,
		14, 0, 0, 96, 34, 8, 4, 14, 7, 7, 0, 35, 11, 0, 14, 0, 0, 8, 31, 5, 21, 14, 0, 0, 0, 45, 13, 7, 14, 0, 0, 0, 58, 13, 6, 14,
		0, 0, 0, 34, 8, 4, 14, 103, 103, 0, 35, 11, 0, 14, 0, 0, 89, 34, 8, 4, 4, 104, 104, 0, 43, 12, 1, 4, 0, 0, 0, 31, 4, 16,
		4, 0, 0, 0, 35, 11, 0, 4, 0, 0, 95, 32, 11, 0, 4, 0, 0, 0, 59, 4, 16, 1, 0, 0, 0, 60, 4, 12, 4, 0, 0, 0, 31, 5, 21, 4, 0,
		0, 0, 31, 5, 18, 4, 0, 0, 0, 45, 13, 7, 27, 0, 0, 0, 48, 13, 7, 27, 0, 0, 0, 61, 12, 7, 27, 0, 0, 0, 60, 4, 12, 27, 0, 0,
		0, 31, 4, 16, 27, 0, 0, 0, 51, 4, 16, 27, 0, 0, 0, 62, 12, 7, 27, 0, 0, 0, 38, 12, 2, 27, 0, 0, 0, 63, 4, 16, 27, 0, 0, 0,
		64, 5, 26, 3, 0, 0, 0, 64, 5, 26, 1, 0, 0, 0, 57, 5, 20, 3, 0, 0, 0, 31, 4, 16, 3, 0, 0, 0, 31, 5, 18, 3, 0, 0, 0, 31, 5,
		21, 3, 0, 0, 0, 62, 12, 7, 3, 0, 0, 0, 65, 5, 26, 3, 0, 0, 0, 38, 12, 2, 3, 0, 0, 0, 66, 12, 1, 1, 0, 0, 0, 61, 12, 7, 2,
		0, 0, 0, 62, 12, 7, 2, 0, 0, 0, 61, 12, 7, 3, 0, 0, 0, 45, 13, 7, 3, 0, 0, 0, 67, 6, 8, 3, 0, 0, 0, 59, 4, 16, 3, 0, 0, 0,
		43, 12, 1, 3, 0, 0, 0, 59, 4, 16, 50, 0, 0, 0, 51, 4, 16, 50, 0, 0, 0, 31, 4, 16, 50, 0, 0, 0, 64, 5, 26, 50, 0, 0, 0, 38,
		12, 2, 50, 0, 0, 0, 62, 12, 7, 50, 0, 0, 0, 61, 12, 7, 50, 0, 0, 0, 45, 13, 7, 50, 0, 0, 0, 38, 12, 2, 56, 0, 0, 0, 61, 12,
		7, 56, 0, 0, 0, 67, 6, 8, 64, 0, 0, 0, 38, 12, 2, 64, 0, 0, 0, 45, 13, 7, 64, 0, 0, 0, 43, 12, 1, 64, 0, 0, 0, 31, 5, 21,
		64, 0, 0, 0, 31, 4, 16, 64, 0, 0, 0, 51, 4, 16, 64, 0, 0, 0, 59, 4, 16, 64, 0, 0, 0, 66, 12, 1, 64, 0, 0, 0, 38, 12, 2, 90,
		0, 0, 0, 62, 12, 7, 90, 0, 0, 0, 45, 13, 7, 90, 0, 0, 0, 68, 12, 1, 90, 0, 0, 0, 48, 13, 7, 90, 0, 0, 0, 51, 4, 16, 90, 0,
		0, 0, 38, 12, 2, 95, 0, 0, 0, 48, 13, 7, 95, 0, 0, 0, 51, 4, 16, 95, 0, 0, 0, 48, 13, 7, 3, 0, 0, 0, 62, 12, 7, 16, 0, 0,
		0, 69, 12, 5, 16, 0, 0, 0, 38, 12, 2, 16, 0, 0, 0, 45, 13, 7, 16, 0, 0, 0, 67, 6, 8, 16, 0, 0, 0, 31, 4, 16, 16, 0, 0, 0,
		43, 12, 1, 16, 0, 0, 0, 38, 12, 2, 5, 0, 0, 0, 62, 12, 7, 5, 0, 0, 0, 69, 12, 5, 5, 0, 0, 0, 45, 13, 7, 5, 0, 0, 0, 70, 12,
		5, 5, 0, 0, 0, 67, 6, 8, 5, 0, 0, 0, 31, 5, 18, 5, 0, 0, 0, 31, 5, 10, 5, 0, 0, 0, 31, 5, 21, 5, 0, 0, 0, 31, 4, 16, 5, 0,
		0, 0, 62, 12, 7, 23, 0, 0, 0, 69, 12, 5, 23, 0, 0, 0, 38, 12, 2, 23, 0, 0, 0, 45, 13, 7, 23, 0, 0, 0, 67, 6, 8, 23, 0, 0,
		0, 62, 12, 7, 22, 0, 0, 0, 69, 12, 5, 22, 0, 0, 0, 38, 12, 2, 22, 0, 0, 0, 45, 13, 7, 22, 0, 0, 0, 67, 6, 8, 22, 0, 0, 0,
		31, 4, 16, 22, 0, 0, 0, 31, 5, 18, 22, 0, 0, 0, 62, 12, 7, 44, 0, 0, 0, 69, 12, 5, 44, 0, 0, 0, 38, 12, 2, 44, 0, 0, 0, 45,
		13, 7, 44, 0, 0, 0, 70, 12, 5, 44, 0, 0, 0, 67, 6, 8, 44, 0, 0, 0, 31, 5, 21, 44, 0, 0, 0, 31, 5, 10, 44, 0, 0, 0, 62, 12,
		7, 54, 0, 0, 0, 38, 12, 2, 54, 0, 0, 0, 70, 12, 5, 54, 0, 0, 0, 69, 12, 5, 54, 0, 0, 0, 45, 13, 7, 54, 0, 0, 0, 67, 6, 8,
		54, 0, 0, 0, 31, 5, 10, 54, 0, 0, 0, 31, 5, 21, 54, 0, 0, 0, 31, 5, 18, 54, 0, 0, 0, 62, 12, 7, 55, 0, 0, 0, 69, 12, 5, 55,
		0, 0, 0, 38, 12, 2, 55, 0, 0, 0, 45, 13, 7, 55, 0, 0, 0, 67, 6, 8, 55, 0, 0, 0, 31, 5, 10, 55, 0, 0, 0, 31, 5, 21, 55, 0,
		0, 0, 38, 12, 2, 29, 0, 0, 0, 62, 12, 7, 29, 0, 0, 0, 69, 12, 5, 29, 0, 0, 0, 45, 13, 7, 29, 0, 0, 0, 70, 12, 5, 29, 0, 0,
		0, 67, 6, 8, 29, 0, 0, 0, 62, 12, 7, 37, 0, 0, 0, 69, 12, 5, 37, 0, 0, 0, 38, 12, 2, 37, 0, 0, 0, 45, 13, 7, 37, 0, 0, 0,
		70, 12, 5, 37, 0, 0, 0, 31, 5, 21, 37, 0, 0, 0, 31, 5, 10, 37, 0, 0, 0, 67, 6, 8, 37, 0, 0, 0, 69, 12, 5, 48, 0, 0, 0, 38,
		12, 2, 48, 0, 0, 0, 45, 13, 7, 48, 0, 0, 0, 70, 12, 5, 48, 0, 0, 0, 62, 12, 7, 48, 0, 0, 0, 67, 6, 8, 48, 0, 0, 0, 31, 4,
		16, 48, 0, 0, 0, 38, 12, 2, 57, 0, 0, 0, 62, 12, 7, 57, 0, 0, 0, 71, 12, 2, 57, 0, 0, 0, 31, 5, 18, 1, 0, 0, 0, 72, 12, 2,
		57, 0, 0, 0, 66, 12, 1, 57, 0, 0, 0, 45, 13, 7, 57, 0, 0, 0, 31, 4, 16, 57, 0, 0, 0, 67, 6, 8, 57, 0, 0, 0, 51, 4, 16, 57,
		0, 0, 0, 38, 12, 2, 33, 0, 0, 0, 62, 12, 7, 33, 0, 0, 0, 71, 12, 2, 33, 0, 0, 0, 72, 12, 2, 33, 0, 0, 0, 66, 12, 1, 33, 0,
		0, 0, 45, 13, 7, 33, 0, 0, 0, 67, 6, 8, 33, 0, 0, 0, 38, 12, 2, 58, 0, 0, 0, 31, 5, 21, 58, 0, 0, 0, 31, 4, 16, 58, 0, 0,
		0, 51, 4, 16, 58, 0, 0, 0, 45, 13, 7, 58, 0, 0, 0, 67, 6, 8, 58, 0, 0, 0, 31, 5, 10, 58, 0, 0, 0, 31, 4, 17, 58, 0, 0, 0,
		31, 4, 13, 58, 0, 0, 0, 73, 13, 5, 58, 0, 0, 0, 62, 12, 7, 58, 0, 0, 0, 69, 12, 5, 58, 0, 0, 0, 31, 5, 21, 1, 0, 0, 0, 38,
		12, 2, 39, 0, 0, 0, 69, 12, 5, 39, 0, 0, 0, 62, 12, 7, 39, 0, 0, 0, 45, 13, 7, 39, 0, 0, 0, 67, 6, 8, 39, 0, 0, 0, 59, 4,
		16, 39, 0, 0, 0, 31, 4, 16, 39, 0, 0, 0, 67, 13, 5, 39, 0, 0, 0, 73, 13, 5, 39, 0, 0, 0, 31, 5, 21, 39, 0, 0, 0, 34, 8, 4,
		18, 105, 105, 0, 38, 12, 2, 18, 0, 0, 0, 31, 4, 16, 1, 0, 0, 0, 68, 12, 1, 18, 0, 0, 0, 38, 12, 2, 25, 0, 0, 0, 74, 12, 2,
		25, 0, 0, 0, 38, 12, 2, 17, 0, 0, 0, 48, 13, 7, 17, 0, 0, 0, 62, 12, 7, 17, 0, 0, 0, 31, 4, 16, 17, 0, 0, 0, 51, 4, 16, 17,
		0, 0, 0, 59, 4, 16, 17, 0, 0, 0, 75, 5, 10, 17, 0, 0, 0, 31, 5, 10, 17, 0, 0, 0, 31, 5, 21, 17, 0, 0, 0, 76, 8, 4, 11, 0,
		106, 0, 76, 8, 4, 11, 0, 84, 0, 32, 11, 0, 11, 93, 0, 93, 60, 4, 12, 10, 0, 0, 0, 38, 12, 2, 10, 0, 0, 0, 51, 4, 16, 10,
		0, 0, 0, 59, 4, 16, 10, 0, 0, 0, 24, 3, 24, 41, 0, 0, 0, 38, 12, 2, 41, 0, 0, 0, 31, 4, 17, 41, 0, 0, 0, 31, 4, 13, 41, 0,
		0, 0, 38, 12, 2, 46, 0, 0, 0, 38, 12, 9, 46, 0, 0, 0, 38, 12, 2, 51, 0, 0, 0, 62, 12, 7, 51, 0, 0, 0, 48, 13, 7, 51, 0, 0,
		0, 38, 12, 2, 26, 0, 0, 0, 62, 12, 7, 26, 0, 0, 0, 48, 13, 7, 26, 0, 0, 0, 38, 12, 2, 9, 0, 0, 0, 62, 12, 7, 9, 0, 0, 0,
		38, 12, 2, 52, 0, 0, 0, 62, 12, 7, 52, 0, 0, 0, 38, 12, 2, 32, 0, 0, 0, 47, 13, 7, 32, 0, 0, 0, 69, 12, 5, 32, 0, 0, 0, 62,
		12, 7, 32, 0, 0, 0, 45, 13, 7, 32, 0, 0, 0, 51, 4, 16, 32, 0, 0, 0, 68, 12, 1, 32, 0, 0, 0, 31, 4, 16, 32, 0, 0, 0, 31, 5,
		18, 32, 0, 0, 0, 67, 6, 8, 32, 0, 0, 0, 31, 5, 10, 32, 0, 0, 0, 31, 4, 16, 38, 0, 0, 0, 51, 4, 16, 38, 0, 0, 0, 60, 4, 12,
		38, 0, 0, 0, 59, 4, 16, 38, 0, 0, 0, 77, 4, 16, 38, 0, 0, 0, 78, 13, 7, 38, 0, 0, 0, 30, 5, 26, 38, 0, 0, 0, 67, 6, 8, 38,
		0, 0, 0, 38, 12, 2, 38, 0, 0, 0, 66, 12, 1, 38, 0, 0, 0, 79, 12, 7, 38, 0, 0, 0, 62, 12, 7, 38, 0, 0, 0, 38, 12, 2, 35, 0,
		0, 0, 62, 12, 7, 35, 0, 0, 0, 69, 12, 5, 35, 0, 0, 0, 45, 13, 7, 35, 0, 0, 0, 31, 5, 21, 35, 0, 0, 0, 59, 4, 16, 35, 0, 0,
		0, 67, 6, 8, 35, 0, 0, 0, 38, 12, 2, 53, 0, 0, 0, 38, 12, 2, 40, 0, 0, 0, 72, 12, 2, 40, 0, 0, 0, 67, 6, 8, 40, 0, 0, 0,
		75, 5, 10, 40, 0, 0, 0, 31, 5, 21, 40, 0, 0, 0, 31, 5, 21, 32, 0, 0, 0, 38, 12, 2, 8, 0, 0, 0, 62, 12, 7, 8, 0, 0, 0, 69,
		12, 5, 8, 0, 0, 0, 31, 4, 16, 8, 0, 0, 0, 38, 12, 2, 91, 0, 0, 0, 69, 12, 5, 91, 0, 0, 0, 62, 12, 7, 91, 0, 0, 0, 48, 13,
		7, 91, 0, 0, 0, 45, 13, 7, 91, 0, 0, 0, 67, 6, 8, 91, 0, 0, 0, 31, 4, 16, 91, 0, 0, 0, 66, 12, 1, 91, 0, 0, 0, 59, 4, 16,
		91, 0, 0, 0, 58, 13, 6, 2, 0, 0, 0, 62, 12, 7, 62, 0, 0, 0, 69, 12, 5, 62, 0, 0, 0, 38, 12, 2, 62, 0, 0, 0, 45, 13, 7, 62,
		0, 0, 0, 73, 13, 5, 62, 0, 0, 0, 67, 6, 8, 62, 0, 0, 0, 59, 4, 16, 62, 0, 0, 0, 31, 4, 16, 62, 0, 0, 0, 51, 4, 16, 62, 0,
		0, 0, 31, 5, 21, 62, 0, 0, 0, 62, 12, 7, 76, 0, 0, 0, 69, 12, 5, 76, 0, 0, 0, 38, 12, 2, 76, 0, 0, 0, 73, 13, 5, 76, 0, 0,
		0, 45, 13, 7, 76, 0, 0, 0, 67, 6, 8, 76, 0, 0, 0, 38, 12, 2, 93, 0, 0, 0, 48, 13, 7, 93, 0, 0, 0, 69, 12, 5, 93, 0, 0, 0,
		62, 12, 7, 93, 0, 0, 0, 67, 13, 5, 93, 0, 0, 0, 31, 4, 16, 93, 0, 0, 0, 38, 12, 2, 70, 0, 0, 0, 69, 12, 5, 70, 0, 0, 0, 62,
		12, 7, 70, 0, 0, 0, 80, 13, 7, 70, 0, 0, 0, 45, 13, 7, 70, 0, 0, 0, 59, 4, 16, 70, 0, 0, 0, 51, 4, 16, 70, 0, 0, 0, 67, 6,
		8, 70, 0, 0, 0, 67, 6, 8, 73, 0, 0, 0, 38, 12, 2, 73, 0, 0, 0, 43, 12, 1, 73, 0, 0, 0, 44, 12, 1, 73, 0, 0, 0, 59, 4, 16,
		73, 0, 0, 0, 32, 11, 0, 14, 107, 0, 108, 32, 11, 0, 14, 109, 0, 110, 32, 11, 0, 14, 111, 0, 112, 32, 11, 0, 14, 113, 0, 114,
		32, 11, 0, 14, 115, 0, 116, 32, 11, 0, 14, 117, 0, 118, 32, 11, 0, 14, 119, 0, 120, 32, 11, 0, 14, 121, 0, 122, 31, 4, 16,
		76, 0, 0, 0, 81, 4, 16, 1, 0, 0, 0, 73, 13, 5, 1, 0, 0, 0, 38, 12, 2, 1, 0, 0, 0, 69, 12, 5, 1, 0, 0, 0, 37, 11, 0, 14, 0,
		0, 0, 41, 11, 1, 21, 0, 0, 0, 82, 11, 1, 14, 0, 0, 0, 35, 11, 0, 34, 0, 0, 123, 35, 11, 0, 34, 0, 0, 124, 83, 11, 0, 34,
		0, 0, 0, 82, 11, 1, 34, 0, 0, 0, 84, 11, 1, 34, 0, 0, 0, 82, 11, 1, 21, 0, 0, 0, 32, 11, 0, 34, 125, 0, 126, 34, 8, 4, 34,
		127, 127, 0, 35, 11, 0, 21, 0, 0, 84, 34, 8, 4, 21, 93, 93, 0, 35, 11, 0, 21, 0, 0, 128, 35, 11, 0, 21, 0, 0, 129, 35, 11,
		0, 21, 0, 0, 130, 35, 11, 0, 21, 0, 0, 131, 35, 11, 0, 21, 0, 0, 132, 35, 11, 0, 21, 0, 0, 133, 32, 11, 0, 21, 0, 0, 0, 40,
		12, 3, 21, 93, 93, 93, 34, 8, 4, 21, 134, 134, 0, 40, 12, 3, 21, 135, 135, 135, 35, 11, 0, 21, 136, 0, 137, 34, 8, 4, 21,
		94, 94, 0, 34, 8, 4, 21, 138, 138, 0, 34, 8, 4, 21, 139, 139, 0, 34, 8, 4, 21, 140, 140, 0, 34, 8, 4, 21, 141, 141, 0, 85,
		13, 26, 2, 0, 0, 0, 86, 13, 26, 2, 0, 0, 0, 87, 5, 26, 1, 0, 0, 0, 88, 4, 12, 1, 0, 0, 0, 89, 4, 16, 1, 0, 0, 0, 90, 4, 15,
		1, 0, 0, 0, 90, 4, 14, 1, 0, 0, 0, 28, 4, 17, 1, 0, 0, 0, 91, 4, 16, 1, 0, 0, 0, 23, 15, 22, 1, 0, 0, 0, 23, 15, 23, 1, 0,
		0, 0, 65, 5, 26, 1, 0, 0, 0, 92, 4, 16, 1, 0, 0, 0, 67, 9, 11, 1, 0, 0, 0, 93, 9, 11, 1, 0, 0, 0, 25, 4, 17, 1, 0, 0, 0,
		25, 4, 13, 1, 0, 0, 0, 88, 4, 16, 1, 0, 0, 0, 94, 5, 26, 1, 0, 0, 0, 95, 14, 27, 0, 0, 0, 0, 57, 5, 20, 1, 0, 0, 0, 96, 5,
		20, 1, 0, 0, 0, 97, 4, 17, 1, 0, 0, 0, 97, 4, 13, 1, 0, 0, 0, 98, 13, 7, 2, 0, 0, 0, 54, 8, 4, 1, 0, 0, 0, 99, 11, 0, 1,
		0, 0, 0, 100, 5, 20, 1, 0, 0, 0, 34, 8, 4, 21, 142, 142, 0, 97, 5, 21, 1, 0, 0, 0, 34, 8, 4, 34, 143, 143, 0, 34, 8, 4, 34,
		144, 144, 0, 101, 5, 21, 1, 0, 0, 0, 34, 8, 4, 34, 145, 145, 0, 102, 12, 2, 1, 0, 0, 0, 37, 11, 0, 1, 0, 0, 0, 103, 11, 0,
		1, 0, 0, 0, 35, 11, 0, 34, 0, 0, 146, 104, 8, 9, 34, 147, 147, 0, 105, 11, 9, 34, 0, 0, 148, 38, 12, 9, 34, 0, 0, 0, 89,
		5, 21, 1, 0, 0, 0, 106, 5, 20, 1, 0, 0, 0, 89, 4, 17, 1, 0, 0, 0, 89, 4, 13, 1, 0, 0, 0, 107, 14, 27, 0, 0, 0, 0, 108, 8,
		21, 1, 149, 149, 0, 109, 11, 21, 1, 0, 0, 150, 25, 5, 21, 7, 0, 0, 0, 34, 8, 4, 19, 104, 104, 0, 35, 11, 0, 19, 0, 0, 95,
		34, 8, 4, 34, 151, 151, 0, 34, 8, 4, 34, 152, 152, 0, 34, 8, 4, 34, 153, 153, 0, 35, 11, 0, 34, 0, 0, 154, 35, 11, 0, 34,
		0, 0, 155, 34, 8, 4, 34, 156, 156, 0, 34, 8, 4, 34, 157, 157, 0, 34, 8, 4, 34, 158, 158, 0, 34, 8, 4, 34, 159, 159, 0, 34,
		8, 4, 34, 160, 160, 0, 37, 11, 0, 12, 0, 0, 0, 31, 5, 21, 12, 0, 0, 0, 45, 13, 7, 12, 0, 0, 0, 31, 4, 16, 12, 0, 0, 0, 31,
		5, 10, 12, 0, 0, 0, 35, 11, 0, 18, 0, 0, 161, 38, 12, 2, 59, 0, 0, 0, 68, 12, 1, 59, 0, 0, 0, 31, 4, 16, 59, 0, 0, 0, 48,
		13, 7, 59, 0, 0, 0, 62, 12, 7, 14, 0, 0, 0, 25, 4, 15, 1, 0, 0, 0, 25, 4, 14, 1, 0, 0, 0, 110, 12, 1, 1, 0, 0, 0, 111, 4,
		16, 1, 0, 0, 0, 112, 5, 21, 24, 0, 0, 0, 113, 5, 21, 1, 0, 0, 0, 66, 12, 1, 24, 0, 0, 0, 114, 12, 2, 1, 0, 0, 0, 114, 12,
		9, 24, 0, 0, 0, 28, 4, 13, 1, 0, 0, 0, 115, 13, 5, 25, 0, 0, 0, 68, 12, 1, 24, 0, 0, 0, 38, 12, 2, 28, 0, 0, 0, 116, 5, 19,
		1, 0, 0, 0, 66, 12, 1, 28, 0, 0, 0, 60, 4, 12, 1, 0, 0, 0, 38, 12, 2, 30, 0, 0, 0, 66, 12, 1, 30, 0, 0, 0, 38, 12, 2, 6,
		0, 0, 0, 31, 5, 21, 25, 0, 0, 0, 31, 5, 21, 30, 0, 0, 0, 117, 12, 2, 24, 0, 0, 0, 38, 12, 2, 61, 0, 0, 0, 66, 12, 1, 61,
		0, 0, 0, 31, 5, 21, 61, 0, 0, 0, 38, 12, 2, 86, 0, 0, 0, 68, 12, 1, 86, 0, 0, 0, 51, 4, 16, 86, 0, 0, 0, 59, 4, 16, 86, 0,
		0, 0, 38, 12, 2, 77, 0, 0, 0, 66, 12, 1, 77, 0, 0, 0, 51, 4, 16, 77, 0, 0, 0, 59, 4, 16, 77, 0, 0, 0, 67, 6, 8, 77, 0, 0,
		0, 38, 12, 2, 14, 0, 0, 0, 31, 4, 16, 14, 0, 0, 0, 43, 12, 1, 14, 0, 0, 0, 41, 11, 1, 14, 0, 0, 0, 38, 12, 2, 79, 0, 0, 0,
		38, 12, 9, 79, 0, 0, 0, 45, 13, 7, 79, 0, 0, 0, 31, 4, 16, 79, 0, 0, 0, 59, 4, 16, 79, 0, 0, 0, 51, 4, 16, 79, 0, 0, 0, 63,
		5, 19, 1, 0, 0, 0, 34, 8, 4, 34, 162, 162, 0, 34, 8, 4, 34, 163, 163, 0, 34, 8, 4, 34, 164, 164, 0, 34, 8, 4, 34, 165, 165,
		0, 34, 8, 4, 34, 166, 166, 0, 34, 8, 4, 34, 167, 167, 0, 34, 8, 4, 34, 168, 168, 0, 34, 8, 4, 34, 169, 169, 0, 34, 8, 4,
		34, 170, 170, 0, 34, 8, 4, 34, 171, 171, 0, 38, 12, 2, 49, 0, 0, 0, 48, 13, 7, 49, 0, 0, 0, 69, 12, 5, 49, 0, 0, 0, 62, 12,
		7, 49, 0, 0, 0, 31, 5, 21, 49, 0, 0, 0, 38, 12, 2, 65, 0, 0, 0, 31, 4, 16, 65, 0, 0, 0, 59, 4, 16, 65, 0, 0, 0, 69, 12, 5,
		75, 0, 0, 0, 38, 12, 2, 75, 0, 0, 0, 45, 13, 7, 75, 0, 0, 0, 62, 12, 7, 75, 0, 0, 0, 59, 4, 16, 75, 0, 0, 0, 67, 6, 8, 75,
		0, 0, 0, 67, 6, 8, 69, 0, 0, 0, 38, 12, 2, 69, 0, 0, 0, 62, 12, 7, 69, 0, 0, 0, 45, 13, 7, 69, 0, 0, 0, 59, 4, 16, 69, 0,
		0, 0, 38, 12, 2, 74, 0, 0, 0, 62, 12, 7, 74, 0, 0, 0, 69, 12, 5, 74, 0, 0, 0, 73, 13, 5, 74, 0, 0, 0, 31, 4, 16, 74, 0, 0,
		0, 62, 12, 7, 84, 0, 0, 0, 69, 12, 5, 84, 0, 0, 0, 38, 12, 2, 84, 0, 0, 0, 45, 13, 7, 84, 0, 0, 0, 73, 13, 5, 84, 0, 0, 0,
		31, 4, 16, 84, 0, 0, 0, 51, 4, 16, 84, 0, 0, 0, 59, 4, 16, 84, 0, 0, 0, 67, 6, 8, 84, 0, 0, 0, 66, 12, 1, 39, 0, 0, 0, 38,
		12, 2, 68, 0, 0, 0, 62, 12, 7, 68, 0, 0, 0, 69, 12, 5, 68, 0, 0, 0, 67, 6, 8, 68, 0, 0, 0, 31, 4, 16, 68, 0, 0, 0, 59, 4,
		16, 68, 0, 0, 0, 38, 12, 2, 92, 0, 0, 0, 62, 12, 7, 92, 0, 0, 0, 72, 12, 2, 92, 0, 0, 0, 45, 13, 7, 92, 0, 0, 0, 118, 12,
		2, 92, 0, 0, 0, 66, 12, 1, 92, 0, 0, 0, 31, 4, 16, 92, 0, 0, 0, 51, 4, 16, 92, 0, 0, 0, 38, 12, 2, 87, 0, 0, 0, 69, 12, 5,
		87, 0, 0, 0, 62, 12, 7, 87, 0, 0, 0, 59, 4, 16, 87, 0, 0, 0, 66, 12, 1, 87, 0, 0, 0, 45, 13, 7, 87, 0, 0, 0, 35, 11, 0, 34,
		0, 0, 172, 32, 11, 0, 11, 173, 0, 173, 73, 13, 5, 87, 0, 0, 0, 67, 6, 8, 87, 0, 0, 0, 22, 14, 29, 0, 0, 0, 0, 22, 5, 28,
		0, 0, 0, 0, 114, 12, 2, 24, 0, 0, 0, 57, 5, 20, 27, 0, 0, 0, 63, 5, 19, 3, 0, 0, 0, 119, 12, 2, 3, 0, 0, 0, 120, 14, 27,
		0, 0, 0, 0, 78, 13, 7, 2, 0, 0, 0, 63, 4, 16, 1, 0, 0, 0, 31, 4, 17, 1, 0, 0, 0, 31, 4, 13, 1, 0, 0, 0, 121, 4, 17, 1, 0,
		0, 0, 121, 4, 13, 1, 0, 0, 0, 122, 4, 16, 1, 0, 0, 0, 123, 4, 16, 1, 0, 0, 0, 97, 4, 16, 1, 0, 0, 0, 124, 4, 12, 1, 0, 0,
		0, 121, 4, 16, 1, 0, 0, 0, 125, 4, 16, 1, 0, 0, 0, 126, 6, 8, 1, 0, 0, 0, 127, 7, 4, 34, 1, 1, 0, 128, 5, 19, 1, 0, 0, 0,
		129, 10, 0, 34, 0, 0, 2, 130, 12, 1, 1, 0, 0, 0, 131, 5, 26, 1, 0, 0, 0, 38, 12, 2, 36, 0, 0, 0, 38, 12, 9, 21, 0, 0, 0,
		31, 5, 10, 21, 0, 0, 0, 31, 5, 21, 21, 0, 0, 0, 38, 12, 2, 71, 0, 0, 0, 38, 12, 2, 67, 0, 0, 0, 38, 12, 2, 42, 0, 0, 0, 31,
		5, 10, 42, 0, 0, 0, 38, 12, 2, 20, 0, 0, 0, 38, 12, 9, 20, 0, 0, 0, 38, 12, 2, 118, 0, 0, 0, 62, 12, 7, 118, 0, 0, 0, 38,
		12, 2, 60, 0, 0, 0, 51, 4, 16, 60, 0, 0, 0, 38, 12, 2, 43, 0, 0, 0, 51, 4, 16, 43, 0, 0, 0, 38, 12, 9, 43, 0, 0, 0, 34, 8,
		4, 15, 174, 174, 0, 35, 11, 0, 15, 0, 0, 175, 38, 12, 2, 47, 0, 0, 0, 38, 12, 2, 45, 0, 0, 0, 67, 6, 8, 45, 0, 0, 0, 34,
		8, 4, 136, 174, 174, 0, 35, 11, 0, 136, 0, 0, 175, 38, 12, 2, 106, 0, 0, 0, 38, 12, 2, 104, 0, 0, 0, 31, 4, 16, 104, 0, 0,
		0, 38, 12, 2, 110, 0, 0, 0, 38, 12, 2, 13, 0, 0, 0, 38, 12, 2, 81, 0, 0, 0, 51, 4, 16, 81, 0, 0, 0, 31, 5, 10, 81, 0, 0,
		0, 38, 12, 2, 120, 0, 0, 0, 31, 5, 21, 120, 0, 0, 0, 31, 5, 10, 120, 0, 0, 0, 38, 12, 2, 116, 0, 0, 0, 31, 5, 10, 116, 0,
		0, 0, 38, 12, 2, 128, 0, 0, 0, 31, 5, 10, 128, 0, 0, 0, 38, 12, 2, 66, 0, 0, 0, 31, 5, 10, 66, 0, 0, 0, 51, 4, 16, 66, 0,
		0, 0, 38, 12, 2, 72, 0, 0, 0, 31, 4, 16, 72, 0, 0, 0, 38, 12, 2, 98, 0, 0, 0, 38, 12, 2, 97, 0, 0, 0, 31, 5, 10, 97, 0, 0,
		0, 38, 12, 2, 31, 0, 0, 0, 62, 12, 7, 31, 0, 0, 0, 48, 13, 7, 31, 0, 0, 0, 31, 5, 10, 31, 0, 0, 0, 31, 4, 16, 31, 0, 0, 0,
		59, 4, 16, 31, 0, 0, 0, 38, 12, 2, 88, 0, 0, 0, 31, 5, 10, 88, 0, 0, 0, 31, 4, 16, 88, 0, 0, 0, 38, 12, 2, 117, 0, 0, 0,
		31, 5, 10, 117, 0, 0, 0, 38, 12, 2, 112, 0, 0, 0, 31, 5, 21, 112, 0, 0, 0, 45, 13, 7, 112, 0, 0, 0, 31, 5, 10, 112, 0, 0,
		0, 51, 4, 16, 112, 0, 0, 0, 31, 4, 16, 112, 0, 0, 0, 38, 12, 2, 78, 0, 0, 0, 31, 4, 16, 78, 0, 0, 0, 51, 4, 16, 78, 0, 0,
		0, 38, 12, 2, 83, 0, 0, 0, 31, 5, 10, 83, 0, 0, 0, 38, 12, 2, 82, 0, 0, 0, 31, 5, 10, 82, 0, 0, 0, 38, 12, 2, 121, 0, 0,
		0, 51, 4, 16, 121, 0, 0, 0, 31, 5, 10, 121, 0, 0, 0, 38, 12, 2, 89, 0, 0, 0, 34, 8, 4, 130, 77, 77, 0, 35, 11, 0, 130, 0,
		0, 82, 31, 5, 10, 130, 0, 0, 0, 31, 5, 10, 3, 0, 0, 0, 69, 12, 5, 94, 0, 0, 0, 62, 12, 7, 94, 0, 0, 0, 38, 12, 2, 94, 0,
		0, 0, 48, 13, 7, 94, 0, 0, 0, 59, 4, 16, 94, 0, 0, 0, 51, 4, 16, 94, 0, 0, 0, 31, 5, 10, 94, 0, 0, 0, 67, 6, 8, 94, 0, 0,
		0, 48, 13, 7, 85, 0, 0, 0, 69, 12, 5, 85, 0, 0, 0, 38, 12, 2, 85, 0, 0, 0, 62, 12, 7, 85, 0, 0, 0, 45, 13, 7, 85, 0, 0, 0,
		31, 4, 16, 85, 0, 0, 0, 64, 5, 26, 85, 0, 0, 0, 59, 4, 16, 85, 0, 0, 0, 38, 12, 2, 101, 0, 0, 0, 67, 6, 8, 101, 0, 0, 0,
		62, 12, 7, 96, 0, 0, 0, 38, 12, 2, 96, 0, 0, 0, 69, 12, 5, 96, 0, 0, 0, 45, 13, 7, 96, 0, 0, 0, 67, 6, 8, 96, 0, 0, 0, 31,
		4, 16, 96, 0, 0, 0, 59, 4, 16, 96, 0, 0, 0, 38, 12, 2, 111, 0, 0, 0, 45, 13, 7, 111, 0, 0, 0, 31, 4, 16, 111, 0, 0, 0, 62,
		12, 7, 100, 0, 0, 0, 69, 12, 5, 100, 0, 0, 0, 38, 12, 2, 100, 0, 0, 0, 73, 13, 5, 100, 0, 0, 0, 59, 4, 16, 100, 0, 0, 0,
		31, 4, 16, 100, 0, 0, 0, 45, 13, 7, 100, 0, 0, 0, 67, 6, 8, 100, 0, 0, 0, 31, 5, 10, 48, 0, 0, 0, 38, 12, 2, 108, 0, 0, 0,
		69, 12, 5, 108, 0, 0, 0, 62, 12, 7, 108, 0, 0, 0, 73, 13, 5, 108, 0, 0, 0, 45, 13, 7, 108, 0, 0, 0, 59, 4, 16, 108, 0, 0,
		0, 51, 4, 16, 108, 0, 0, 0, 31, 4, 16, 108, 0, 0, 0, 38, 12, 2, 129, 0, 0, 0, 59, 4, 16, 129, 0, 0, 0, 38, 12, 2, 109, 0,
		0, 0, 62, 12, 7, 109, 0, 0, 0, 69, 12, 5, 109, 0, 0, 0, 45, 13, 7, 109, 0, 0, 0, 67, 6, 8, 109, 0, 0, 0, 62, 12, 7, 107,
		0, 0, 0, 69, 12, 5, 107, 0, 0, 0, 38, 12, 2, 107, 0, 0, 0, 45, 13, 7, 107, 0, 0, 0, 70, 12, 5, 107, 0, 0, 0, 73, 13, 5, 107,
		0, 0, 0, 132, 12, 2, 107, 0, 0, 0, 38, 12, 2, 135, 0, 0, 0, 69, 12, 5, 135, 0, 0, 0, 62, 12, 7, 135, 0, 0, 0, 45, 13, 7,
		135, 0, 0, 0, 59, 4, 16, 135, 0, 0, 0, 51, 4, 16, 135, 0, 0, 0, 31, 4, 16, 135, 0, 0, 0, 67, 6, 8, 135, 0, 0, 0, 38, 12,
		2, 124, 0, 0, 0, 70, 12, 5, 124, 0, 0, 0, 69, 12, 5, 124, 0, 0, 0, 62, 12, 7, 124, 0, 0, 0, 45, 13, 7, 124, 0, 0, 0, 31,
		4, 16, 124, 0, 0, 0, 67, 6, 8, 124, 0, 0, 0, 38, 12, 2, 123, 0, 0, 0, 70, 12, 5, 123, 0, 0, 0, 69, 12, 5, 123, 0, 0, 0, 62,
		12, 7, 123, 0, 0, 0, 45, 13, 7, 123, 0, 0, 0, 31, 4, 16, 123, 0, 0, 0, 59, 4, 16, 123, 0, 0, 0, 51, 4, 16, 123, 0, 0, 0,
		77, 4, 16, 123, 0, 0, 0, 38, 12, 2, 114, 0, 0, 0, 69, 12, 5, 114, 0, 0, 0, 62, 12, 7, 114, 0, 0, 0, 45, 13, 7, 114, 0, 0,
		0, 59, 4, 16, 114, 0, 0, 0, 31, 4, 16, 114, 0, 0, 0, 67, 6, 8, 114, 0, 0, 0, 38, 12, 2, 102, 0, 0, 0, 62, 12, 7, 102, 0,
		0, 0, 69, 12, 5, 102, 0, 0, 0, 73, 13, 5, 102, 0, 0, 0, 45, 13, 7, 102, 0, 0, 0, 67, 6, 8, 102, 0, 0, 0, 38, 12, 2, 126,
		0, 0, 0, 62, 12, 7, 126, 0, 0, 0, 69, 12, 5, 126, 0, 0, 0, 45, 13, 7, 126, 0, 0, 0, 67, 6, 8, 126, 0, 0, 0, 31, 5, 10, 126,
		0, 0, 0, 59, 4, 16, 126, 0, 0, 0, 31, 5, 21, 126, 0, 0, 0, 34, 8, 4, 125, 1, 1, 0, 35, 11, 0, 125, 0, 0, 2, 67, 6, 8, 125,
		0, 0, 0, 31, 5, 10, 125, 0, 0, 0, 38, 12, 2, 125, 0, 0, 0, 38, 12, 2, 141, 0, 0, 0, 62, 12, 7, 141, 0, 0, 0, 69, 12, 5, 141,
		0, 0, 0, 48, 13, 7, 141, 0, 0, 0, 45, 13, 7, 141, 0, 0, 0, 31, 4, 16, 141, 0, 0, 0, 59, 4, 16, 141, 0, 0, 0, 38, 12, 2, 140,
		0, 0, 0, 62, 12, 7, 140, 0, 0, 0, 69, 12, 5, 140, 0, 0, 0, 133, 13, 7, 140, 0, 0, 0, 45, 13, 7, 140, 0, 0, 0, 31, 4, 16,
		140, 0, 0, 0, 59, 4, 16, 140, 0, 0, 0, 51, 4, 16, 140, 0, 0, 0, 38, 12, 2, 122, 0, 0, 0, 38, 12, 2, 133, 0, 0, 0, 69, 12,
		5, 133, 0, 0, 0, 62, 12, 7, 133, 0, 0, 0, 45, 13, 7, 133, 0, 0, 0, 59, 4, 16, 133, 0, 0, 0, 51, 4, 16, 133, 0, 0, 0, 31,
		4, 16, 133, 0, 0, 0, 67, 6, 8, 133, 0, 0, 0, 31, 5, 10, 133, 0, 0, 0, 31, 4, 16, 134, 0, 0, 0, 51, 4, 16, 134, 0, 0, 0, 38,
		12, 2, 134, 0, 0, 0, 62, 12, 7, 134, 0, 0, 0, 69, 12, 5, 134, 0, 0, 0, 38, 12, 2, 138, 0, 0, 0, 62, 12, 7, 138, 0, 0, 0,
		45, 13, 7, 138, 0, 0, 0, 67, 6, 8, 138, 0, 0, 0, 38, 12, 2, 63, 0, 0, 0, 38, 12, 9, 63, 0, 0, 0, 51, 4, 16, 63, 0, 0, 0,
		38, 12, 2, 80, 0, 0, 0, 38, 12, 2, 127, 0, 0, 0, 38, 12, 2, 115, 0, 0, 0, 67, 6, 8, 115, 0, 0, 0, 59, 4, 16, 115, 0, 0, 0,
		38, 12, 2, 103, 0, 0, 0, 45, 13, 7, 103, 0, 0, 0, 59, 4, 16, 103, 0, 0, 0, 38, 12, 2, 119, 0, 0, 0, 62, 12, 7, 119, 0, 0,
		0, 59, 4, 16, 119, 0, 0, 0, 51, 4, 16, 119, 0, 0, 0, 31, 4, 16, 119, 0, 0, 0, 31, 5, 21, 119, 0, 0, 0, 68, 12, 1, 119, 0,
		0, 0, 66, 12, 1, 119, 0, 0, 0, 67, 6, 8, 119, 0, 0, 0, 31, 5, 10, 119, 0, 0, 0, 38, 12, 2, 99, 0, 0, 0, 69, 12, 5, 99, 0,
		0, 0, 45, 13, 7, 99, 0, 0, 0, 43, 12, 1, 99, 0, 0, 0, 66, 12, 1, 137, 0, 0, 0, 66, 12, 1, 139, 0, 0, 0, 114, 12, 2, 137,
		0, 0, 0, 114, 12, 2, 139, 0, 0, 0, 38, 12, 2, 105, 0, 0, 0, 31, 5, 21, 105, 0, 0, 0, 48, 13, 7, 105, 0, 0, 0, 62, 12, 7,
		105, 0, 0, 0, 59, 4, 16, 105, 0, 0, 0, 134, 13, 5, 1, 0, 0, 0, 67, 13, 5, 1, 0, 0, 0, 115, 13, 5, 1, 0, 0, 0, 48, 13, 7,
		21, 0, 0, 0, 93, 6, 8, 1, 0, 0, 0, 31, 5, 21, 131, 0, 0, 0, 48, 13, 7, 131, 0, 0, 0, 51, 4, 16, 131, 0, 0, 0, 59, 4, 16,
		131, 0, 0, 0, 31, 4, 16, 131, 0, 0, 0, 62, 12, 7, 19, 0, 0, 0, 38, 12, 2, 113, 0, 0, 0, 31, 5, 10, 113, 0, 0, 0, 45, 13,
		7, 113, 0, 0, 0, 34, 8, 4, 132, 176, 176, 0, 35, 11, 0, 132, 0, 0, 177, 80, 13, 7, 132, 0, 0, 0, 62, 12, 7, 132, 0, 0, 0,
		45, 13, 7, 132, 0, 0, 0, 67, 6, 8, 132, 0, 0, 0, 31, 4, 16, 132, 0, 0, 0, 102, 12, 2, 3, 0, 0, 0, 135, 8, 21, 1, 0, 0, 0,
		136, 5, 21, 1, 0, 0, 0, 31, 5, 21, 28, 0, 0, 0, 137, 5, 26, 1, 0, 0, 0
	};

	static constexpr std::array<std::uint_least64_t, 138> pflags =
	{
		UINT64_C(7), UINT64_C(4294967319), UINT64_C(4294967327), UINT64_C(140741783322647), UINT64_C(140747152032263), UINT64_C(140746078290183),
		UINT64_C(140746078289927), UINT64_C(141295834104071), UINT64_C(703696031711239), UINT64_C(140746078290439), UINT64_C(140746078290055),
		UINT64_C(141296907846151), UINT64_C(11399736556787719), UINT64_C(141295834104327), UINT64_C(17092320570644487), UINT64_C(17092320570638343),
		UINT64_C(704245787558919), UINT64_C(11399736556781575), UINT64_C(141295834136583), UINT64_C(17088953316284423), UINT64_C(17088953316278279),
		UINT64_C(17088953383387143), UINT64_C(5), UINT64_C(4294967325), UINT64_C(140737488355349), UINT64_C(140746078289925), UINT64_C(141287244201989),
		UINT64_C(17064764060598277), UINT64_C(140746078290181), UINT64_C(703696031711237), UINT64_C(70918499991557), UINT64_C(140737488355333),
		UINT64_C(17097749409300485), UINT64_C(11400286849564677), UINT64_C(17092320570638341), UINT64_C(17088953316278277), UINT64_C(17088953383387141),
		UINT64_C(17064764060467205), UINT64_C(17064420463083525), UINT64_C(17096718617149445), UINT64_C(17094382154940421), UINT64_C(17065313816444933),
		UINT64_C(17065313883553797), UINT64_C(17064970218930181), UINT64_C(17064970218995717), UINT64_C(11541023800983557), UINT64_C(11609537119428613),
		UINT64_C(11611392578682885), UINT64_C(11541023800950789), UINT64_C(1), UINT64_C(3554514934333445), UINT64_C(140737488355845),
		UINT64_C(11400286849466885), UINT64_C(17660699362722821), UINT64_C(17627782733366277), UINT64_C(17064832779943941), UINT64_C(17655270524060677),
		UINT64_C(703687441776645), UINT64_C(282024732524549), UINT64_C(140738562097669), UINT64_C(140737488355461), UINT64_C(11576208173080581),
		UINT64_C(11576208173047813), UINT64_C(141287244169221), UINT64_C(566935683077), UINT64_C(70918499991589), UINT64_C(17064970218962949),
		UINT64_C(11399736556781573), UINT64_C(17064970218897413), UINT64_C(11434920928878597), UINT64_C(11575658418282501), UINT64_C(12560820835713029),
		UINT64_C(17064420597301253), UINT64_C(11399736556814341), UINT64_C(17134789240815621), UINT64_C(11399737093652485), UINT64_C(17083524477616133),
		UINT64_C(140737488420869), UINT64_C(11611394692612101), UINT64_C(17205707975696389), UINT64_C(11541023801049093), UINT64_C(140737488388101),
		UINT64_C(17065313816412165), UINT64_C(17064764127576069), UINT64_C(17065313883521029), UINT64_C(352393477750853), UINT64_C(70918499991621),
		UINT64_C(70922794958885), UINT64_C(140746078290053), UINT64_C(703696031712261), UINT64_C(141295834104069), UINT64_C(141295834103813),
		UINT64_C(140747152032261), UINT64_C(11962686510203909), UINT64_C(633868453413893), UINT64_C(70368777732097), UINT64_C(703687441776773),
		UINT64_C(703687441777669), UINT64_C(12103973754373125), UINT64_C(17627714013889541), UINT64_C(17592186312851461), UINT64_C(17029236359430149),
		UINT64_C(17627370416505861), UINT64_C(17627714080998405), UINT64_C(17092320570900485), UINT64_C(17088953316409349), UINT64_C(703696031711365),
		UINT64_C(8589934593), UINT64_C(203821968269317), UINT64_C(200454713778181), UINT64_C(176480206225413), UINT64_C(140746078290437),
		UINT64_C(140737496743941), UINT64_C(140737490452485), UINT64_C(17064420463099909), UINT64_C(11540474046218245), UINT64_C(3518987233165317),
		UINT64_C(17064420479877125), UINT64_C(17064420463116293), UINT64_C(3553621580972037), UINT64_C(524289), UINT64_C(140737488355589),
		UINT64_C(141288317911557), UINT64_C(141287244169733), UINT64_C(703687441777797), UINT64_C(141287244169477), UINT64_C(11399736556783621),
		UINT64_C(17092320570640389), UINT64_C(704237197624325), UINT64_C(17088953316280325), UINT64_C(12702108080963589), UINT64_C(549755813893),
		UINT64_C(17064420463149061), UINT64_C(11541023801016325), UINT64_C(11540474046185477), UINT64_C(176334177574917), UINT64_C(140771848093701),
		UINT64_C(352393477750789)
	};

	static constexpr std::array<std::uint_least16_t, 16> cflags =
	{
		512, 896, 640, 2432, 3080, 3072, 7280, 7269, 7237, 7176, 7267, 7235, 7233, 7168, 0, 128
	};

	auto table = std::make_unique<raw_record_table>();
	detail::run_length_decode(std::begin(rlestage1), std::end(rlestage1), std::begin(table->stage1));
	detail::run_length_decode(std::begin(rlestage2), std::end(rlestage2), std::begin(table->stage2));
	auto& records = table->records;
	for (std::size_t r = 0, f = 0, e = flyweights.size(); f < e; ++r, f += 7) {
		records[r].pflags = pflags[flyweights[f + 0]];
		records[r].cflags = cflags[flyweights[f + 1]];
		records[r].gcindex = flyweights[f + 2];
		records[r].scindex = flyweights[f + 3];
		records[r].cfindex = flyweights[f + 4];
		records[r].clindex = flyweights[f + 5];
		records[r].cuindex = flyweights[f + 6];
	}
	return table;
}

} // namespace lug::unicode

#endif
