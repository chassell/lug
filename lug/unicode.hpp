// lug - Embedded DSL for PE grammar parser combinators in C++
// Copyright (c) 2017 Jesse W. Towner
// See LICENSE.md file for license details

// This header file is generated by the makeunicode tool program.
// Do not modify this file by hand. Instead, modify and run the
// tool to regenerate this file.

#ifndef LUG_UNICODE_HPP__
#define LUG_UNICODE_HPP__

#include <lug/detail.hpp>
#include <cctype>
#include <cstddef>
#include <cstdint>
#include <algorithm>
#include <array>
#include <iterator>
#include <memory>
#include <optional>
#include <utility>

namespace lug::unicode
{

// POSIX compatibility properties
LUG_BITFIELD_ENUM__(ctype, std::uint_least16_t)
{
	alpha    = UINT16_C(1) <<  0,
	lower    = UINT16_C(1) <<  1,
	upper    = UINT16_C(1) <<  2,
	punct    = UINT16_C(1) <<  3,
	digit    = UINT16_C(1) <<  4,
	xdigit   = UINT16_C(1) <<  5,
	alnum    = UINT16_C(1) <<  6,
	space    = UINT16_C(1) <<  7,
	blank    = UINT16_C(1) <<  8,
	cntrl    = UINT16_C(1) <<  9,
	graph    = UINT16_C(1) << 10,
	print    = UINT16_C(1) << 11,
	word     = UINT16_C(1) << 12,
	none     = 0
};

// Unicode binary properties
LUG_BITFIELD_ENUM__(ptype, std::uint_least64_t)
{
	Any                                  = UINT64_C(1) <<  0,
	Ascii                                = UINT64_C(1) <<  1,
	Assigned                             = UINT64_C(1) <<  2,
	White_Space                          = UINT64_C(1) <<  3,
	Bidi_Control                         = UINT64_C(1) <<  4,
	Join_Control                         = UINT64_C(1) <<  5,
	Dash                                 = UINT64_C(1) <<  6,
	Quotation_Mark                       = UINT64_C(1) <<  7,
	Terminal_Punctuation                 = UINT64_C(1) <<  8,
	Other_Math                           = UINT64_C(1) <<  9,
	Hex_Digit                            = UINT64_C(1) << 10,
	ASCII_Hex_Digit                      = UINT64_C(1) << 11,
	Other_Alphabetic                     = UINT64_C(1) << 12,
	Ideographic                          = UINT64_C(1) << 13,
	Diacritic                            = UINT64_C(1) << 14,
	Extender                             = UINT64_C(1) << 15,
	Other_Lowercase                      = UINT64_C(1) << 16,
	Other_Uppercase                      = UINT64_C(1) << 17,
	Noncharacter_Code_Point              = UINT64_C(1) << 18,
	Other_Grapheme_Extend                = UINT64_C(1) << 19,
	IDS_Binary_Operator                  = UINT64_C(1) << 20,
	IDS_Ternary_Operator                 = UINT64_C(1) << 21,
	Radical                              = UINT64_C(1) << 22,
	Unified_Ideograph                    = UINT64_C(1) << 23,
	Other_Default_Ignorable_Code_Point   = UINT64_C(1) << 24,
	Soft_Dotted                          = UINT64_C(1) << 25,
	Logical_Order_Exception              = UINT64_C(1) << 26,
	Other_ID_Start                       = UINT64_C(1) << 27,
	Other_ID_Continue                    = UINT64_C(1) << 28,
	Sentence_Terminal                    = UINT64_C(1) << 29,
	Variation_Selector                   = UINT64_C(1) << 30,
	Pattern_White_Space                  = UINT64_C(1) << 31,
	Pattern_Syntax                       = UINT64_C(1) << 32,
	Prepended_Concatenation_Mark         = UINT64_C(1) << 33,
	Regional_Indicator                   = UINT64_C(1) << 34,
	Lowercase                            = UINT64_C(1) << 35,
	Uppercase                            = UINT64_C(1) << 36,
	Cased                                = UINT64_C(1) << 37,
	Case_Ignorable                       = UINT64_C(1) << 38,
	Changes_When_Lowercased              = UINT64_C(1) << 39,
	Changes_When_Uppercased              = UINT64_C(1) << 40,
	Changes_When_Titlecased              = UINT64_C(1) << 41,
	Changes_When_Casefolded              = UINT64_C(1) << 42,
	Changes_When_Casemapped              = UINT64_C(1) << 43,
	Alphabetic                           = UINT64_C(1) << 44,
	Default_Ignorable_Code_Point         = UINT64_C(1) << 45,
	Grapheme_Base                        = UINT64_C(1) << 46,
	Grapheme_Extend                      = UINT64_C(1) << 47,
	Math                                 = UINT64_C(1) << 48,
	ID_Start                             = UINT64_C(1) << 49,
	ID_Continue                          = UINT64_C(1) << 50,
	XID_Start                            = UINT64_C(1) << 51,
	XID_Continue                         = UINT64_C(1) << 52,
	None                                 = 0
};

// Unicode general categories
LUG_BITFIELD_ENUM__(gctype, std::uint_least32_t)
{
	Ll = UINT32_C(1) <<  0,    Lowercase_Letter = Ll,
	Lm = UINT32_C(1) <<  1,    Modifier_Letter = Lm,
	Lo = UINT32_C(1) <<  2,    Other_Letter = Lo,
	Lt = UINT32_C(1) <<  3,    Titlecase_Letter = Lt,
	Lu = UINT32_C(1) <<  4,    Uppercase_Letter = Lu,
	Mc = UINT32_C(1) <<  5,    Spacing_Mark = Mc,
	Me = UINT32_C(1) <<  6,    Enclosing_Mark = Me,
	Mn = UINT32_C(1) <<  7,    Nonspacing_Mark = Mn,
	Nd = UINT32_C(1) <<  8,    Decimal_Number = Nd,
	Nl = UINT32_C(1) <<  9,    Letter_Number = Nl,
	No = UINT32_C(1) << 10,    Other_Number = No,
	Pc = UINT32_C(1) << 11,    Connector_Punctuation = Pc,
	Pd = UINT32_C(1) << 12,    Dash_Punctuation = Pd,
	Pe = UINT32_C(1) << 13,    Close_Punctuation = Pe,
	Pf = UINT32_C(1) << 14,    Final_Punctuation = Pf,
	Pi = UINT32_C(1) << 15,    Initial_Punctuation = Pi,
	Po = UINT32_C(1) << 16,    Other_Punctuation = Po,
	Ps = UINT32_C(1) << 17,    Open_Punctuation = Ps,
	Sc = UINT32_C(1) << 18,    Currency_Symbol = Sc,
	Sk = UINT32_C(1) << 19,    Modifier_Symbol = Sk,
	Sm = UINT32_C(1) << 20,    Mathematical_Symbol = Sm,
	So = UINT32_C(1) << 21,    Other_Symbol = So,
	Zl = UINT32_C(1) << 22,    Line_Separator = Zl,
	Zp = UINT32_C(1) << 23,    Paragraph_Separator = Zp,
	Zs = UINT32_C(1) << 24,    Space_Separator = Zs,
	Cc = UINT32_C(1) << 25,    Control = Cc,
	Cf = UINT32_C(1) << 26,    Format = Cf,
	Cn = UINT32_C(1) << 27,    Unassigned = Cn,
	Co = UINT32_C(1) << 28,    Private_Use = Co,
	Cs = UINT32_C(1) << 29,    Surrogate = Cs,
	C  = Cc|Cf|Cn|Co|Cs,       Other = C,
	L  = Lu|Ll|Lt|Lm|Lo,       Letter = L,
	LC = Lu|Ll|Lt,             Cased_Letter = LC,
	M  = Mc|Me|Mn,             Mark = M,
	N  = Nd|Nl|No,             Number = N,
	P  = Pc|Pd|Pe|Pf|Pi|Po|Ps, Punctuation = P,
	S  = Sc|Sm|Sk|So,          Symbol = S,
	Z  = Zl|Zp|Zs,             Separator = Z,
	None = 0
};

// Unicode scripts
enum class sctype : std::uint_least8_t
{
	Unknown                  =   0,
	Common                   =   1,
	Inherited                =   2,
	Arabic                   =   3,
	Armenian                 =   4,
	Bengali                  =   5,
	Bopomofo                 =   6,
	Braille                  =   7,
	Buginese                 =   8,
	Buhid                    =   9,
	Canadian_Aboriginal      =  10,
	Cherokee                 =  11,
	Coptic                   =  12,
	Cypriot                  =  13,
	Cyrillic                 =  14,
	Deseret                  =  15,
	Devanagari               =  16,
	Ethiopic                 =  17,
	Georgian                 =  18,
	Glagolitic               =  19,
	Gothic                   =  20,
	Greek                    =  21,
	Gujarati                 =  22,
	Gurmukhi                 =  23,
	Han                      =  24,
	Hangul                   =  25,
	Hanunoo                  =  26,
	Hebrew                   =  27,
	Hiragana                 =  28,
	Kannada                  =  29,
	Katakana                 =  30,
	Kharoshthi               =  31,
	Khmer                    =  32,
	Lao                      =  33,
	Latin                    =  34,
	Limbu                    =  35,
	Linear_B                 =  36,
	Malayalam                =  37,
	Mongolian                =  38,
	Myanmar                  =  39,
	New_Tai_Lue              =  40,
	Ogham                    =  41,
	Old_Italic               =  42,
	Old_Persian              =  43,
	Oriya                    =  44,
	Osmanya                  =  45,
	Runic                    =  46,
	Shavian                  =  47,
	Sinhala                  =  48,
	Syloti_Nagri             =  49,
	Syriac                   =  50,
	Tagalog                  =  51,
	Tagbanwa                 =  52,
	Tai_Le                   =  53,
	Tamil                    =  54,
	Telugu                   =  55,
	Thaana                   =  56,
	Thai                     =  57,
	Tibetan                  =  58,
	Tifinagh                 =  59,
	Ugaritic                 =  60,
	Yi                       =  61,
	Balinese                 =  62,
	Cuneiform                =  63,
	Nko                      =  64,
	Phags_Pa                 =  65,
	Phoenician               =  66,
	Carian                   =  67,
	Cham                     =  68,
	Kayah_Li                 =  69,
	Lepcha                   =  70,
	Lycian                   =  71,
	Lydian                   =  72,
	Ol_Chiki                 =  73,
	Rejang                   =  74,
	Saurashtra               =  75,
	Sundanese                =  76,
	Vai                      =  77,
	Avestan                  =  78,
	Bamum                    =  79,
	Egyptian_Hieroglyphs     =  80,
	Imperial_Aramaic         =  81,
	Inscriptional_Pahlavi    =  82,
	Inscriptional_Parthian   =  83,
	Javanese                 =  84,
	Kaithi                   =  85,
	Lisu                     =  86,
	Meetei_Mayek             =  87,
	Old_South_Arabian        =  88,
	Old_Turkic               =  89,
	Samaritan                =  90,
	Tai_Tham                 =  91,
	Tai_Viet                 =  92,
	Batak                    =  93,
	Brahmi                   =  94,
	Mandaic                  =  95,
	Chakma                   =  96,
	Meroitic_Cursive         =  97,
	Meroitic_Hieroglyphs     =  98,
	Miao                     =  99,
	Sharada                  = 100,
	Sora_Sompeng             = 101,
	Takri                    = 102,
	Bassa_Vah                = 103,
	Caucasian_Albanian       = 104,
	Duployan                 = 105,
	Elbasan                  = 106,
	Grantha                  = 107,
	Khojki                   = 108,
	Khudawadi                = 109,
	Linear_A                 = 110,
	Mahajani                 = 111,
	Manichaean               = 112,
	Mende_Kikakui            = 113,
	Modi                     = 114,
	Mro                      = 115,
	Nabataean                = 116,
	Old_North_Arabian        = 117,
	Old_Permic               = 118,
	Pahawh_Hmong             = 119,
	Palmyrene                = 120,
	Psalter_Pahlavi          = 121,
	Pau_Cin_Hau              = 122,
	Siddham                  = 123,
	Tirhuta                  = 124,
	Warang_Citi              = 125,
	Ahom                     = 126,
	Anatolian_Hieroglyphs    = 127,
	Hatran                   = 128,
	Multani                  = 129,
	Old_Hungarian            = 130,
	SignWriting              = 131,
	Adlam                    = 132,
	Bhaiksuki                = 133,
	Marchen                  = 134,
	Newa                     = 135,
	Osage                    = 136,
	Tangut                   = 137,
	Masaram_Gondi            = 138,
	Nushu                    = 139,
	Soyombo                  = 140,
	Zanabazar_Square         = 141
};

// Unicode Character Database (UCD) record
class ucd_record
{
	struct raw_record {
		std::uint_least64_t pflags;
		std::uint_least16_t cflags;
		std::uint_least8_t gcindex;
		std::uint_least8_t scindex;
	} const* record_;
	explicit ucd_record(raw_record const* r) noexcept : record_(r) {}
	struct raw_record_table {
		std::array<std::uint_least8_t, 8704> stage1;
		std::array<std::uint_least16_t, 31616> stage2;
		std::array<raw_record, 861> records;
	};
	static std::unique_ptr<raw_record_table> decompress_table();
	friend ucd_record query(char32_t r);
public:
	ctype compatibility() const noexcept { return static_cast<ctype>(record_->cflags); }
	ptype properties() const noexcept { return static_cast<ptype>(record_->pflags); }
	gctype general_category() const noexcept { return static_cast<gctype>(UINT32_C(1) << record_->gcindex); }
	sctype script() const noexcept { return static_cast<sctype>(record_->scindex); }
	bool any_of(ctype c) const noexcept { return (compatibility() & c) != ctype::none; }
	bool any_of(ptype p) const noexcept { return (properties() & p) != ptype::None; }
	bool any_of(gctype gc) const noexcept { return (general_category() & gc) != gctype::None; }
};

// Retrieves the UCD record for the given Unicode codepoint
inline ucd_record query(char32_t r)
{
	static auto const table = ucd_record::decompress_table();
	std::size_t index = 61;
	if (r < 0x110000) {
		index = table->stage1[r >> 7];
		index = table->stage2[(index << 7) | (r & 0x7f)];
	}
	return ucd_record{table->records.data() + index};
}

namespace detail
{

inline std::string normalize_property_label(std::string_view id)
{
	std::string normid;
	for (char c : id)
		if (c != ' ' && c != '\t' && c != '_' && c != '-')
			normid.push_back(static_cast<char>(std::tolower(c)));
	return normid;
}

} // namespace detail

// Convert from text to ctype property
inline std::optional<ctype> stoctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using ct = ctype;

	static constexpr std::array<std::pair<std::string_view, ctype>, 13> labels =
	{ {
		{ "alnum"sv, ct::alnum }, { "alpha"sv, ct::alpha }, { "blank"sv, ct::blank }, { "cntrl"sv, ct::cntrl },
		{ "digit"sv, ct::digit }, { "graph"sv, ct::graph }, { "lower"sv, ct::lower }, { "print"sv, ct::print },
		{ "punct"sv, ct::punct }, { "space"sv, ct::space }, { "upper"sv, ct::upper }, { "word"sv, ct::word }, { "xdigit"sv, ct::xdigit }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ctype>{static_cast<ctype>(c->second)} : std::nullopt;
}

// Convert from text to ptype property
inline std::optional<ptype> stoptype(std::string_view s)
{
	using namespace std::string_view_literals;
	using pt = ptype;

	static constexpr std::array<std::pair<std::string_view, ptype>, 53> labels =
	{ {
		{ "alphabetic"sv, pt::Alphabetic }, { "any"sv, pt::Any }, { "ascii"sv, pt::Ascii },
		{ "asciihexdigit"sv, pt::ASCII_Hex_Digit }, { "assigned"sv, pt::Assigned }, { "bidicontrol"sv, pt::Bidi_Control },
		{ "cased"sv, pt::Cased }, { "caseignorable"sv, pt::Case_Ignorable },
		{ "changeswhencasefolded"sv, pt::Changes_When_Casefolded }, { "changeswhencasemapped"sv, pt::Changes_When_Casemapped },
		{ "changeswhenlowercased"sv, pt::Changes_When_Lowercased }, { "changeswhentitlecased"sv, pt::Changes_When_Titlecased },
		{ "changeswhenuppercased"sv, pt::Changes_When_Uppercased }, { "dash"sv, pt::Dash },
		{ "defaultignorablecodepoint"sv, pt::Default_Ignorable_Code_Point }, { "diacritic"sv, pt::Diacritic },
		{ "extender"sv, pt::Extender }, { "graphemebase"sv, pt::Grapheme_Base }, { "graphemeextend"sv, pt::Grapheme_Extend },
		{ "hexdigit"sv, pt::Hex_Digit }, { "idcontinue"sv, pt::ID_Continue }, { "ideographic"sv, pt::Ideographic },
		{ "idsbinaryoperator"sv, pt::IDS_Binary_Operator }, { "idstart"sv, pt::ID_Start },
		{ "idsternaryoperator"sv, pt::IDS_Ternary_Operator }, { "joincontrol"sv, pt::Join_Control },
		{ "logicalorderexception"sv, pt::Logical_Order_Exception }, { "lowercase"sv, pt::Lowercase }, { "math"sv, pt::Math },
		{ "noncharactercodepoint"sv, pt::Noncharacter_Code_Point }, { "otheralphabetic"sv, pt::Other_Alphabetic },
		{ "otherdefaultignorablecodepoint"sv, pt::Other_Default_Ignorable_Code_Point },
		{ "othergraphemeextend"sv, pt::Other_Grapheme_Extend }, { "otheridcontinue"sv, pt::Other_ID_Continue },
		{ "otheridstart"sv, pt::Other_ID_Start }, { "otherlowercase"sv, pt::Other_Lowercase }, { "othermath"sv, pt::Other_Math },
		{ "otheruppercase"sv, pt::Other_Uppercase }, { "patternsyntax"sv, pt::Pattern_Syntax },
		{ "patternwhitespace"sv, pt::Pattern_White_Space }, { "prependedconcatenationmark"sv, pt::Prepended_Concatenation_Mark },
		{ "quotationmark"sv, pt::Quotation_Mark }, { "radical"sv, pt::Radical },
		{ "regionalindicator"sv, pt::Regional_Indicator }, { "sentenceterminal"sv, pt::Sentence_Terminal },
		{ "softdotted"sv, pt::Soft_Dotted }, { "terminalpunctuation"sv, pt::Terminal_Punctuation },
		{ "unifiedideograph"sv, pt::Unified_Ideograph }, { "uppercase"sv, pt::Uppercase },
		{ "variationselector"sv, pt::Variation_Selector }, { "whitespace"sv, pt::White_Space },
		{ "xidcontinue"sv, pt::XID_Continue }, { "xidstart"sv, pt::XID_Start }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ptype>{static_cast<ptype>(c->second)} : std::nullopt;
}

// Convert from text to gctype property
inline std::optional<gctype> stogctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using gc = gctype;

	static constexpr std::array<std::pair<std::string_view, gctype>, 60> labels =
	{ {
		{ "cc"sv, gc::Cc }, { "cf"sv, gc::Cf }, { "closepunctuation"sv, gc::Pe }, { "cn"sv, gc::Cn }, { "co"sv, gc::Co },
		{ "connectorpunctuation"sv, gc::Pc }, { "control"sv, gc::Cc }, { "cs"sv, gc::Cs }, { "currencysymbol"sv, gc::Sc },
		{ "dashpunctuation"sv, gc::Pd }, { "decimalnumber"sv, gc::Nd }, { "enclosingmark"sv, gc::Me },
		{ "finalpunctuation"sv, gc::Pf }, { "format"sv, gc::Cf }, { "initialpunctuation"sv, gc::Pi },
		{ "letternumber"sv, gc::Nl }, { "lineseparator"sv, gc::Zl }, { "ll"sv, gc::Ll }, { "lm"sv, gc::Lm }, { "lo"sv, gc::Lo },
		{ "lowercaseletter"sv, gc::Ll }, { "lt"sv, gc::Lt }, { "lu"sv, gc::Lu }, { "mathematicalsymbol"sv, gc::Sm },
		{ "mc"sv, gc::Mc }, { "me"sv, gc::Me }, { "mn"sv, gc::Mn }, { "modifierletter"sv, gc::Lm },
		{ "modifiersymbol"sv, gc::Sk }, { "nd"sv, gc::Nd }, { "nl"sv, gc::Nl }, { "no"sv, gc::No },
		{ "nonspacingmark"sv, gc::Mn }, { "openpunctuation"sv, gc::Ps }, { "otherletter"sv, gc::Lo },
		{ "othernumber"sv, gc::No }, { "otherpunctuation"sv, gc::Po }, { "othersymbol"sv, gc::So },
		{ "paragraphseparator"sv, gc::Zp }, { "pc"sv, gc::Pc }, { "pd"sv, gc::Pd }, { "pe"sv, gc::Pe }, { "pf"sv, gc::Pf },
		{ "pi"sv, gc::Pi }, { "po"sv, gc::Po }, { "privateuse"sv, gc::Co }, { "ps"sv, gc::Ps }, { "sc"sv, gc::Sc },
		{ "sk"sv, gc::Sk }, { "sm"sv, gc::Sm }, { "so"sv, gc::So }, { "spaceseparator"sv, gc::Zs }, { "spacingmark"sv, gc::Mc },
		{ "surrogate"sv, gc::Cs }, { "titlecaseletter"sv, gc::Lt }, { "unassigned"sv, gc::Cn }, { "uppercaseletter"sv, gc::Lu },
		{ "zl"sv, gc::Zl }, { "zp"sv, gc::Zp }, { "zs"sv, gc::Zs }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<gctype>{static_cast<gctype>(c->second)} : std::nullopt;
}

// Convert from text to sctype property
inline std::optional<sctype> stosctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using sc = sctype;

	static constexpr std::array<std::pair<std::string_view, sctype>, 142> labels =
	{ {
		{ "adlam"sv, sc::Adlam }, { "ahom"sv, sc::Ahom }, { "anatolianhieroglyphs"sv, sc::Anatolian_Hieroglyphs },
		{ "arabic"sv, sc::Arabic }, { "armenian"sv, sc::Armenian }, { "avestan"sv, sc::Avestan }, { "balinese"sv, sc::Balinese },
		{ "bamum"sv, sc::Bamum }, { "bassavah"sv, sc::Bassa_Vah }, { "batak"sv, sc::Batak }, { "bengali"sv, sc::Bengali },
		{ "bhaiksuki"sv, sc::Bhaiksuki }, { "bopomofo"sv, sc::Bopomofo }, { "brahmi"sv, sc::Brahmi },
		{ "braille"sv, sc::Braille }, { "buginese"sv, sc::Buginese }, { "buhid"sv, sc::Buhid },
		{ "canadianaboriginal"sv, sc::Canadian_Aboriginal }, { "carian"sv, sc::Carian },
		{ "caucasianalbanian"sv, sc::Caucasian_Albanian }, { "chakma"sv, sc::Chakma }, { "cham"sv, sc::Cham },
		{ "cherokee"sv, sc::Cherokee }, { "common"sv, sc::Common }, { "coptic"sv, sc::Coptic }, { "cuneiform"sv, sc::Cuneiform },
		{ "cypriot"sv, sc::Cypriot }, { "cyrillic"sv, sc::Cyrillic }, { "deseret"sv, sc::Deseret },
		{ "devanagari"sv, sc::Devanagari }, { "duployan"sv, sc::Duployan },
		{ "egyptianhieroglyphs"sv, sc::Egyptian_Hieroglyphs }, { "elbasan"sv, sc::Elbasan }, { "ethiopic"sv, sc::Ethiopic },
		{ "georgian"sv, sc::Georgian }, { "glagolitic"sv, sc::Glagolitic }, { "gothic"sv, sc::Gothic },
		{ "grantha"sv, sc::Grantha }, { "greek"sv, sc::Greek }, { "gujarati"sv, sc::Gujarati }, { "gurmukhi"sv, sc::Gurmukhi },
		{ "han"sv, sc::Han }, { "hangul"sv, sc::Hangul }, { "hanunoo"sv, sc::Hanunoo }, { "hatran"sv, sc::Hatran },
		{ "hebrew"sv, sc::Hebrew }, { "hiragana"sv, sc::Hiragana }, { "imperialaramaic"sv, sc::Imperial_Aramaic },
		{ "inherited"sv, sc::Inherited }, { "inscriptionalpahlavi"sv, sc::Inscriptional_Pahlavi },
		{ "inscriptionalparthian"sv, sc::Inscriptional_Parthian }, { "javanese"sv, sc::Javanese }, { "kaithi"sv, sc::Kaithi },
		{ "kannada"sv, sc::Kannada }, { "katakana"sv, sc::Katakana }, { "kayahli"sv, sc::Kayah_Li },
		{ "kharoshthi"sv, sc::Kharoshthi }, { "khmer"sv, sc::Khmer }, { "khojki"sv, sc::Khojki },
		{ "khudawadi"sv, sc::Khudawadi }, { "lao"sv, sc::Lao }, { "latin"sv, sc::Latin }, { "lepcha"sv, sc::Lepcha },
		{ "limbu"sv, sc::Limbu }, { "lineara"sv, sc::Linear_A }, { "linearb"sv, sc::Linear_B }, { "lisu"sv, sc::Lisu },
		{ "lycian"sv, sc::Lycian }, { "lydian"sv, sc::Lydian }, { "mahajani"sv, sc::Mahajani }, { "malayalam"sv, sc::Malayalam },
		{ "mandaic"sv, sc::Mandaic }, { "manichaean"sv, sc::Manichaean }, { "marchen"sv, sc::Marchen },
		{ "masaramgondi"sv, sc::Masaram_Gondi }, { "meeteimayek"sv, sc::Meetei_Mayek }, { "mendekikakui"sv, sc::Mende_Kikakui },
		{ "meroiticcursive"sv, sc::Meroitic_Cursive }, { "meroitichieroglyphs"sv, sc::Meroitic_Hieroglyphs },
		{ "miao"sv, sc::Miao }, { "modi"sv, sc::Modi }, { "mongolian"sv, sc::Mongolian }, { "mro"sv, sc::Mro },
		{ "multani"sv, sc::Multani }, { "myanmar"sv, sc::Myanmar }, { "nabataean"sv, sc::Nabataean }, { "newa"sv, sc::Newa },
		{ "newtailue"sv, sc::New_Tai_Lue }, { "nko"sv, sc::Nko }, { "nushu"sv, sc::Nushu }, { "ogham"sv, sc::Ogham },
		{ "olchiki"sv, sc::Ol_Chiki }, { "oldhungarian"sv, sc::Old_Hungarian }, { "olditalic"sv, sc::Old_Italic },
		{ "oldnortharabian"sv, sc::Old_North_Arabian }, { "oldpermic"sv, sc::Old_Permic }, { "oldpersian"sv, sc::Old_Persian },
		{ "oldsoutharabian"sv, sc::Old_South_Arabian }, { "oldturkic"sv, sc::Old_Turkic }, { "oriya"sv, sc::Oriya },
		{ "osage"sv, sc::Osage }, { "osmanya"sv, sc::Osmanya }, { "pahawhhmong"sv, sc::Pahawh_Hmong },
		{ "palmyrene"sv, sc::Palmyrene }, { "paucinhau"sv, sc::Pau_Cin_Hau }, { "phagspa"sv, sc::Phags_Pa },
		{ "phoenician"sv, sc::Phoenician }, { "psalterpahlavi"sv, sc::Psalter_Pahlavi }, { "rejang"sv, sc::Rejang },
		{ "runic"sv, sc::Runic }, { "samaritan"sv, sc::Samaritan }, { "saurashtra"sv, sc::Saurashtra },
		{ "sharada"sv, sc::Sharada }, { "shavian"sv, sc::Shavian }, { "siddham"sv, sc::Siddham },
		{ "signwriting"sv, sc::SignWriting }, { "sinhala"sv, sc::Sinhala }, { "sorasompeng"sv, sc::Sora_Sompeng },
		{ "soyombo"sv, sc::Soyombo }, { "sundanese"sv, sc::Sundanese }, { "sylotinagri"sv, sc::Syloti_Nagri },
		{ "syriac"sv, sc::Syriac }, { "tagalog"sv, sc::Tagalog }, { "tagbanwa"sv, sc::Tagbanwa }, { "taile"sv, sc::Tai_Le },
		{ "taitham"sv, sc::Tai_Tham }, { "taiviet"sv, sc::Tai_Viet }, { "takri"sv, sc::Takri }, { "tamil"sv, sc::Tamil },
		{ "tangut"sv, sc::Tangut }, { "telugu"sv, sc::Telugu }, { "thaana"sv, sc::Thaana }, { "thai"sv, sc::Thai },
		{ "tibetan"sv, sc::Tibetan }, { "tifinagh"sv, sc::Tifinagh }, { "tirhuta"sv, sc::Tirhuta },
		{ "ugaritic"sv, sc::Ugaritic }, { "unknown"sv, sc::Unknown }, { "vai"sv, sc::Vai }, { "warangciti"sv, sc::Warang_Citi },
		{ "yi"sv, sc::Yi }, { "zanabazarsquare"sv, sc::Zanabazar_Square }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<sctype>{static_cast<sctype>(c->second)} : std::nullopt;
}

namespace detail
{

template <class InputIt, class OutputIt>
void run_length_decode(InputIt first, InputIt last, OutputIt dest)
{
	using value_type = typename std::iterator_traits<InputIt>::value_type;
	constexpr auto seqmask = static_cast<value_type>(0x03ull << (std::numeric_limits<value_type>::digits - 2));
	while (first != last) {
		auto const lead = *first++;
		if ((lead & seqmask) == seqmask)
			dest = ::std::fill_n(dest, static_cast<std::size_t>(lead & ~seqmask) + 1, *first++);
		else
			*dest++ = lead;
	}
}

} // namespace detail

inline std::unique_ptr<ucd_record::raw_record_table> ucd_record::decompress_table()
{
	static constexpr std::array<std::uint_least8_t, 625> rlestage1 =
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
		33, 34, 35, 36, 37, 38, 39, 40, 194, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 72, 75, 76, 193, 77, 67, 78, 193, 67, 79, 80, 81, 82, 83, 84, 85, 86,
		87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 242, 97, 98, 255, 97, 255, 97, 99, 100, 199, 101, 102, 193, 103, 104, 105, 106, 107,
		108, 109, 110, 111, 112, 113, 114, 115, 255, 35, 116, 207, 117, 241, 118, 193, 119, 120, 121, 122, 123, 124, 125, 126, 127,
		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 136, 193, 143, 144, 136, 145, 146, 147, 148, 149,
		150, 151, 152, 153, 154, 193, 136, 155, 194, 136, 156, 157, 158, 159, 160, 161, 162, 136, 163, 164, 136, 165, 166, 167, 168,
		193, 136, 169, 193, 136, 170, 171, 193, 136, 172, 173, 174, 196, 136, 198, 175, 176, 177, 175, 178, 212, 136, 199, 179, 180,
		222, 136, 195, 181, 182, 255, 136, 195, 183, 184, 185, 186, 187, 197, 136, 188, 189, 238, 190, 191, 196, 190, 192, 192, 255,
		136, 192, 193, 192, 194, 192, 195, 193, 196, 192, 197, 209, 136, 192, 198, 192, 199, 229, 136, 96, 192, 200, 192, 201, 192,
		202, 192, 203, 136, 192, 204, 136, 192, 205, 192, 206, 192, 207, 192, 208, 192, 209, 192, 210, 192, 211, 192, 212, 195, 213,
		192, 214, 192, 215, 201, 136, 192, 216, 206, 136, 192, 217, 192, 218, 192, 219, 200, 136, 192, 220, 192, 221, 193, 136, 192,
		222, 192, 223, 192, 224, 192, 225, 192, 226, 136, 96, 192, 227, 196, 96, 192, 228, 192, 229, 192, 230, 192, 231, 192, 232,
		192, 233, 192, 234, 202, 136, 192, 235, 255, 97, 255, 97, 255, 97, 255, 97, 255, 97, 192, 236, 223, 97, 192, 237, 97, 192,
		238, 235, 97, 192, 239, 248, 97, 192, 240, 215, 136, 195, 119, 192, 241, 201, 136, 192, 235, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192,
		235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255,
		136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255,
		136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136,
		255, 136, 192, 235, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 192, 242, 192, 243, 192,
		244, 192, 245, 219, 243, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 255, 136, 192, 235, 255, 118, 255, 118,
		255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 192, 246, 255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 255, 118, 255,
		118, 192, 246
	};

	static constexpr std::array<std::uint_least16_t, 6083> rlestage2 =
	{
		49160, 0, 1, 49155, 2, 49169, 0, 3, 4, 5, 6, 7, 49153, 6, 8, 9, 10, 6, 11, 12, 13, 14, 6, 49161, 15, 16, 12, 49154, 11, 4,
		6, 49157, 17, 49171, 18, 9, 6, 10, 19, 20, 21, 49157, 22, 49153, 23, 49153, 24, 49167, 23, 9, 11, 10, 11, 49153, 0, 49155,
		25, 26, 49177, 25, 27, 28, 49155, 29, 30, 28, 31, 30, 32, 33, 34, 35, 30, 31, 30, 34, 49153, 36, 31, 37, 28, 38, 31, 36,
		32, 39, 49154, 36, 28, 49174, 40, 34, 49158, 40, 41, 49174, 42, 34, 49159, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 43, 40, 42, 40, 42, 40, 42, 40, 42, 44, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		41, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 49153, 40, 42, 40, 42, 40, 42, 41, 42, 49153, 40, 42, 40,
		42, 49153, 40, 42, 49154, 40, 42, 44, 49155, 40, 42, 49153, 40, 42, 49154, 40, 49153, 42, 44, 49153, 40, 42, 49153, 40, 42,
		40, 42, 40, 42, 49153, 40, 42, 40, 49153, 44, 40, 42, 49153, 40, 42, 49154, 40, 42, 40, 42, 49153, 40, 42, 44, 45, 40, 42,
		44, 42, 49155, 45, 46, 47, 42, 46, 47, 42, 46, 47, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 49153,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 49153, 42, 46, 47, 42, 40, 42, 49154, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 40, 44, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 49157, 44, 49153,
		40, 42, 49153, 40, 49153, 42, 40, 42, 49155, 40, 42, 40, 43, 40, 42, 40, 42, 40, 49157, 42, 44, 49153, 42, 44, 42, 44, 49153,
		42, 49154, 44, 49153, 42, 44, 42, 44, 49153, 42, 44, 43, 49155, 42, 49153, 44, 42, 44, 49153, 42, 49153, 44, 42, 49158, 44,
		42, 49153, 44, 42, 49153, 44, 42, 49154, 44, 49157, 42, 49156, 44, 42, 44, 45, 49159, 44, 43, 42, 49168, 44, 49153, 48, 49,
		49157, 48, 49158, 50, 49153, 51, 49155, 31, 49161, 50, 49153, 52, 49165, 31, 49156, 48, 49156, 31, 49153, 53, 50, 31, 50,
		49168, 31, 49220, 54, 55, 49160, 54, 56, 49159, 54, 49156, 57, 49157, 54, 49164, 57, 58, 59, 58, 59, 50, 60, 58, 59, 49153,
		61, 62, 49154, 59, 63, 58, 49155, 61, 60, 31, 58, 64, 49154, 58, 61, 58, 61, 49153, 58, 59, 49168, 58, 61, 49160, 58, 49173,
		59, 65, 49163, 59, 58, 49153, 66, 67, 49153, 68, 66, 65, 59, 58, 59, 58, 59, 58, 59, 58, 59, 58, 59, 69, 70, 69, 70, 69,
		70, 69, 70, 69, 70, 69, 70, 69, 70, 49153, 66, 59, 71, 72, 66, 73, 58, 59, 49153, 58, 59, 74, 49154, 58, 49199, 75, 49189,
		76, 77, 76, 77, 49158, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76,
		75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 78, 49153, 79, 49153, 54, 79, 49153, 80, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76,
		75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75,
		76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 49153, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 49153, 76,
		75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75,
		76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76,
		75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75,
		76, 75, 76, 61, 49189, 81, 49153, 61, 82, 49157, 83, 61, 49189, 84, 85, 61, 86, 87, 49153, 61, 49153, 88, 89, 61, 49168,
		90, 91, 49164, 90, 49165, 92, 93, 92, 94, 49153, 92, 95, 92, 96, 94, 96, 49159, 61, 49178, 97, 49156, 61, 49154, 97, 94,
		98, 49162, 61, 49156, 99, 100, 49154, 101, 49153, 102, 103, 63, 102, 49153, 104, 49162, 105, 63, 106, 61, 102, 86, 49183,
		107, 108, 49161, 107, 49159, 109, 49154, 110, 105, 111, 112, 49158, 105, 49161, 113, 49155, 102, 49153, 107, 110, 49250,
		107, 114, 107, 49158, 105, 100, 104, 49153, 112, 49155, 105, 49153, 115, 49153, 105, 104, 49154, 112, 105, 49153, 107, 49161,
		113, 49154, 107, 49153, 104, 107, 49154, 116, 49159, 117, 118, 117, 118, 61, 119, 120, 121, 49181, 120, 49167, 122, 49162,
		123, 49153, 61, 49154, 120, 49199, 107, 49189, 124, 49162, 125, 124, 49165, 61, 49161, 126, 49184, 127, 49160, 128, 49153,
		129, 130, 131, 132, 133, 134, 49156, 61, 49173, 135, 49153, 136, 49153, 137, 138, 49160, 136, 138, 49154, 136, 138, 49155,
		136, 139, 49153, 61, 49166, 140, 61, 49176, 141, 49154, 142, 49153, 61, 143, 61, 49162, 120, 49204, 61, 49172, 107, 61, 49159,
		107, 49173, 61, 49163, 105, 49153, 144, 100, 49158, 111, 49157, 112, 49166, 111, 105, 49154, 145, 146, 49205, 147, 145, 146,
		148, 147, 49154, 146, 49159, 145, 49155, 146, 148, 49153, 146, 147, 49153, 54, 49153, 148, 49154, 145, 49161, 147, 49153,
		145, 49153, 86, 49161, 149, 150, 151, 49165, 147, 152, 153, 49153, 154, 61, 49159, 152, 49153, 61, 49153, 152, 49153, 61,
		49173, 152, 61, 49158, 152, 61, 152, 49154, 61, 49155, 152, 49153, 61, 155, 152, 156, 49153, 154, 49155, 153, 49153, 61,
		49153, 154, 49153, 61, 49153, 154, 155, 152, 49159, 61, 156, 49155, 61, 49153, 152, 61, 49154, 152, 49153, 153, 49153, 61,
		49161, 157, 49153, 152, 49153, 158, 49157, 159, 160, 158, 152, 161, 49154, 61, 49153, 162, 163, 61, 49157, 164, 49155, 61,
		49153, 164, 49153, 61, 49173, 164, 61, 49158, 164, 61, 49153, 164, 61, 49153, 164, 61, 49153, 164, 49153, 61, 165, 61, 49154,
		163, 49153, 162, 49155, 61, 49153, 162, 49153, 61, 49153, 162, 165, 49154, 61, 162, 49158, 61, 49155, 164, 61, 164, 49158,
		61, 49161, 166, 49153, 162, 49154, 164, 162, 49162, 61, 49153, 167, 168, 61, 49160, 169, 61, 49154, 169, 61, 49173, 169,
		61, 49158, 169, 61, 49153, 169, 61, 49156, 169, 49153, 61, 170, 169, 49154, 168, 49156, 167, 61, 49153, 167, 168, 61, 49153,
		168, 170, 49153, 61, 169, 49166, 61, 49153, 169, 49153, 167, 49153, 61, 49161, 171, 172, 173, 49158, 61, 169, 49154, 167,
		49154, 170, 61, 174, 49153, 175, 61, 49159, 176, 49153, 61, 49153, 176, 49153, 61, 49173, 176, 61, 49158, 176, 61, 49153,
		176, 61, 49156, 176, 49153, 61, 177, 176, 178, 174, 175, 49155, 174, 49153, 61, 49153, 175, 49153, 61, 49153, 175, 177, 49159,
		61, 174, 178, 49155, 61, 49153, 176, 61, 49154, 176, 49153, 174, 49153, 61, 49161, 179, 180, 176, 49157, 181, 49161, 61,
		182, 183, 61, 49157, 183, 49154, 61, 49154, 183, 61, 49155, 183, 49154, 61, 49153, 183, 61, 183, 61, 49153, 183, 49154, 61,
		49153, 183, 49154, 61, 49154, 183, 49154, 61, 49163, 183, 49155, 61, 184, 185, 182, 49153, 185, 49154, 61, 49154, 185, 61,
		49154, 185, 186, 49153, 61, 183, 49157, 61, 184, 49165, 61, 49161, 187, 49154, 188, 49157, 189, 190, 189, 49156, 61, 191,
		49154, 192, 61, 49159, 193, 61, 49154, 193, 61, 49174, 193, 61, 49167, 193, 49154, 61, 193, 49154, 191, 49155, 192, 61, 49154,
		191, 61, 49154, 191, 194, 49158, 61, 49153, 191, 61, 49154, 193, 49156, 61, 49153, 193, 49153, 191, 49153, 61, 49161, 195,
		49159, 61, 49158, 196, 197, 198, 199, 49153, 200, 61, 49159, 198, 61, 49154, 198, 61, 49174, 198, 61, 49161, 198, 61, 49156,
		198, 49153, 61, 201, 198, 200, 199, 49153, 200, 202, 49153, 200, 61, 199, 49153, 200, 61, 49153, 200, 199, 201, 49158, 61,
		49153, 202, 49158, 61, 198, 61, 49153, 198, 49153, 199, 49153, 61, 49161, 203, 61, 49153, 198, 49164, 61, 49153, 204, 49153,
		205, 61, 49159, 206, 61, 49154, 206, 61, 49192, 206, 49153, 207, 206, 208, 49153, 205, 49155, 204, 61, 49154, 205, 61, 49154,
		205, 207, 206, 209, 49155, 61, 49154, 206, 208, 49158, 210, 49154, 206, 49153, 204, 49153, 61, 49161, 211, 49160, 210, 209,
		49157, 206, 49153, 61, 49153, 212, 61, 49169, 213, 49154, 61, 49175, 213, 61, 49160, 213, 61, 213, 49153, 61, 49158, 213,
		49154, 61, 214, 49155, 61, 215, 49153, 212, 49154, 216, 61, 216, 61, 49158, 212, 215, 49157, 61, 49161, 217, 49153, 61, 49153,
		212, 218, 49163, 61, 49199, 219, 220, 219, 221, 49158, 220, 49155, 61, 222, 49156, 223, 219, 224, 49157, 225, 220, 225, 226,
		49161, 227, 49153, 228, 49188, 61, 49153, 229, 61, 229, 49153, 61, 49153, 229, 61, 229, 49153, 61, 229, 49157, 61, 49155,
		229, 61, 49158, 229, 61, 49154, 229, 61, 229, 61, 229, 49153, 61, 49153, 229, 61, 49155, 229, 230, 229, 231, 49157, 230,
		61, 49153, 230, 229, 49153, 61, 49156, 232, 61, 233, 61, 49156, 234, 230, 49153, 61, 49161, 235, 49153, 61, 49155, 229, 49183,
		61, 236, 49154, 237, 49155, 238, 239, 49155, 238, 49157, 239, 237, 238, 49154, 237, 49153, 240, 49157, 237, 49161, 241, 49161,
		242, 237, 240, 237, 240, 237, 240, 243, 244, 243, 244, 49153, 245, 49159, 236, 61, 49187, 236, 49155, 61, 49165, 246, 247,
		49153, 246, 49154, 240, 238, 49153, 240, 49156, 236, 49162, 246, 61, 49187, 246, 61, 49159, 237, 240, 49157, 237, 61, 49153,
		237, 49156, 238, 49155, 248, 49153, 238, 49188, 61, 49194, 249, 49153, 250, 49155, 251, 250, 49156, 251, 252, 250, 49153,
		252, 49153, 250, 49153, 251, 249, 49161, 253, 49153, 254, 49155, 255, 49157, 249, 49153, 250, 49153, 251, 49155, 249, 49154,
		251, 249, 250, 49153, 256, 49153, 249, 49153, 250, 49156, 256, 49154, 249, 49155, 251, 49164, 249, 251, 49153, 250, 49153,
		251, 49157, 257, 252, 249, 257, 49161, 253, 49153, 257, 250, 251, 49153, 258, 49189, 259, 61, 259, 49156, 61, 259, 49153,
		61, 49194, 260, 261, 262, 49154, 260, 49246, 263, 49153, 264, 49310, 263, 49224, 265, 61, 49155, 265, 49153, 61, 49158, 265,
		61, 265, 61, 49155, 265, 49153, 61, 49192, 265, 61, 49155, 265, 49153, 61, 49184, 265, 61, 49155, 265, 49153, 61, 49158,
		265, 61, 265, 61, 49155, 265, 49153, 61, 49166, 265, 61, 49208, 265, 61, 49155, 265, 49153, 61, 49218, 265, 49153, 61, 49153,
		266, 267, 268, 269, 270, 49155, 269, 49153, 270, 49160, 271, 49162, 272, 49154, 61, 49167, 265, 49161, 273, 49157, 61, 49237,
		274, 49153, 61, 49157, 275, 49153, 61, 276, 49515, 277, 278, 279, 49168, 277, 280, 49177, 281, 282, 283, 49154, 61, 49226,
		284, 49154, 63, 49154, 285, 49159, 284, 49158, 61, 49164, 286, 61, 49155, 286, 49153, 287, 288, 49162, 61, 49169, 289, 49153,
		290, 291, 49153, 86, 49160, 61, 49169, 292, 49153, 293, 49163, 61, 49164, 294, 61, 49154, 294, 61, 49153, 295, 49163, 61,
		49203, 296, 49153, 297, 298, 49158, 299, 49159, 298, 299, 49153, 298, 49162, 300, 49154, 301, 302, 49153, 303, 301, 304,
		296, 300, 49153, 61, 49161, 305, 49157, 61, 49161, 306, 49157, 61, 49153, 307, 63, 86, 308, 63, 309, 307, 308, 310, 311,
		49154, 312, 313, 61, 49161, 314, 49157, 61, 49186, 315, 316, 49203, 315, 49159, 61, 49156, 315, 49153, 317, 49185, 315, 318,
		315, 49156, 61, 49221, 277, 49161, 61, 49182, 319, 61, 49154, 320, 49155, 321, 49153, 320, 49154, 321, 49155, 61, 49153,
		321, 320, 49157, 321, 49154, 322, 49155, 61, 323, 49154, 61, 49153, 324, 49161, 325, 49181, 326, 49153, 61, 49156, 326, 49162,
		61, 49195, 327, 49155, 61, 49156, 327, 49154, 328, 49153, 327, 328, 49166, 327, 49157, 61, 49161, 329, 330, 49154, 61, 49153,
		331, 49183, 332, 49174, 333, 49153, 334, 49153, 335, 334, 49153, 61, 49153, 336, 49204, 337, 338, 339, 338, 49158, 339, 61,
		340, 338, 339, 49153, 338, 49159, 339, 49157, 338, 49153, 339, 49159, 341, 49153, 61, 341, 49161, 342, 49157, 61, 49161,
		342, 49157, 61, 49158, 343, 344, 49155, 345, 49153, 343, 49153, 61, 49165, 54, 346, 49216, 61, 49155, 347, 348, 49198, 349,
		350, 348, 49156, 347, 348, 347, 49156, 348, 347, 348, 351, 49158, 349, 49155, 61, 49161, 352, 49153, 353, 354, 355, 49153,
		353, 354, 49161, 356, 49160, 350, 49160, 356, 49154, 61, 49153, 357, 358, 49181, 359, 358, 49155, 357, 49153, 358, 49153,
		357, 360, 361, 49153, 357, 49153, 359, 49161, 362, 49157, 359, 49189, 363, 364, 365, 49153, 366, 49154, 365, 366, 365, 49154,
		366, 49153, 367, 49159, 61, 49155, 368, 49187, 369, 49159, 370, 49159, 371, 49153, 370, 372, 373, 49154, 61, 49153, 374,
		49154, 375, 49161, 376, 49154, 61, 49154, 369, 49161, 377, 49181, 378, 49154, 379, 380, 49153, 379, 49153, 381, 49160, 382,
		49206, 61, 49159, 383, 49159, 61, 49154, 54, 384, 49164, 54, 385, 49158, 54, 49155, 386, 54, 49155, 386, 49153, 387, 54,
		49153, 386, 385, 49153, 54, 49157, 61, 49189, 44, 49156, 74, 388, 49200, 48, 49156, 389, 49, 49154, 48, 49156, 389, 49164,
		44, 390, 42, 49154, 44, 42, 49175, 44, 391, 49155, 44, 49160, 392, 393, 49154, 392, 393, 49173, 392, 394, 49155, 57, 49163,
		54, 49174, 57, 49165, 110, 49156, 54, 61, 49153, 57, 49154, 54, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 43,
		40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 49156, 42, 49153, 41, 49153, 44, 40, 44, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 43, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 49159, 59, 49159, 58, 49157,
		59, 49153, 61, 49157, 58, 49153, 61, 49159, 59, 49159, 58, 49159, 59, 49159, 58, 49157, 59, 49153, 61, 49157, 58, 49153,
		61, 49159, 59, 61, 58, 61, 58, 61, 58, 61, 58, 49159, 59, 49159, 58, 49165, 59, 49153, 61, 49159, 65, 49159, 395, 49159,
		65, 49159, 395, 49159, 65, 49159, 395, 49153, 59, 49154, 65, 61, 59, 65, 49155, 58, 395, 60, 59, 49154, 60, 49154, 65, 61,
		59, 65, 49155, 58, 395, 49154, 60, 49155, 59, 49153, 61, 49153, 59, 49155, 58, 61, 49154, 60, 49159, 59, 49156, 58, 49154,
		60, 49153, 61, 49154, 65, 61, 59, 65, 49155, 58, 395, 49153, 60, 61, 49162, 27, 35, 396, 397, 49153, 398, 49157, 399, 400,
		28, 401, 402, 403, 49153, 33, 39, 403, 33, 49155, 28, 404, 49153, 28, 404, 405, 406, 49156, 407, 27, 49153, 28, 49154, 400,
		49155, 28, 33, 39, 28, 49153, 408, 28, 409, 410, 49154, 28, 34, 411, 412, 49154, 408, 49159, 28, 34, 413, 409, 49161, 28,
		27, 35, 49155, 414, 415, 49155, 407, 49157, 35, 36, 393, 49153, 61, 49157, 36, 416, 417, 416, 418, 419, 392, 49161, 36, 416,
		417, 416, 418, 419, 61, 49164, 392, 49154, 61, 49183, 222, 49167, 61, 49164, 420, 49155, 346, 420, 49154, 346, 49153, 420,
		49155, 57, 49156, 420, 57, 49166, 61, 49153, 248, 421, 49155, 248, 421, 49153, 248, 422, 49154, 421, 49153, 422, 49154, 421,
		422, 248, 421, 49153, 248, 423, 49156, 421, 49157, 248, 421, 248, 58, 248, 421, 424, 49153, 40, 49153, 421, 425, 422, 49153,
		421, 40, 421, 422, 49155, 426, 427, 49153, 248, 49153, 422, 49153, 421, 49156, 416, 421, 49153, 422, 49153, 428, 248, 416,
		49153, 248, 42, 248, 49167, 36, 49167, 429, 49167, 430, 49154, 431, 40, 42, 49155, 431, 36, 49153, 248, 49155, 61, 49156,
		34, 49156, 432, 49153, 34, 49155, 432, 34, 49153, 432, 34, 49153, 432, 34, 432, 30, 49156, 432, 34, 30, 49153, 432, 49155,
		30, 49153, 432, 49155, 30, 49169, 432, 49153, 34, 49153, 432, 34, 432, 34, 49158, 432, 30, 432, 49157, 30, 49153, 432, 49165,
		30, 49181, 34, 433, 49388, 34, 49159, 30, 434, 435, 434, 435, 49171, 30, 49153, 34, 49158, 30, 411, 412, 49232, 30, 34, 49181,
		30, 49176, 34, 49153, 432, 30, 432, 49175, 30, 432, 49162, 30, 49157, 34, 432, 49219, 30, 49176, 436, 49162, 30, 49172, 436,
		49211, 36, 49177, 248, 49177, 437, 49177, 438, 49173, 36, 49311, 30, 49153, 432, 49163, 30, 49160, 432, 34, 49155, 30, 49156,
		432, 34, 49155, 30, 49153, 432, 49153, 30, 49153, 432, 49154, 30, 49156, 432, 49165, 30, 432, 30, 432, 49153, 30, 49157,
		432, 49162, 30, 49159, 34, 49156, 30, 49153, 432, 49208, 30, 432, 30, 432, 49180, 30, 49155, 432, 49160, 30, 49153, 432,
		34, 49271, 30, 411, 412, 411, 412, 411, 412, 411, 412, 411, 412, 411, 412, 411, 412, 49181, 36, 49195, 30, 49156, 34, 434,
		435, 49182, 34, 434, 435, 434, 435, 434, 435, 434, 435, 434, 435, 49167, 34, 49279, 439, 49154, 34, 434, 435, 434, 435, 434,
		435, 434, 435, 434, 435, 434, 435, 434, 435, 434, 435, 434, 435, 434, 435, 434, 435, 49214, 34, 434, 435, 434, 435, 49183,
		34, 434, 435, 49153, 34, 49199, 30, 49172, 34, 49153, 30, 49157, 34, 49190, 30, 49153, 436, 49183, 30, 49153, 436, 49185,
		30, 49154, 436, 49163, 30, 436, 49160, 30, 49176, 436, 49155, 30, 49167, 436, 49198, 440, 61, 49198, 441, 61, 40, 42, 49154,
		40, 49153, 42, 40, 42, 40, 42, 40, 42, 49155, 40, 44, 40, 42, 44, 40, 42, 49156, 44, 393, 392, 49153, 40, 69, 70, 69, 70,
		69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69,
		70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70,
		69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 69,
		70, 69, 70, 442, 49157, 443, 69, 70, 69, 70, 49154, 444, 69, 70, 49156, 61, 49155, 445, 446, 49153, 445, 49189, 447, 61,
		447, 49156, 61, 447, 49153, 61, 49207, 448, 49158, 61, 449, 450, 49165, 61, 451, 49174, 265, 49160, 61, 49158, 265, 61, 49158,
		265, 61, 49158, 265, 61, 49158, 265, 61, 49158, 265, 61, 49158, 265, 61, 49158, 265, 61, 49158, 265, 61, 49183, 452, 49153,
		28, 453, 454, 453, 454, 49154, 28, 453, 454, 28, 453, 454, 49160, 28, 399, 49153, 28, 399, 28, 453, 454, 49153, 28, 453,
		454, 411, 412, 411, 412, 411, 412, 411, 412, 49155, 28, 408, 455, 49161, 28, 49153, 399, 408, 49154, 28, 399, 456, 403, 49158,
		28, 49205, 436, 49177, 457, 61, 49240, 457, 49163, 61, 49365, 457, 49177, 61, 49153, 458, 49153, 248, 49159, 458, 49155,
		61, 27, 456, 408, 28, 248, 459, 460, 461, 411, 412, 411, 412, 403, 462, 403, 462, 411, 412, 49153, 30, 411, 412, 411, 412,
		411, 412, 411, 412, 399, 403, 49153, 462, 30, 49160, 461, 49155, 54, 49153, 463, 399, 49156, 108, 49153, 248, 49154, 461,
		464, 386, 261, 49153, 248, 61, 49237, 465, 49153, 61, 49153, 54, 49153, 466, 49153, 467, 465, 468, 49241, 469, 261, 52, 49153,
		470, 469, 49156, 61, 49193, 471, 49153, 61, 49202, 263, 264, 49193, 263, 61, 49153, 248, 49155, 36, 49161, 248, 49178, 471,
		49156, 61, 49187, 248, 49163, 61, 49167, 469, 49182, 472, 61, 49161, 36, 49181, 248, 49159, 36, 248, 49166, 36, 49182, 472,
		248, 49161, 36, 49190, 248, 49166, 36, 49167, 248, 49198, 473, 61, 49239, 473, 49319, 248, 49333, 474, 49161, 61, 49215,
		248, 49258, 474, 49172, 61, 49172, 475, 476, 49398, 475, 49154, 61, 49206, 477, 49160, 61, 49191, 478, 49157, 479, 480, 481,
		49291, 482, 483, 484, 49153, 485, 49167, 482, 49161, 486, 49153, 482, 49171, 61, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76,
		75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75,
		76, 75, 76, 75, 76, 487, 79, 49154, 80, 488, 49159, 452, 49153, 79, 488, 489, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75,
		76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 49153, 490, 49153, 452, 49221, 491, 49161, 492, 49153,
		493, 494, 495, 49154, 496, 495, 49159, 61, 49174, 497, 49160, 50, 49153, 31, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 49153, 44, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40,
		42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		40, 42, 40, 42, 40, 42, 392, 49159, 44, 40, 42, 40, 42, 49153, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 50, 49153, 497, 40,
		42, 40, 44, 45, 40, 42, 40, 42, 49153, 44, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42, 40, 42,
		49156, 40, 61, 49156, 40, 42, 40, 42, 49214, 61, 45, 49153, 48, 44, 49156, 45, 49153, 498, 499, 49154, 498, 499, 49155, 498,
		499, 49174, 498, 49153, 500, 49153, 501, 500, 49155, 502, 49155, 61, 49157, 36, 49153, 248, 222, 248, 49157, 61, 49203, 503,
		49153, 504, 49153, 505, 49159, 61, 49153, 506, 49201, 507, 49167, 506, 508, 509, 49159, 61, 49153, 510, 49161, 511, 49157,
		61, 49169, 148, 49157, 147, 49154, 150, 147, 150, 147, 49153, 61, 49161, 512, 49179, 513, 49156, 514, 49154, 515, 384, 516,
		49174, 517, 49162, 518, 519, 520, 49162, 61, 521, 49180, 263, 49154, 61, 49154, 522, 523, 49198, 524, 525, 49153, 523, 49155,
		522, 49153, 523, 522, 49154, 523, 526, 49157, 527, 528, 49153, 529, 49155, 527, 61, 108, 49161, 530, 49155, 61, 49153, 527,
		49156, 249, 252, 531, 49160, 249, 49161, 253, 49156, 249, 61, 49192, 532, 49157, 533, 49153, 534, 49153, 533, 49153, 534,
		49153, 533, 49160, 61, 49154, 532, 533, 49159, 532, 533, 534, 49153, 61, 49161, 535, 49153, 61, 536, 49154, 537, 49167, 249,
		531, 49157, 249, 49154, 258, 249, 257, 252, 257, 49153, 249, 49199, 538, 539, 538, 49154, 539, 49153, 540, 49153, 539, 540,
		538, 49153, 540, 538, 539, 541, 542, 541, 542, 49175, 61, 49153, 538, 543, 544, 545, 49162, 546, 547, 49153, 548, 49153,
		547, 49153, 549, 546, 49153, 550, 547, 551, 49161, 61, 49157, 265, 49153, 61, 49157, 265, 49153, 61, 49157, 265, 49160, 61,
		49158, 265, 61, 49158, 265, 61, 49186, 44, 42, 49158, 44, 31, 49155, 48, 49156, 44, 74, 49161, 61, 49231, 275, 49186, 546,
		49153, 547, 548, 49153, 547, 548, 49153, 547, 549, 552, 551, 49153, 61, 49161, 553, 49157, 61, 49187, 263, 49163, 61, 49174,
		263, 49155, 61, 49200, 263, 49155, 61, 49279, 554, 49279, 555, 49293, 556, 49153, 474, 556, 474, 556, 49153, 474, 49161,
		556, 474, 556, 474, 556, 49153, 474, 49153, 556, 49154, 474, 49219, 556, 49153, 61, 49257, 556, 49189, 61, 49158, 41, 49163,
		61, 49156, 85, 49156, 61, 97, 92, 49161, 97, 557, 49164, 97, 61, 49156, 97, 61, 97, 61, 49153, 97, 61, 49153, 97, 61, 49161,
		97, 49249, 107, 49167, 558, 49168, 61, 49290, 107, 49157, 559, 49369, 107, 412, 411, 49167, 61, 49215, 107, 49153, 61, 49205,
		107, 49159, 61, 49183, 560, 49161, 107, 49153, 559, 103, 104, 49153, 61, 49167, 561, 49154, 261, 562, 49154, 261, 563, 564,
		261, 49157, 61, 49165, 54, 49153, 79, 261, 49153, 468, 49153, 409, 563, 564, 563, 564, 563, 564, 563, 564, 563, 564, 563,
		564, 565, 566, 565, 566, 49153, 28, 563, 564, 49155, 261, 49154, 409, 49153, 63, 567, 61, 63, 568, 49153, 86, 468, 563, 564,
		563, 564, 563, 564, 49153, 261, 569, 416, 570, 49154, 416, 61, 569, 222, 49153, 261, 49155, 61, 559, 107, 559, 107, 559,
		61, 559, 107, 559, 107, 559, 107, 559, 107, 559, 49277, 107, 49153, 61, 35, 61, 86, 571, 261, 222, 49153, 261, 572, 563,
		564, 261, 416, 63, 468, 567, 261, 49161, 573, 568, 63, 49154, 416, 86, 261, 49157, 574, 49171, 40, 563, 569, 564, 575, 409,
		31, 49157, 576, 49171, 42, 563, 416, 564, 416, 563, 564, 86, 565, 566, 63, 261, 49161, 469, 52, 49196, 469, 49153, 577, 264,
		49181, 263, 49154, 61, 49157, 263, 49153, 61, 49157, 263, 49153, 61, 49157, 263, 49153, 61, 49154, 263, 49154, 61, 49153,
		222, 416, 31, 248, 49153, 222, 61, 248, 49155, 416, 49153, 248, 61, 49160, 415, 49154, 578, 49153, 248, 49153, 560, 49163,
		579, 61, 49177, 579, 61, 49170, 579, 61, 49153, 579, 61, 49166, 579, 49153, 61, 49165, 579, 49185, 61, 49274, 579, 49156,
		61, 49154, 261, 49155, 61, 49196, 36, 49154, 61, 49160, 248, 49204, 580, 49155, 581, 49168, 582, 49153, 581, 49154, 582,
		61, 49163, 248, 49155, 61, 582, 49198, 61, 49196, 248, 57, 49281, 61, 49180, 583, 49154, 61, 49200, 584, 49166, 61, 54, 49178,
		36, 49155, 61, 49183, 585, 49155, 586, 49160, 61, 49154, 585, 49168, 587, 588, 49159, 587, 588, 49156, 61, 49189, 589, 49156,
		590, 49156, 61, 49181, 591, 61, 592, 49187, 593, 49155, 61, 49159, 593, 594, 49156, 595, 49193, 61, 49191, 596, 49191, 597,
		49199, 598, 49181, 599, 49153, 61, 49161, 600, 49157, 61, 49187, 601, 49155, 61, 49187, 602, 49155, 61, 49191, 603, 49159,
		61, 49203, 604, 49162, 61, 605, 49167, 61, 49334, 606, 49160, 61, 49173, 606, 49161, 61, 49159, 606, 49175, 61, 49157, 607,
		49153, 61, 607, 61, 49195, 607, 61, 49153, 607, 49154, 61, 607, 49153, 61, 607, 49173, 608, 61, 609, 49159, 610, 49174, 611,
		49153, 612, 49158, 613, 49182, 614, 49159, 61, 49160, 615, 49199, 61, 49170, 616, 61, 49153, 616, 49156, 61, 49156, 617,
		49173, 618, 49157, 619, 49154, 61, 620, 49177, 621, 49156, 61, 622, 49215, 61, 49183, 623, 49175, 624, 49155, 61, 49153,
		625, 49153, 624, 49167, 625, 49153, 61, 49197, 625, 626, 49154, 627, 61, 49153, 627, 49156, 61, 49155, 627, 49155, 626, 61,
		49154, 626, 61, 49178, 626, 49155, 61, 49154, 628, 49155, 61, 628, 49159, 629, 49159, 61, 49157, 630, 49153, 631, 630, 49158,
		61, 49180, 632, 49153, 633, 634, 49180, 635, 49154, 636, 49183, 61, 49159, 637, 638, 49179, 637, 49153, 639, 49155, 61, 49156,
		640, 49157, 641, 642, 49160, 61, 49205, 643, 49154, 61, 644, 49157, 645, 49173, 646, 49153, 61, 49159, 647, 49170, 648, 49156,
		61, 49159, 649, 49169, 650, 49158, 61, 49155, 651, 49163, 61, 49158, 652, 49231, 61, 49224, 653, 49206, 61, 49202, 654, 49164,
		61, 49202, 655, 49158, 61, 49157, 656, 49247, 61, 49182, 657, 61, 658, 659, 658, 49204, 660, 49165, 659, 661, 49153, 662,
		49156, 663, 49155, 61, 49171, 664, 49161, 665, 49166, 61, 661, 49153, 666, 667, 49196, 668, 49154, 667, 49155, 669, 49153,
		667, 49153, 670, 49153, 671, 672, 49155, 673, 49165, 61, 49176, 674, 49158, 61, 49161, 675, 49157, 61, 49154, 676, 49187,
		677, 49156, 676, 678, 49157, 676, 49153, 679, 61, 49161, 680, 681, 49154, 682, 49163, 61, 49186, 683, 684, 49153, 685, 683,
		49160, 61, 49153, 686, 687, 49199, 688, 49154, 687, 49160, 686, 687, 689, 49155, 688, 49153, 690, 49154, 691, 49154, 692,
		690, 49153, 61, 49161, 693, 688, 691, 688, 691, 49153, 690, 61, 49171, 694, 49162, 61, 49169, 695, 61, 49176, 695, 49154,
		696, 49154, 697, 49153, 696, 697, 698, 699, 697, 49153, 700, 701, 49153, 700, 702, 697, 49216, 61, 49158, 703, 61, 703, 61,
		49155, 703, 61, 49166, 703, 61, 49161, 703, 704, 49157, 61, 49198, 705, 706, 49154, 707, 49157, 706, 49153, 708, 49156, 61,
		49161, 709, 49157, 61, 49153, 710, 49153, 711, 61, 49159, 712, 49153, 61, 49153, 712, 49153, 61, 49173, 712, 61, 49158, 712,
		61, 49153, 712, 61, 49156, 712, 49153, 61, 713, 712, 714, 711, 710, 49155, 711, 49153, 61, 49153, 711, 49153, 61, 49153,
		711, 715, 49153, 61, 712, 49157, 61, 714, 49156, 61, 716, 49155, 712, 49153, 711, 49153, 61, 49158, 713, 49154, 61, 49156,
		713, 49162, 61, 49204, 717, 49154, 718, 49159, 719, 49153, 718, 720, 49153, 719, 718, 720, 49155, 717, 49153, 721, 722, 49153,
		723, 49161, 724, 61, 722, 61, 723, 49185, 61, 49199, 725, 726, 49153, 727, 49157, 728, 727, 728, 49153, 727, 726, 727, 49153,
		728, 727, 49153, 729, 49153, 725, 730, 725, 49159, 61, 49161, 731, 49189, 61, 49198, 732, 733, 49153, 734, 49155, 735, 49153,
		61, 49155, 734, 49153, 735, 734, 49153, 736, 737, 49153, 738, 49153, 739, 49154, 740, 49166, 738, 49155, 732, 49153, 735,
		49185, 61, 49199, 741, 49154, 742, 49159, 743, 49153, 742, 743, 742, 744, 743, 49153, 745, 746, 741, 49162, 61, 49161, 747,
		49157, 61, 49164, 307, 49170, 61, 49194, 748, 749, 750, 749, 49153, 750, 49157, 749, 751, 752, 49159, 61, 49161, 753, 49205,
		61, 49177, 754, 49154, 61, 49154, 755, 49153, 756, 49155, 755, 756, 49155, 755, 757, 49155, 61, 49161, 758, 49153, 759, 49154,
		760, 761, 49247, 61, 49183, 762, 49183, 763, 49161, 764, 49160, 765, 49163, 61, 766, 767, 49157, 768, 49153, 769, 49153,
		768, 49191, 767, 770, 771, 49155, 768, 769, 767, 49155, 768, 49154, 772, 49153, 773, 49154, 772, 771, 49159, 61, 774, 49157,
		775, 49153, 776, 49154, 775, 49191, 774, 49153, 61, 49155, 774, 49164, 775, 776, 777, 778, 779, 49153, 780, 61, 49154, 779,
		49153, 781, 49180, 61, 49208, 782, 49158, 61, 49160, 783, 61, 49188, 783, 784, 49158, 785, 61, 49157, 785, 784, 786, 783,
		49153, 787, 788, 49153, 789, 49161, 61, 49161, 790, 49170, 791, 49154, 61, 792, 793, 49181, 794, 49153, 61, 49173, 795, 61,
		796, 49158, 795, 796, 49153, 795, 796, 49153, 795, 49224, 61, 49158, 797, 61, 49153, 797, 61, 49189, 797, 49157, 798, 49154,
		61, 798, 61, 49153, 798, 61, 49154, 798, 799, 798, 49153, 799, 797, 798, 49159, 61, 49161, 800, 49189, 61, 49305, 801, 49253,
		61, 49262, 802, 61, 49156, 803, 49162, 61, 49219, 801, 49211, 61, 49326, 804, 49232, 61, 49350, 805, 49208, 61, 49336, 491,
		49158, 61, 49182, 806, 61, 49161, 807, 49155, 61, 49153, 808, 49247, 61, 49181, 809, 49153, 61, 49156, 810, 811, 49161, 61,
		49199, 812, 49158, 813, 49153, 814, 815, 49153, 816, 49155, 817, 49153, 818, 49153, 819, 814, 817, 49161, 61, 49161, 820,
		61, 49158, 821, 61, 49172, 812, 49156, 61, 49170, 812, 49263, 61, 49220, 822, 49162, 61, 822, 49197, 823, 49167, 61, 49155,
		824, 49164, 825, 49215, 61, 826, 827, 49181, 61, 49388, 828, 49170, 61, 49266, 828, 49164, 61, 469, 49437, 465, 49232, 61,
		49419, 829, 49155, 61, 49258, 830, 49156, 61, 49164, 830, 49154, 61, 49160, 830, 49158, 61, 49161, 830, 49153, 61, 831, 832,
		833, 834, 49155, 35, 49243, 61, 49269, 248, 49161, 61, 49190, 248, 49153, 61, 49211, 248, 835, 836, 49154, 54, 49154, 248,
		385, 49156, 837, 49159, 35, 49159, 54, 49153, 248, 49158, 54, 49181, 248, 49155, 54, 49210, 248, 49174, 61, 49217, 582, 49154,
		838, 582, 49209, 61, 49238, 248, 49160, 61, 49169, 36, 49165, 61, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 49177,
		421, 49158, 422, 61, 49153, 428, 49167, 422, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 421, 61, 49153, 421, 49153,
		61, 421, 49153, 61, 49153, 421, 49153, 61, 49155, 421, 61, 49159, 421, 49155, 422, 61, 422, 61, 422, 49153, 428, 49155, 422,
		61, 49162, 422, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 49153, 421, 61, 49155, 421, 49153, 61, 49159, 421, 61, 49158,
		421, 61, 49159, 422, 49153, 428, 49167, 422, 49153, 421, 61, 49155, 421, 61, 49156, 421, 61, 421, 49154, 61, 49158, 421,
		61, 49159, 422, 49153, 428, 49167, 422, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 49177, 421, 49159, 422, 49153, 428,
		49167, 422, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 49177, 421, 49159, 422, 49153, 428, 49167, 422, 49177, 421, 49159,
		422, 49153, 428, 49167, 422, 49177, 421, 49159, 422, 49153, 428, 49169, 422, 49153, 61, 49176, 421, 416, 49176, 422, 416,
		49157, 422, 49176, 421, 416, 49176, 422, 416, 49157, 422, 49176, 421, 416, 49176, 422, 416, 49157, 422, 49176, 421, 416,
		49176, 422, 416, 49157, 422, 49176, 421, 416, 49176, 422, 416, 49157, 422, 421, 422, 49153, 61, 49201, 839, 49279, 840, 49206,
		841, 49155, 840, 49201, 841, 49159, 840, 841, 49165, 840, 841, 49153, 840, 842, 843, 49153, 842, 844, 49166, 61, 49156, 841,
		61, 49166, 841, 49231, 61, 49158, 845, 61, 49168, 845, 49153, 61, 49158, 845, 61, 49153, 845, 61, 49156, 845, 49236, 61,
		49348, 846, 49153, 61, 49160, 847, 49158, 848, 49192, 61, 49185, 849, 49185, 850, 49154, 851, 852, 49154, 853, 49156, 61,
		49161, 854, 49155, 61, 49153, 855, 49183, 61, 49155, 856, 61, 49178, 856, 61, 49153, 856, 61, 856, 49153, 61, 856, 61, 49161,
		856, 61, 49155, 856, 61, 856, 61, 856, 49157, 61, 856, 49155, 61, 856, 61, 856, 61, 856, 61, 49154, 856, 61, 49153, 856,
		61, 856, 49153, 61, 856, 61, 856, 61, 856, 61, 856, 61, 856, 61, 49153, 856, 61, 856, 49153, 61, 49155, 856, 61, 49158, 856,
		61, 49155, 856, 61, 49155, 856, 61, 856, 61, 49161, 856, 61, 49168, 856, 49156, 61, 49154, 856, 61, 49156, 856, 61, 49168,
		856, 49203, 61, 49153, 101, 49165, 61, 49195, 248, 49155, 61, 49251, 248, 49163, 61, 49166, 248, 49153, 61, 49166, 248, 61,
		49166, 248, 61, 49188, 248, 49161, 61, 49164, 36, 49154, 61, 49182, 248, 61, 49177, 857, 49157, 248, 49177, 857, 49153, 248,
		49155, 61, 49177, 857, 49186, 248, 49208, 61, 49177, 858, 859, 49153, 248, 49164, 61, 49195, 248, 49155, 61, 49160, 248,
		49158, 61, 49153, 248, 49165, 61, 49157, 248, 49177, 61, 49274, 248, 49156, 497, 49236, 248, 49162, 61, 49164, 248, 49154,
		61, 49160, 248, 49158, 61, 49267, 248, 49163, 61, 49236, 248, 49194, 61, 49163, 248, 49155, 61, 49207, 248, 49159, 61, 49161,
		248, 49157, 61, 49191, 248, 49159, 61, 49181, 248, 49233, 61, 49163, 248, 49155, 61, 49198, 248, 61, 49164, 248, 49154, 61,
		49179, 248, 49171, 61, 49175, 248, 49191, 61, 248, 49166, 61, 49174, 248, 49302, 61, 49153, 560, 49238, 474, 49192, 61, 49204,
		474, 49162, 61, 49245, 474, 49153, 61, 49281, 474, 49165, 61, 49328, 474, 49182, 61, 49181, 556, 49249, 61, 415, 35, 49181,
		415, 49247, 860, 49279, 415, 49391, 561, 49167, 415, 49277, 555, 49153, 560
	};

	static constexpr std::array<std::uint_least8_t, 3444> flyweights =
	{
		0, 0, 25, 1, 1, 1, 25, 1, 1, 2, 25, 1, 2, 3, 24, 1, 3, 4, 16, 1, 4, 4, 16, 1, 5, 4, 16, 1, 5, 5, 18, 1, 6, 4, 16, 1, 5, 4,
		17, 1, 5, 4, 13, 1, 7, 5, 20, 1, 8, 4, 16, 1, 9, 4, 12, 1, 10, 4, 16, 1, 11, 6, 8, 1, 12, 4, 16, 1, 13, 7, 4, 34, 14, 8,
		4, 34, 15, 5, 19, 1, 16, 9, 11, 1, 17, 5, 19, 1, 18, 10, 0, 34, 19, 11, 0, 34, 20, 11, 0, 34, 21, 0, 25, 1, 22, 2, 25, 1,
		23, 3, 24, 1, 24, 4, 16, 1, 24, 5, 18, 1, 24, 5, 21, 1, 25, 5, 19, 1, 26, 11, 2, 34, 27, 4, 15, 1, 28, 5, 20, 1, 29, 5, 26,
		1, 30, 5, 10, 1, 31, 11, 0, 1, 32, 4, 16, 1, 27, 4, 14, 1, 33, 8, 4, 34, 31, 11, 0, 34, 34, 11, 0, 34, 35, 11, 0, 34, 36,
		11, 0, 34, 37, 12, 2, 34, 38, 8, 4, 34, 39, 12, 3, 34, 40, 11, 1, 34, 41, 11, 1, 34, 42, 12, 1, 1, 40, 11, 1, 1, 43, 12,
		1, 1, 25, 5, 19, 6, 44, 13, 7, 2, 45, 11, 7, 2, 46, 13, 7, 2, 47, 13, 7, 2, 33, 8, 4, 21, 34, 11, 0, 21, 25, 5, 19, 21, 48,
		14, 27, 0, 49, 11, 1, 21, 50, 4, 16, 1, 51, 4, 16, 1, 31, 11, 0, 21, 52, 11, 0, 21, 53, 8, 4, 21, 54, 8, 4, 21, 33, 8, 4,
		12, 34, 11, 0, 12, 35, 11, 0, 21, 55, 8, 4, 21, 56, 5, 20, 21, 36, 11, 0, 21, 33, 8, 4, 14, 34, 11, 0, 14, 35, 11, 0, 14,
		30, 5, 21, 14, 44, 13, 7, 14, 57, 13, 6, 14, 33, 8, 4, 4, 42, 12, 1, 4, 30, 4, 16, 4, 34, 11, 0, 4, 31, 11, 0, 4, 58, 4,
		16, 1, 59, 4, 12, 4, 30, 5, 21, 4, 30, 5, 18, 4, 44, 13, 7, 27, 47, 13, 7, 27, 60, 12, 7, 27, 59, 4, 12, 27, 30, 4, 16, 27,
		50, 4, 16, 27, 61, 12, 7, 27, 37, 12, 2, 27, 62, 4, 16, 27, 63, 5, 26, 3, 63, 5, 26, 1, 56, 5, 20, 3, 30, 4, 16, 3, 30, 5,
		18, 3, 30, 5, 21, 3, 61, 12, 7, 3, 64, 5, 26, 3, 37, 12, 2, 3, 65, 12, 1, 1, 60, 12, 7, 2, 61, 12, 7, 2, 60, 12, 7, 3, 44,
		13, 7, 3, 66, 6, 8, 3, 58, 4, 16, 3, 42, 12, 1, 3, 58, 4, 16, 50, 50, 4, 16, 50, 30, 4, 16, 50, 63, 5, 26, 50, 37, 12, 2,
		50, 61, 12, 7, 50, 60, 12, 7, 50, 44, 13, 7, 50, 37, 12, 2, 56, 60, 12, 7, 56, 66, 6, 8, 64, 37, 12, 2, 64, 44, 13, 7, 64,
		42, 12, 1, 64, 30, 5, 21, 64, 30, 4, 16, 64, 50, 4, 16, 64, 58, 4, 16, 64, 65, 12, 1, 64, 37, 12, 2, 90, 61, 12, 7, 90, 44,
		13, 7, 90, 67, 12, 1, 90, 47, 13, 7, 90, 50, 4, 16, 90, 37, 12, 2, 95, 47, 13, 7, 95, 50, 4, 16, 95, 47, 13, 7, 3, 61, 12,
		7, 16, 68, 12, 5, 16, 37, 12, 2, 16, 44, 13, 7, 16, 66, 6, 8, 16, 30, 4, 16, 16, 42, 12, 1, 16, 37, 12, 2, 5, 61, 12, 7,
		5, 68, 12, 5, 5, 44, 13, 7, 5, 69, 12, 5, 5, 66, 6, 8, 5, 30, 5, 18, 5, 30, 5, 10, 5, 30, 5, 21, 5, 30, 4, 16, 5, 61, 12,
		7, 23, 68, 12, 5, 23, 37, 12, 2, 23, 44, 13, 7, 23, 66, 6, 8, 23, 61, 12, 7, 22, 68, 12, 5, 22, 37, 12, 2, 22, 44, 13, 7,
		22, 66, 6, 8, 22, 30, 4, 16, 22, 30, 5, 18, 22, 61, 12, 7, 44, 68, 12, 5, 44, 37, 12, 2, 44, 44, 13, 7, 44, 69, 12, 5, 44,
		66, 6, 8, 44, 30, 5, 21, 44, 30, 5, 10, 44, 61, 12, 7, 54, 37, 12, 2, 54, 69, 12, 5, 54, 68, 12, 5, 54, 44, 13, 7, 54, 66,
		6, 8, 54, 30, 5, 10, 54, 30, 5, 21, 54, 30, 5, 18, 54, 61, 12, 7, 55, 68, 12, 5, 55, 37, 12, 2, 55, 44, 13, 7, 55, 66, 6,
		8, 55, 30, 5, 10, 55, 30, 5, 21, 55, 37, 12, 2, 29, 61, 12, 7, 29, 68, 12, 5, 29, 44, 13, 7, 29, 69, 12, 5, 29, 66, 6, 8,
		29, 61, 12, 7, 37, 68, 12, 5, 37, 37, 12, 2, 37, 44, 13, 7, 37, 69, 12, 5, 37, 30, 5, 21, 37, 30, 5, 10, 37, 66, 6, 8, 37,
		68, 12, 5, 48, 37, 12, 2, 48, 44, 13, 7, 48, 69, 12, 5, 48, 61, 12, 7, 48, 66, 6, 8, 48, 30, 4, 16, 48, 37, 12, 2, 57, 61,
		12, 7, 57, 70, 12, 2, 57, 30, 5, 18, 1, 71, 12, 2, 57, 65, 12, 1, 57, 44, 13, 7, 57, 30, 4, 16, 57, 66, 6, 8, 57, 50, 4,
		16, 57, 37, 12, 2, 33, 61, 12, 7, 33, 70, 12, 2, 33, 71, 12, 2, 33, 65, 12, 1, 33, 44, 13, 7, 33, 66, 6, 8, 33, 37, 12, 2,
		58, 30, 5, 21, 58, 30, 4, 16, 58, 50, 4, 16, 58, 44, 13, 7, 58, 66, 6, 8, 58, 30, 5, 10, 58, 30, 4, 17, 58, 30, 4, 13, 58,
		72, 13, 5, 58, 61, 12, 7, 58, 68, 12, 5, 58, 30, 5, 21, 1, 37, 12, 2, 39, 68, 12, 5, 39, 61, 12, 7, 39, 44, 13, 7, 39, 66,
		6, 8, 39, 58, 4, 16, 39, 30, 4, 16, 39, 66, 13, 5, 39, 72, 13, 5, 39, 30, 5, 21, 39, 33, 8, 4, 18, 37, 12, 2, 18, 30, 4,
		16, 1, 67, 12, 1, 18, 37, 12, 2, 25, 73, 12, 2, 25, 37, 12, 2, 17, 47, 13, 7, 17, 61, 12, 7, 17, 30, 4, 16, 17, 50, 4, 16,
		17, 58, 4, 16, 17, 74, 5, 10, 17, 30, 5, 10, 17, 30, 5, 21, 17, 75, 8, 4, 11, 31, 11, 0, 11, 59, 4, 12, 10, 37, 12, 2, 10,
		50, 4, 16, 10, 58, 4, 16, 10, 23, 3, 24, 41, 37, 12, 2, 41, 30, 4, 17, 41, 30, 4, 13, 41, 37, 12, 2, 46, 37, 12, 9, 46, 37,
		12, 2, 51, 61, 12, 7, 51, 47, 13, 7, 51, 37, 12, 2, 26, 61, 12, 7, 26, 47, 13, 7, 26, 37, 12, 2, 9, 61, 12, 7, 9, 37, 12,
		2, 52, 61, 12, 7, 52, 37, 12, 2, 32, 46, 13, 7, 32, 68, 12, 5, 32, 61, 12, 7, 32, 44, 13, 7, 32, 50, 4, 16, 32, 67, 12, 1,
		32, 30, 4, 16, 32, 30, 5, 18, 32, 66, 6, 8, 32, 30, 5, 10, 32, 30, 4, 16, 38, 50, 4, 16, 38, 59, 4, 12, 38, 58, 4, 16, 38,
		76, 4, 16, 38, 77, 13, 7, 38, 29, 5, 26, 38, 66, 6, 8, 38, 37, 12, 2, 38, 65, 12, 1, 38, 78, 12, 7, 38, 61, 12, 7, 38, 37,
		12, 2, 35, 61, 12, 7, 35, 68, 12, 5, 35, 44, 13, 7, 35, 30, 5, 21, 35, 58, 4, 16, 35, 66, 6, 8, 35, 37, 12, 2, 53, 37, 12,
		2, 40, 71, 12, 2, 40, 66, 6, 8, 40, 74, 5, 10, 40, 30, 5, 21, 40, 30, 5, 21, 32, 37, 12, 2, 8, 61, 12, 7, 8, 68, 12, 5, 8,
		30, 4, 16, 8, 37, 12, 2, 91, 68, 12, 5, 91, 61, 12, 7, 91, 47, 13, 7, 91, 44, 13, 7, 91, 66, 6, 8, 91, 30, 4, 16, 91, 65,
		12, 1, 91, 58, 4, 16, 91, 57, 13, 6, 2, 61, 12, 7, 62, 68, 12, 5, 62, 37, 12, 2, 62, 44, 13, 7, 62, 72, 13, 5, 62, 66, 6,
		8, 62, 58, 4, 16, 62, 30, 4, 16, 62, 50, 4, 16, 62, 30, 5, 21, 62, 61, 12, 7, 76, 68, 12, 5, 76, 37, 12, 2, 76, 72, 13, 5,
		76, 44, 13, 7, 76, 66, 6, 8, 76, 37, 12, 2, 93, 47, 13, 7, 93, 68, 12, 5, 93, 61, 12, 7, 93, 66, 13, 5, 93, 30, 4, 16, 93,
		37, 12, 2, 70, 68, 12, 5, 70, 61, 12, 7, 70, 79, 13, 7, 70, 44, 13, 7, 70, 58, 4, 16, 70, 50, 4, 16, 70, 66, 6, 8, 70, 66,
		6, 8, 73, 37, 12, 2, 73, 42, 12, 1, 73, 43, 12, 1, 73, 58, 4, 16, 73, 31, 11, 0, 14, 30, 4, 16, 76, 80, 4, 16, 1, 72, 13,
		5, 1, 37, 12, 2, 1, 68, 12, 5, 1, 36, 11, 0, 14, 40, 11, 1, 21, 81, 11, 1, 14, 82, 11, 0, 34, 81, 11, 1, 34, 83, 11, 1, 34,
		81, 11, 1, 21, 39, 12, 3, 21, 84, 13, 26, 2, 85, 13, 26, 2, 86, 5, 26, 1, 87, 4, 12, 1, 88, 4, 16, 1, 89, 4, 15, 1, 89, 4,
		14, 1, 27, 4, 17, 1, 90, 4, 16, 1, 22, 15, 22, 1, 22, 15, 23, 1, 64, 5, 26, 1, 91, 4, 16, 1, 66, 9, 11, 1, 92, 9, 11, 1,
		24, 4, 17, 1, 24, 4, 13, 1, 87, 4, 16, 1, 93, 5, 26, 1, 94, 14, 27, 0, 56, 5, 20, 1, 95, 5, 20, 1, 96, 4, 17, 1, 96, 4, 13,
		1, 97, 13, 7, 2, 53, 8, 4, 1, 98, 11, 0, 1, 99, 5, 20, 1, 96, 5, 21, 1, 100, 5, 21, 1, 101, 12, 2, 1, 36, 11, 0, 1, 102,
		11, 0, 1, 103, 8, 9, 34, 104, 11, 9, 34, 37, 12, 9, 34, 88, 5, 21, 1, 105, 5, 20, 1, 88, 4, 17, 1, 88, 4, 13, 1, 106, 14,
		27, 0, 107, 8, 21, 1, 108, 11, 21, 1, 24, 5, 21, 7, 33, 8, 4, 19, 34, 11, 0, 19, 36, 11, 0, 12, 30, 5, 21, 12, 44, 13, 7,
		12, 30, 4, 16, 12, 30, 5, 10, 12, 34, 11, 0, 18, 37, 12, 2, 59, 67, 12, 1, 59, 30, 4, 16, 59, 47, 13, 7, 59, 61, 12, 7, 14,
		24, 4, 15, 1, 24, 4, 14, 1, 109, 12, 1, 1, 110, 4, 16, 1, 111, 5, 21, 24, 112, 5, 21, 1, 65, 12, 1, 24, 113, 12, 2, 1, 113,
		12, 9, 24, 27, 4, 13, 1, 114, 13, 5, 25, 67, 12, 1, 24, 37, 12, 2, 28, 115, 5, 19, 1, 65, 12, 1, 28, 59, 4, 12, 1, 37, 12,
		2, 30, 65, 12, 1, 30, 37, 12, 2, 6, 30, 5, 21, 25, 30, 5, 21, 30, 116, 12, 2, 24, 37, 12, 2, 61, 65, 12, 1, 61, 30, 5, 21,
		61, 37, 12, 2, 86, 67, 12, 1, 86, 50, 4, 16, 86, 58, 4, 16, 86, 37, 12, 2, 77, 65, 12, 1, 77, 50, 4, 16, 77, 58, 4, 16, 77,
		66, 6, 8, 77, 37, 12, 2, 14, 30, 4, 16, 14, 42, 12, 1, 14, 40, 11, 1, 14, 37, 12, 2, 79, 37, 12, 9, 79, 44, 13, 7, 79, 30,
		4, 16, 79, 58, 4, 16, 79, 50, 4, 16, 79, 62, 5, 19, 1, 37, 12, 2, 49, 47, 13, 7, 49, 68, 12, 5, 49, 61, 12, 7, 49, 30, 5,
		21, 49, 37, 12, 2, 65, 30, 4, 16, 65, 58, 4, 16, 65, 68, 12, 5, 75, 37, 12, 2, 75, 44, 13, 7, 75, 61, 12, 7, 75, 58, 4, 16,
		75, 66, 6, 8, 75, 66, 6, 8, 69, 37, 12, 2, 69, 61, 12, 7, 69, 44, 13, 7, 69, 58, 4, 16, 69, 37, 12, 2, 74, 61, 12, 7, 74,
		68, 12, 5, 74, 72, 13, 5, 74, 30, 4, 16, 74, 61, 12, 7, 84, 68, 12, 5, 84, 37, 12, 2, 84, 44, 13, 7, 84, 72, 13, 5, 84, 30,
		4, 16, 84, 50, 4, 16, 84, 58, 4, 16, 84, 66, 6, 8, 84, 65, 12, 1, 39, 37, 12, 2, 68, 61, 12, 7, 68, 68, 12, 5, 68, 66, 6,
		8, 68, 30, 4, 16, 68, 58, 4, 16, 68, 37, 12, 2, 92, 61, 12, 7, 92, 71, 12, 2, 92, 44, 13, 7, 92, 117, 12, 2, 92, 65, 12,
		1, 92, 30, 4, 16, 92, 50, 4, 16, 92, 37, 12, 2, 87, 68, 12, 5, 87, 61, 12, 7, 87, 58, 4, 16, 87, 65, 12, 1, 87, 44, 13, 7,
		87, 72, 13, 5, 87, 66, 6, 8, 87, 21, 14, 29, 0, 21, 5, 28, 0, 113, 12, 2, 24, 56, 5, 20, 27, 62, 5, 19, 3, 118, 12, 2, 3,
		119, 14, 27, 0, 77, 13, 7, 2, 62, 4, 16, 1, 30, 4, 17, 1, 30, 4, 13, 1, 120, 4, 17, 1, 120, 4, 13, 1, 121, 4, 16, 1, 122,
		4, 16, 1, 96, 4, 16, 1, 123, 4, 12, 1, 120, 4, 16, 1, 124, 4, 16, 1, 125, 6, 8, 1, 126, 7, 4, 34, 127, 5, 19, 1, 128, 10,
		0, 34, 129, 12, 1, 1, 130, 5, 26, 1, 37, 12, 2, 36, 37, 12, 9, 21, 30, 5, 10, 21, 30, 5, 21, 21, 37, 12, 2, 71, 37, 12, 2,
		67, 37, 12, 2, 42, 30, 5, 10, 42, 37, 12, 2, 20, 37, 12, 9, 20, 37, 12, 2, 118, 61, 12, 7, 118, 37, 12, 2, 60, 50, 4, 16,
		60, 37, 12, 2, 43, 50, 4, 16, 43, 37, 12, 9, 43, 33, 8, 4, 15, 34, 11, 0, 15, 37, 12, 2, 47, 37, 12, 2, 45, 66, 6, 8, 45,
		33, 8, 4, 136, 34, 11, 0, 136, 37, 12, 2, 106, 37, 12, 2, 104, 30, 4, 16, 104, 37, 12, 2, 110, 37, 12, 2, 13, 37, 12, 2,
		81, 50, 4, 16, 81, 30, 5, 10, 81, 37, 12, 2, 120, 30, 5, 21, 120, 30, 5, 10, 120, 37, 12, 2, 116, 30, 5, 10, 116, 37, 12,
		2, 128, 30, 5, 10, 128, 37, 12, 2, 66, 30, 5, 10, 66, 50, 4, 16, 66, 37, 12, 2, 72, 30, 4, 16, 72, 37, 12, 2, 98, 37, 12,
		2, 97, 30, 5, 10, 97, 37, 12, 2, 31, 61, 12, 7, 31, 47, 13, 7, 31, 30, 5, 10, 31, 30, 4, 16, 31, 58, 4, 16, 31, 37, 12, 2,
		88, 30, 5, 10, 88, 30, 4, 16, 88, 37, 12, 2, 117, 30, 5, 10, 117, 37, 12, 2, 112, 30, 5, 21, 112, 44, 13, 7, 112, 30, 5,
		10, 112, 50, 4, 16, 112, 30, 4, 16, 112, 37, 12, 2, 78, 30, 4, 16, 78, 50, 4, 16, 78, 37, 12, 2, 83, 30, 5, 10, 83, 37, 12,
		2, 82, 30, 5, 10, 82, 37, 12, 2, 121, 50, 4, 16, 121, 30, 5, 10, 121, 37, 12, 2, 89, 33, 8, 4, 130, 34, 11, 0, 130, 30, 5,
		10, 130, 30, 5, 10, 3, 68, 12, 5, 94, 61, 12, 7, 94, 37, 12, 2, 94, 47, 13, 7, 94, 58, 4, 16, 94, 50, 4, 16, 94, 30, 5, 10,
		94, 66, 6, 8, 94, 47, 13, 7, 85, 68, 12, 5, 85, 37, 12, 2, 85, 61, 12, 7, 85, 44, 13, 7, 85, 30, 4, 16, 85, 63, 5, 26, 85,
		58, 4, 16, 85, 37, 12, 2, 101, 66, 6, 8, 101, 61, 12, 7, 96, 37, 12, 2, 96, 68, 12, 5, 96, 44, 13, 7, 96, 66, 6, 8, 96, 30,
		4, 16, 96, 58, 4, 16, 96, 37, 12, 2, 111, 44, 13, 7, 111, 30, 4, 16, 111, 61, 12, 7, 100, 68, 12, 5, 100, 37, 12, 2, 100,
		72, 13, 5, 100, 58, 4, 16, 100, 30, 4, 16, 100, 44, 13, 7, 100, 66, 6, 8, 100, 30, 5, 10, 48, 37, 12, 2, 108, 68, 12, 5,
		108, 61, 12, 7, 108, 72, 13, 5, 108, 44, 13, 7, 108, 58, 4, 16, 108, 50, 4, 16, 108, 30, 4, 16, 108, 37, 12, 2, 129, 58,
		4, 16, 129, 37, 12, 2, 109, 61, 12, 7, 109, 68, 12, 5, 109, 44, 13, 7, 109, 66, 6, 8, 109, 61, 12, 7, 107, 68, 12, 5, 107,
		37, 12, 2, 107, 44, 13, 7, 107, 69, 12, 5, 107, 72, 13, 5, 107, 131, 12, 2, 107, 37, 12, 2, 135, 68, 12, 5, 135, 61, 12,
		7, 135, 44, 13, 7, 135, 58, 4, 16, 135, 50, 4, 16, 135, 30, 4, 16, 135, 66, 6, 8, 135, 37, 12, 2, 124, 69, 12, 5, 124, 68,
		12, 5, 124, 61, 12, 7, 124, 44, 13, 7, 124, 30, 4, 16, 124, 66, 6, 8, 124, 37, 12, 2, 123, 69, 12, 5, 123, 68, 12, 5, 123,
		61, 12, 7, 123, 44, 13, 7, 123, 30, 4, 16, 123, 58, 4, 16, 123, 50, 4, 16, 123, 76, 4, 16, 123, 37, 12, 2, 114, 68, 12, 5,
		114, 61, 12, 7, 114, 44, 13, 7, 114, 58, 4, 16, 114, 30, 4, 16, 114, 66, 6, 8, 114, 37, 12, 2, 102, 61, 12, 7, 102, 68, 12,
		5, 102, 72, 13, 5, 102, 44, 13, 7, 102, 66, 6, 8, 102, 37, 12, 2, 126, 61, 12, 7, 126, 68, 12, 5, 126, 44, 13, 7, 126, 66,
		6, 8, 126, 30, 5, 10, 126, 58, 4, 16, 126, 30, 5, 21, 126, 33, 8, 4, 125, 34, 11, 0, 125, 66, 6, 8, 125, 30, 5, 10, 125,
		37, 12, 2, 125, 37, 12, 2, 141, 61, 12, 7, 141, 68, 12, 5, 141, 47, 13, 7, 141, 44, 13, 7, 141, 30, 4, 16, 141, 58, 4, 16,
		141, 37, 12, 2, 140, 61, 12, 7, 140, 68, 12, 5, 140, 132, 13, 7, 140, 44, 13, 7, 140, 30, 4, 16, 140, 58, 4, 16, 140, 50,
		4, 16, 140, 37, 12, 2, 122, 37, 12, 2, 133, 68, 12, 5, 133, 61, 12, 7, 133, 44, 13, 7, 133, 58, 4, 16, 133, 50, 4, 16, 133,
		30, 4, 16, 133, 66, 6, 8, 133, 30, 5, 10, 133, 30, 4, 16, 134, 50, 4, 16, 134, 37, 12, 2, 134, 61, 12, 7, 134, 68, 12, 5,
		134, 37, 12, 2, 138, 61, 12, 7, 138, 44, 13, 7, 138, 66, 6, 8, 138, 37, 12, 2, 63, 37, 12, 9, 63, 50, 4, 16, 63, 37, 12,
		2, 80, 37, 12, 2, 127, 37, 12, 2, 115, 66, 6, 8, 115, 58, 4, 16, 115, 37, 12, 2, 103, 44, 13, 7, 103, 58, 4, 16, 103, 37,
		12, 2, 119, 61, 12, 7, 119, 58, 4, 16, 119, 50, 4, 16, 119, 30, 4, 16, 119, 30, 5, 21, 119, 67, 12, 1, 119, 65, 12, 1, 119,
		66, 6, 8, 119, 30, 5, 10, 119, 37, 12, 2, 99, 68, 12, 5, 99, 44, 13, 7, 99, 42, 12, 1, 99, 65, 12, 1, 137, 65, 12, 1, 139,
		113, 12, 2, 137, 113, 12, 2, 139, 37, 12, 2, 105, 30, 5, 21, 105, 47, 13, 7, 105, 61, 12, 7, 105, 58, 4, 16, 105, 133, 13,
		5, 1, 66, 13, 5, 1, 114, 13, 5, 1, 47, 13, 7, 21, 92, 6, 8, 1, 30, 5, 21, 131, 47, 13, 7, 131, 50, 4, 16, 131, 58, 4, 16,
		131, 30, 4, 16, 131, 61, 12, 7, 19, 37, 12, 2, 113, 30, 5, 10, 113, 44, 13, 7, 113, 33, 8, 4, 132, 34, 11, 0, 132, 79, 13,
		7, 132, 61, 12, 7, 132, 44, 13, 7, 132, 66, 6, 8, 132, 30, 4, 16, 132, 101, 12, 2, 3, 134, 8, 21, 1, 135, 5, 21, 1, 30, 5,
		21, 28, 136, 5, 26, 1
	};

	static constexpr std::array<std::uint_least64_t, 137> pflags =
	{
		UINT64_C(7), UINT64_C(2147483663), UINT64_C(70370891661327), UINT64_C(70373576016135), UINT64_C(70373039145095), UINT64_C(70373039144967),
		UINT64_C(70647917052039), UINT64_C(351848015855623), UINT64_C(70373039145223), UINT64_C(70373039145031), UINT64_C(70648453923079),
		UINT64_C(5699868278393863), UINT64_C(70647917052167), UINT64_C(8546160285322247), UINT64_C(8546160285319175), UINT64_C(352122893779463),
		UINT64_C(5699868278390791), UINT64_C(70647917068295), UINT64_C(8544476658142215), UINT64_C(8544476658139143), UINT64_C(8544476691693575),
		UINT64_C(5), UINT64_C(2147483661), UINT64_C(70368744177677), UINT64_C(70373039144965), UINT64_C(70643622100997), UINT64_C(8532382030299141),
		UINT64_C(70373039145093), UINT64_C(351848015855621), UINT64_C(35459249995781), UINT64_C(70368744177669), UINT64_C(8548874704650245),
		UINT64_C(5700143424782341), UINT64_C(8546160285319173), UINT64_C(8544476658139141), UINT64_C(8544476691693573), UINT64_C(8532382030233605),
		UINT64_C(8532210231541765), UINT64_C(8548359308574725), UINT64_C(8547191077470213), UINT64_C(8532656908222469), UINT64_C(8532656941776901),
		UINT64_C(8532485109465093), UINT64_C(8532485109497861), UINT64_C(5770511900491781), UINT64_C(5804768559714309), UINT64_C(5805696289341445),
		UINT64_C(5770511900475397), UINT64_C(1), UINT64_C(1777257467166725), UINT64_C(70368744177925), UINT64_C(5700143424733445),
		UINT64_C(8830349681361413), UINT64_C(8813891366683141), UINT64_C(8532416389971973), UINT64_C(8827635262030341), UINT64_C(351843720888325),
		UINT64_C(141012366262277), UINT64_C(70369281048837), UINT64_C(70368744177733), UINT64_C(5788104086540293), UINT64_C(5788104086523909),
		UINT64_C(70643622084613), UINT64_C(283467841541), UINT64_C(35459249995797), UINT64_C(8532485109481477), UINT64_C(5699868278390789),
		UINT64_C(8532485109448709), UINT64_C(5717460464439301), UINT64_C(5787829209141253), UINT64_C(6280410417856517), UINT64_C(8532210298650629),
		UINT64_C(5699868278407173), UINT64_C(8567394620407813), UINT64_C(5699868546826245), UINT64_C(8541762238808069), UINT64_C(70368744210437),
		UINT64_C(5805697346306053), UINT64_C(8602853987848197), UINT64_C(5770511900524549), UINT64_C(70368744194053), UINT64_C(8532656908206085),
		UINT64_C(8532382063788037), UINT64_C(8532656941760517), UINT64_C(176196738875429), UINT64_C(35459249995813), UINT64_C(35461397479445),
		UINT64_C(70373039145029), UINT64_C(351848015856133), UINT64_C(70647917052037), UINT64_C(70647917051909), UINT64_C(70373576016133),
		UINT64_C(5981343255101957), UINT64_C(316934226706949), UINT64_C(35184388866049), UINT64_C(351843720888389), UINT64_C(351843720888837),
		UINT64_C(6051986877186565), UINT64_C(8813857006944773), UINT64_C(8796093156425733), UINT64_C(8514618179715077), UINT64_C(8813685208252933),
		UINT64_C(8813857040499205), UINT64_C(8546160285450245), UINT64_C(8544476658204677), UINT64_C(351848015855685), UINT64_C(4294967297),
		UINT64_C(101910984134661), UINT64_C(100227356889093), UINT64_C(88240103112709), UINT64_C(70373039145221), UINT64_C(70368748371973),
		UINT64_C(70368745226245), UINT64_C(8532210231549957), UINT64_C(5770237023109125), UINT64_C(1759493616582661), UINT64_C(8532210239938565),
		UINT64_C(8532210231558149), UINT64_C(1776810790486021), UINT64_C(262145), UINT64_C(70368744177797), UINT64_C(70644158955781),
		UINT64_C(70643622084869), UINT64_C(351843720888901), UINT64_C(70643622084741), UINT64_C(5699868278391813), UINT64_C(8546160285320197),
		UINT64_C(352118598812165), UINT64_C(8544476658140165), UINT64_C(6351054040481797), UINT64_C(274877906949), UINT64_C(8532210231574533),
		UINT64_C(5770511900508165), UINT64_C(5770237023092741), UINT64_C(88167088787461), UINT64_C(70385924046853), UINT64_C(176196738875397)
	};

	static constexpr std::array<std::uint_least16_t, 16> cflags =
	{
		512, 896, 640, 2432, 3080, 3072, 7280, 7269, 7237, 7176, 7267, 7235, 7233, 7168, 0, 128
	};

	auto table = std::make_unique<raw_record_table>();
	detail::run_length_decode(rlestage1.begin(), rlestage1.end(), table->stage1.begin());
	detail::run_length_decode(rlestage2.begin(), rlestage2.end(), table->stage2.begin());
	auto& records = table->records;
	for (std::size_t r = 0, f = 0, e = flyweights.size(); f < e; ++r, f += 4) {
		records[r].pflags = pflags[flyweights[f + 0]];
		records[r].cflags = cflags[flyweights[f + 1]];
		records[r].gcindex = flyweights[f + 2];
		records[r].scindex = flyweights[f + 3];
	}
	return table;
}

} // namespace lug::unicode

#endif
